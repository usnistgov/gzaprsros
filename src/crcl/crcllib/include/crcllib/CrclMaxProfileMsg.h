// Generated by gencpp from file crcl_rosmsgs/CrclMaxProfileMsg.msg
// DO NOT EDIT!


#ifndef CRCL_ROSMSGS_MESSAGE_CRCLMAXPROFILEMSG_H
#define CRCL_ROSMSGS_MESSAGE_CRCLMAXPROFILEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crcl_rosmsgs
{
template <class ContainerAllocator>
struct CrclMaxProfileMsg_
{
  typedef CrclMaxProfileMsg_<ContainerAllocator> Type;

  CrclMaxProfileMsg_()
    : maxvel(0.0)
    , maxacc(0.0)
    , maxjerk(0.0)  {
    }
  CrclMaxProfileMsg_(const ContainerAllocator& _alloc)
    : maxvel(0.0)
    , maxacc(0.0)
    , maxjerk(0.0)  {
  (void)_alloc;
    }



   typedef double _maxvel_type;
  _maxvel_type maxvel;

   typedef double _maxacc_type;
  _maxacc_type maxacc;

   typedef double _maxjerk_type;
  _maxjerk_type maxjerk;





  typedef boost::shared_ptr< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CrclMaxProfileMsg_

typedef ::crcl_rosmsgs::CrclMaxProfileMsg_<std::allocator<void> > CrclMaxProfileMsg;

typedef boost::shared_ptr< ::crcl_rosmsgs::CrclMaxProfileMsg > CrclMaxProfileMsgPtr;
typedef boost::shared_ptr< ::crcl_rosmsgs::CrclMaxProfileMsg const> CrclMaxProfileMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crcl_rosmsgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'crcl_rosmsgs': ['/home/isd/michalos/src/github/nist/gzaprsros/src/crcl/crcl_rosmsgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "742e843fd73edd56339febf5eb8f2edd";
  }

  static const char* value(const ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x742e843fd73edd56ULL;
  static const uint64_t static_value2 = 0x339febf5eb8f2eddULL;
};

template<class ContainerAllocator>
struct DataType< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crcl_rosmsgs/CrclMaxProfileMsg";
  }

  static const char* value(const ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Crcl contains maximum motion rates for canonical robot command language exchange.\n\
\n\
float64   maxvel # maximum vel for each motion\n\
float64   maxacc # maximum acc for each motion\n\
float64   maxjerk # maximum jerk for each motion\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.maxvel);
      stream.next(m.maxacc);
      stream.next(m.maxjerk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CrclMaxProfileMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator>& v)
  {
    s << indent << "maxvel: ";
    Printer<double>::stream(s, indent + "  ", v.maxvel);
    s << indent << "maxacc: ";
    Printer<double>::stream(s, indent + "  ", v.maxacc);
    s << indent << "maxjerk: ";
    Printer<double>::stream(s, indent + "  ", v.maxjerk);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRCL_ROSMSGS_MESSAGE_CRCLMAXPROFILEMSG_H
