// Generated by gencpp from file crcl_rosmsgs/CrclCommandMsg.msg
// DO NOT EDIT!


#ifndef CRCL_ROSMSGS_MESSAGE_CRCLCOMMANDMSG_H
#define CRCL_ROSMSGS_MESSAGE_CRCLCOMMANDMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <sensor_msgs/JointState.h>
#include <std_msgs/ColorRGBA.h>
#include <crcl_rosmsgs/CrclMaxProfileMsg.h>

namespace crcl_rosmsgs
{
template <class ContainerAllocator>
struct CrclCommandMsg_
{
  typedef CrclCommandMsg_<ContainerAllocator> Type;

  CrclCommandMsg_()
    : header()
    , crclcommand(0)
    , crclcommandnum(0)
    , finalpose()
    , waypoints()
    , joints()
    , jointnum()
    , hint()
    , bStraight(false)
    , dwell_seconds(0.0)
    , opmessage()
    , partname()
    , partfeature()
    , partcolor()
    , bCoordinated(false)
    , eepercent(0.0)
    , profile()
    , parameter_names()
    , parameter_values()  {
    }
  CrclCommandMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , crclcommand(0)
    , crclcommandnum(0)
    , finalpose(_alloc)
    , waypoints(_alloc)
    , joints(_alloc)
    , jointnum(_alloc)
    , hint(_alloc)
    , bStraight(false)
    , dwell_seconds(0.0)
    , opmessage(_alloc)
    , partname(_alloc)
    , partfeature(_alloc)
    , partcolor(_alloc)
    , bCoordinated(false)
    , eepercent(0.0)
    , profile(_alloc)
    , parameter_names(_alloc)
    , parameter_values(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _crclcommand_type;
  _crclcommand_type crclcommand;

   typedef uint64_t _crclcommandnum_type;
  _crclcommandnum_type crclcommandnum;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _finalpose_type;
  _finalpose_type finalpose;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _waypoints_type;
  _waypoints_type waypoints;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joints_type;
  _joints_type joints;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _jointnum_type;
  _jointnum_type jointnum;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _hint_type;
  _hint_type hint;

   typedef uint8_t _bStraight_type;
  _bStraight_type bStraight;

   typedef double _dwell_seconds_type;
  _dwell_seconds_type dwell_seconds;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _opmessage_type;
  _opmessage_type opmessage;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _partname_type;
  _partname_type partname;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _partfeature_type;
  _partfeature_type partfeature;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _partcolor_type;
  _partcolor_type partcolor;

   typedef uint8_t _bCoordinated_type;
  _bCoordinated_type bCoordinated;

   typedef double _eepercent_type;
  _eepercent_type eepercent;

   typedef std::vector< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >::other >  _profile_type;
  _profile_type profile;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _parameter_names_type;
  _parameter_names_type parameter_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _parameter_values_type;
  _parameter_values_type parameter_values;



  enum {
    initCanon = 1u,
    endCanon = 2u,
    actuatejoints = 3u,
    moveto = 4u,
    dwell = 5u,
    message = 6u,
    moveThroughTo = 7u,
    setCoordinatedMotion = 8u,
    stopMotion = 9u,
    setEndEffector = 10u,
    openToolChange = 11u,
    closeToolChanger = 12u,
    drawObject = 13u,
    eraseObject = 14u,
    setGripperPose = 15u,
    pick = 16u,
    place = 17u,
  };


  typedef boost::shared_ptr< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CrclCommandMsg_

typedef ::crcl_rosmsgs::CrclCommandMsg_<std::allocator<void> > CrclCommandMsg;

typedef boost::shared_ptr< ::crcl_rosmsgs::CrclCommandMsg > CrclCommandMsgPtr;
typedef boost::shared_ptr< ::crcl_rosmsgs::CrclCommandMsg const> CrclCommandMsgConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crcl_rosmsgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'crcl_rosmsgs': ['/home/isd/michalos/src/github/nist/gzaprsros/src/crcl/crcl_rosmsgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c49fd96e335259026d22a5e32f09016e";
  }

  static const char* value(const ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc49fd96e33525902ULL;
  static const uint64_t static_value2 = 0x6d22a5e32f09016eULL;
};

template<class ContainerAllocator>
struct DataType< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crcl_rosmsgs/CrclCommandMsg";
  }

  static const char* value(const ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Crcl command contains information for canonical robot command language exchange.\n\
# CRCL is expressed in XML.\n\
# At a primite level, a CRCL message is a framed xml string.\n\
# So, the ROS message contains a xml string and the originating ip from where the CRCL message came.\n\
# \n\
\n\
std_msgs/Header header\n\
\n\
# enumeration of CRCL commands\n\
uint8 crclcommand\n\
########################################\n\
uint8 initCanon=1\n\
uint8 endCanon=2\n\
uint8 actuatejoints=3\n\
uint8 moveto=4\n\
uint8 dwell=5\n\
uint8 message=6\n\
uint8 moveThroughTo=7\n\
uint8 setCoordinatedMotion=8\n\
uint8 stopMotion=9\n\
uint8 setEndEffector=10\n\
uint8 openToolChange=11\n\
uint8 closeToolChanger=12\n\
uint8 drawObject = 13\n\
uint8 eraseObject = 14\n\
uint8 setGripperPose = 15\n\
uint8 pick = 16\n\
uint8 place = 17\n\
########################################\n\
uint64 crclcommandnum\n\
\n\
# https://github.com/ros/common_msgs \n\
geometry_msgs/Pose  finalpose\n\
geometry_msgs/Pose[] waypoints\n\
# Below joint info could be  trajectory_msgs/JointTrajectoryPoint\n\
sensor_msgs/JointState joints\n\
uint64[] jointnum\n\
float64[] hint\n\
bool bStraight\n\
float64   dwell_seconds\n\
string opmessage\n\
string partname\n\
string partfeature\n\
std_msgs/ColorRGBA  partcolor\n\
bool bCoordinated\n\
float64 eepercent\n\
CrclMaxProfileMsg[] profile # maximum profile \n\
string[] parameter_names\n\
string[] parameter_values\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/ColorRGBA\n\
float32 r\n\
float32 g\n\
float32 b\n\
float32 a\n\
\n\
================================================================================\n\
MSG: crcl_rosmsgs/CrclMaxProfileMsg\n\
# Crcl contains maximum motion rates for canonical robot command language exchange.\n\
\n\
float64   maxvel # maximum vel for each motion\n\
float64   maxacc # maximum acc for each motion\n\
float64   maxjerk # maximum jerk for each motion\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.crclcommand);
      stream.next(m.crclcommandnum);
      stream.next(m.finalpose);
      stream.next(m.waypoints);
      stream.next(m.joints);
      stream.next(m.jointnum);
      stream.next(m.hint);
      stream.next(m.bStraight);
      stream.next(m.dwell_seconds);
      stream.next(m.opmessage);
      stream.next(m.partname);
      stream.next(m.partfeature);
      stream.next(m.partcolor);
      stream.next(m.bCoordinated);
      stream.next(m.eepercent);
      stream.next(m.profile);
      stream.next(m.parameter_names);
      stream.next(m.parameter_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CrclCommandMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crcl_rosmsgs::CrclCommandMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "crclcommand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crclcommand);
    s << indent << "crclcommandnum: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.crclcommandnum);
    s << indent << "finalpose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.finalpose);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.waypoints[i]);
    }
    s << indent << "joints: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joints);
    s << indent << "jointnum[]" << std::endl;
    for (size_t i = 0; i < v.jointnum.size(); ++i)
    {
      s << indent << "  jointnum[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.jointnum[i]);
    }
    s << indent << "hint[]" << std::endl;
    for (size_t i = 0; i < v.hint.size(); ++i)
    {
      s << indent << "  hint[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hint[i]);
    }
    s << indent << "bStraight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bStraight);
    s << indent << "dwell_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.dwell_seconds);
    s << indent << "opmessage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.opmessage);
    s << indent << "partname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.partname);
    s << indent << "partfeature: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.partfeature);
    s << indent << "partcolor: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.partcolor);
    s << indent << "bCoordinated: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bCoordinated);
    s << indent << "eepercent: ";
    Printer<double>::stream(s, indent + "  ", v.eepercent);
    s << indent << "profile[]" << std::endl;
    for (size_t i = 0; i < v.profile.size(); ++i)
    {
      s << indent << "  profile[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::crcl_rosmsgs::CrclMaxProfileMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.profile[i]);
    }
    s << indent << "parameter_names[]" << std::endl;
    for (size_t i = 0; i < v.parameter_names.size(); ++i)
    {
      s << indent << "  parameter_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_names[i]);
    }
    s << indent << "parameter_values[]" << std::endl;
    for (size_t i = 0; i < v.parameter_values.size(); ++i)
    {
      s << indent << "  parameter_values[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameter_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRCL_ROSMSGS_MESSAGE_CRCLCOMMANDMSG_H
