// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GripCommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GripCommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace message {

namespace {

const ::google::protobuf::Descriptor* GripCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GripCommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GripCommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_GripCommand_2eproto() {
  protobuf_AddDesc_GripCommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GripCommand.proto");
  GOOGLE_CHECK(file != NULL);
  GripCommand_descriptor_ = file->message_type(0);
  static const int GripCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GripCommand, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GripCommand, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GripCommand, force_),
  };
  GripCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GripCommand_descriptor_,
      GripCommand::default_instance_,
      GripCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GripCommand, _has_bits_[0]),
      -1,
      -1,
      sizeof(GripCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GripCommand, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GripCommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GripCommand_descriptor_, &GripCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GripCommand_2eproto() {
  delete GripCommand::default_instance_;
  delete GripCommand_reflection_;
}

void protobuf_AddDesc_GripCommand_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_GripCommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GripCommand.proto\022\007message\";\n\013GripComm"
    "and\022\016\n\006enable\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\022\r\n\005fo"
    "rce\030\003 \003(\001", 89);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GripCommand.proto", &protobuf_RegisterTypes);
  GripCommand::default_instance_ = new GripCommand();
  GripCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GripCommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GripCommand_2eproto {
  StaticDescriptorInitializer_GripCommand_2eproto() {
    protobuf_AddDesc_GripCommand_2eproto();
  }
} static_descriptor_initializer_GripCommand_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GripCommand::kEnableFieldNumber;
const int GripCommand::kStateFieldNumber;
const int GripCommand::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GripCommand::GripCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.GripCommand)
}

void GripCommand::InitAsDefaultInstance() {
}

GripCommand::GripCommand(const GripCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:message.GripCommand)
}

void GripCommand::SharedCtor() {
  _cached_size_ = 0;
  enable_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GripCommand::~GripCommand() {
  // @@protoc_insertion_point(destructor:message.GripCommand)
  SharedDtor();
}

void GripCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GripCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GripCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GripCommand_descriptor_;
}

const GripCommand& GripCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GripCommand_2eproto();
  return *default_instance_;
}

GripCommand* GripCommand::default_instance_ = NULL;

GripCommand* GripCommand::New(::google::protobuf::Arena* arena) const {
  GripCommand* n = new GripCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GripCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:message.GripCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GripCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GripCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(enable_, state_);

#undef ZR_HELPER_
#undef ZR_

  force_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GripCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:message.GripCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_force;
        break;
      }

      // repeated double force = 3;
      case 3: {
        if (tag == 25) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_force())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_force())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_force;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message.GripCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message.GripCommand)
  return false;
#undef DO_
}

void GripCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message.GripCommand)
  // required int32 enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enable(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // repeated double force = 3;
  for (int i = 0; i < this->force_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->force(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message.GripCommand)
}

::google::protobuf::uint8* GripCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.GripCommand)
  // required int32 enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enable(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // repeated double force = 3;
  for (int i = 0; i < this->force_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->force(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.GripCommand)
  return target;
}

int GripCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:message.GripCommand)
  int total_size = 0;

  // required int32 enable = 1;
  if (has_enable()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->enable());
  }
  // optional int32 state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // repeated double force = 3;
  {
    int data_size = 0;
    data_size = 8 * this->force_size();
    total_size += 1 * this->force_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GripCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.GripCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GripCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GripCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.GripCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.GripCommand)
    MergeFrom(*source);
  }
}

void GripCommand::MergeFrom(const GripCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.GripCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  force_.MergeFrom(from.force_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GripCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.GripCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GripCommand::CopyFrom(const GripCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.GripCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GripCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GripCommand::Swap(GripCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GripCommand::InternalSwap(GripCommand* other) {
  std::swap(enable_, other->enable_);
  std::swap(state_, other->state_);
  force_.UnsafeArenaSwap(&other->force_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GripCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GripCommand_descriptor_;
  metadata.reflection = GripCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GripCommand

// required int32 enable = 1;
bool GripCommand::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GripCommand::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
void GripCommand::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
void GripCommand::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
 ::google::protobuf::int32 GripCommand::enable() const {
  // @@protoc_insertion_point(field_get:message.GripCommand.enable)
  return enable_;
}
 void GripCommand::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:message.GripCommand.enable)
}

// optional int32 state = 2;
bool GripCommand::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GripCommand::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void GripCommand::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void GripCommand::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::google::protobuf::int32 GripCommand::state() const {
  // @@protoc_insertion_point(field_get:message.GripCommand.state)
  return state_;
}
 void GripCommand::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:message.GripCommand.state)
}

// repeated double force = 3;
int GripCommand::force_size() const {
  return force_.size();
}
void GripCommand::clear_force() {
  force_.Clear();
}
 double GripCommand::force(int index) const {
  // @@protoc_insertion_point(field_get:message.GripCommand.force)
  return force_.Get(index);
}
 void GripCommand::set_force(int index, double value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.GripCommand.force)
}
 void GripCommand::add_force(double value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:message.GripCommand.force)
}
 const ::google::protobuf::RepeatedField< double >&
GripCommand::force() const {
  // @@protoc_insertion_point(field_list:message.GripCommand.force)
  return force_;
}
 ::google::protobuf::RepeatedField< double >*
GripCommand::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:message.GripCommand.force)
  return &force_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)
