/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2018-08-07 20:41:21.610742
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[2]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.169)*x1);
x15=((1.0)*x1);
x16=((0.169)*x5);
x17=((0.169)*x8);
x18=((0.42)*x2);
x19=((1.0)*x7);
x20=((1.0)*x2);
x21=((1.0)*x8);
x22=((1.0)*x9);
x23=((0.42)*x1);
x24=(x4*x6);
x25=(x0*x7);
x26=(x3*x6);
x27=(x4*x9);
x28=(x6*x7);
x29=(x0*x3);
x30=(x0*x4);
x31=(x3*x4);
x32=(x19*x6);
x33=(x30*x5);
x34=(x15*x31);
x35=(x19*x4*x8);
x36=(x19*x27);
x37=(((x2*x25))+x26);
x38=((((-1.0)*x32))+((x2*x29)));
x39=((((-1.0)*x29))+((x2*x28)));
x40=(((x2*x26))+x25);
x41=((((-1.0)*x34))+((x2*x5)));
x42=(((x31*x5))+((x1*x2)));
x43=(x32+(((-1.0)*x20*x29)));
x44=(x34+(((-1.0)*x20*x5)));
x45=((((-1.0)*x0*x19))+(((-1.0)*x20*x26)));
x46=(x37*x9);
x47=(x37*x8);
x48=(x1*x38);
x49=(x39*x9);
x50=(x43*x5);
x51=(x33+x48);
x52=(((x1*x40))+((x24*x5)));
x53=(x50+((x1*x30)));
x54=((((-1.0)*x15*x40))+(((-1.0)*x24*x5)));
x55=(((x1*x24))+((x45*x5)));
x56=(x51*x8);
x57=(((x13*(((((-1.0)*x36))+((x41*x8))))))+((x12*x42)));
x58=(((x12*x53))+((x13*((x46+x56)))));
x59=(((x12*x55))+((x13*((x49+((x52*x8)))))));
eerot[0]=(((x10*x58))+((x11*((((x9*(((((-1.0)*x33))+(((-1.0)*x48))))))+x47)))));
eerot[1]=((((-1.0)*x10*((((x21*x37))+((x22*(((((-1.0)*x33))+(((-1.0)*x15*x38))))))))))+((x11*x58)));
eerot[2]=(((x13*x53))+((x12*(((((-1.0)*x22*x37))+(((-1.0)*x21*x51)))))));
eetrans[0]=(((x13*((((x16*x43))+((x14*x30))))))+((x23*x30))+((x5*(((((-1.0)*x18*x29))+(((0.42)*x28))))))+((x12*(((((-0.169)*x46))+(((-1.0)*x17*x51))))))+(((0.49)*x30)));
eerot[3]=(((x11*((((x39*x8))+((x54*x9))))))+((x10*x59)));
eerot[4]=(((x11*x59))+((x10*(((((-1.0)*x21*x39))+(((-1.0)*x22*x54)))))));
eerot[5]=(((x13*x55))+((x12*(((((-1.0)*x22*x39))+(((-1.0)*x21*x52)))))));
eetrans[1]=((((0.49)*x24))+((x12*(((((-0.169)*x49))+(((-1.0)*x17*x52))))))+((x23*x24))+((x13*((((x14*x24))+((x16*x45))))))+((x5*(((((-1.0)*x18*x26))+(((-0.42)*x25)))))));
eerot[6]=(((x11*(((((-1.0)*x35))+((x44*x9))))))+((x10*x57)));
eerot[7]=(((x11*x57))+((x10*(((((-1.0)*x22*x44))+x35)))));
eerot[8]=(((x13*x42))+((x12*((x36+(((-1.0)*x21*x41)))))));
eetrans[2]=((0.41)+((x12*(((((-1.0)*x17*x41))+(((0.169)*x27*x7))))))+((x1*x18))+((x13*((((x16*x31))+((x14*x2))))))+(((0.42)*x31*x5))+(((0.49)*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]), htj1=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((-0.169)*r02))+px);
new_r10=r10;
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-0.169)*r12))+py);
new_r20=r20;
new_r21=((-1.0)*r21);
new_r22=((-1.0)*r22);
new_pz=((-0.41)+(((-0.169)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x60=((1.0)*px);
IkReal x61=((1.0)*pz);
IkReal x62=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x62))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x61)));
rxp0_2=((((-1.0)*r10*x60))+((py*r00)));
rxp1_0=((((-1.0)*r21*x62))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x61)));
rxp1_2=((((-1.0)*r11*x60))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x62)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x61)));
rxp2_2=((((-1.0)*r12*x60))+((py*r02)));
{
IkReal j0eval[4];
IkReal x63=sj1*sj1;
j0eval[0]=0.9604;
j0eval[1]=sj1;
j0eval[2]=(pp+(((-1.0)*(pz*pz))));
j0eval[3]=(((x63*(py*py)))+((x63*(px*px))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x64=((0.42)*r22);
IkReal x65=((0.49)*cj1);
IkReal x66=((1.0)*pz);
IkReal x67=pz*pz;
IkReal x68=(pz*r22);
IkReal x69=((0.84)*x68);
IkReal x70=(pz*x66);
IkReal x71=((-1.0)*pz);
IkReal x72=(x65+(((-1.0)*x66))+(((-1.0)*x64)));
IkReal x73=(x64+x65+(((-1.0)*x66)));
IkReal x74=((0.0637)+(((-1.0)*x70))+(((-1.0)*x69)));
IkReal x75=((0.0637)+(((-1.0)*x70))+x69);
px=0;
py=0;
pp=x67;
npx=(pz*r20);
npy=(pz*r21);
npz=x68;
rxp0_0=(pz*r10);
rxp0_1=(r00*x71);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x71);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x71);
rxp2_2=0;
IkReal gconst0=x72;
IkReal gconst1=x73;
IkReal gconst2=x74;
IkReal gconst3=x75;
IkReal gconst4=x72;
IkReal gconst5=x73;
IkReal gconst6=x74;
IkReal gconst7=x75;
IkReal gconst8=x72;
IkReal gconst9=x73;
IkReal gconst10=x74;
IkReal gconst11=x75;
IkReal gconst12=x72;
IkReal gconst13=x73;
IkReal gconst14=x74;
IkReal gconst15=x75;
IkReal x76=r20*r20;
IkReal x77=pz*pz;
IkReal x78=pz*pz*pz;
IkReal x79=r22*r22;
IkReal x80=r21*r21;
IkReal x81=pz*pz*pz*pz;
IkReal x82=cj1*cj1;
IkReal x83=(cj1*pz);
IkReal x84=(r20*r21);
IkReal x85=((2.71063296)*x82);
IkReal x86=((2.8224)*x81);
IkReal x87=(cj1*x78);
IkReal x88=(x77*x84);
IkReal x89=(x77*x82);
IkReal x90=(x77*x79);
IkReal x91=(x76*x77);
IkReal x92=((5.531904)*x87);
IkReal x93=(x80*x81);
IkReal x94=(x77*x80);
IkReal x95=(x79*x81);
IkReal x96=(x76*x81);
IkReal x97=((((0.3523822848)*x83*x84))+((x84*x92)));
IkReal x98=(((x84*x86))+((x85*x88))+(((0.011452424256)*x84))+(((0.35957376)*x88)));
j6eval[0]=((((0.5)*(IKabs(((((-0.017178636384)*x79))+(((1.35531648)*x76*x89))+(((0.7047645696)*x80*x83))+(((-0.1761911424)*x76*x83))+(((-4.06594944)*x79*x89))+(((-5.6448)*x93))+(((-4.2336)*x95))+(((-0.022904848512)*x80))+(((8.297856)*x79*x87))+(((1.4112)*x96))+(((0.17978688)*x91))+(((-2.765952)*x76*x87))+(((-0.71914752)*x94))+(((0.005726212128)*x76))+(((-5.42126592)*x80*x89))+(((-0.53936064)*x90))+(((0.5285734272)*x79*x83))+(((11.063808)*x80*x87)))))))+(IKabs((((x79*x92))+(((-1.0)*x80*x86))+(((0.3523822848)*x79*x83))+(((-1.0)*x79*x86))+(((-0.011452424256)*x79))+((x80*x92))+(((-0.35957376)*x94))+(((-0.35957376)*x90))+(((0.3523822848)*x80*x83))+(((-0.011452424256)*x80))+(((-1.0)*x85*x94))+(((-1.0)*x85*x90)))))+(IKabs((x98+(((-1.0)*x97)))))+(((0.5)*(IKabs(((((1.382976)*x79*x87))+(((0.0880955712)*x76*x83))+(((-0.67765824)*x76*x89))+(((1.382976)*x76*x87))+(((-0.67765824)*x79*x89))+(((-0.08989344)*x91))+(((-0.08989344)*x90))+(((0.0880955712)*x79*x83))+(((-0.7056)*x96))+(((-0.7056)*x95))+(((-0.002863106064)*x76))+(((-0.002863106064)*x79)))))))+(IKabs((x97+(((-1.0)*x98))))));
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5, j6]

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x99=r20*r20;
IkReal x100=pz*pz;
IkReal x101=r21*r21;
IkReal x102=(gconst0*gconst11);
IkReal x103=(gconst5*gconst6);
IkReal x104=((1.0)*gconst12);
IkReal x105=(gconst1*gconst4);
IkReal x106=(gconst15*gconst2);
IkReal x107=(r20*r21);
IkReal x108=(gconst12*gconst9);
IkReal x109=(gconst13*gconst14);
IkReal x110=((2.8224)*gconst11);
IkReal x111=(gconst14*gconst5);
IkReal x112=((1.0)*gconst9);
IkReal x113=(gconst0*gconst3);
IkReal x114=(gconst1*gconst6);
IkReal x115=(gconst11*gconst8);
IkReal x116=(gconst11*pz);
IkReal x117=((1.0)*gconst10);
IkReal x118=(gconst3*pz);
IkReal x119=((5.6448)*gconst12);
IkReal x120=(gconst14*gconst3);
IkReal x121=(gconst3*gconst6);
IkReal x122=((5.6448)*gconst4);
IkReal x123=(gconst10*gconst7);
IkReal x124=(gconst1*gconst12);
IkReal x125=(gconst3*gconst8);
IkReal x126=(gconst4*gconst9);
IkReal x127=((2.8224)*gconst3);
IkReal x128=(gconst10*gconst15);
IkReal x129=(gconst2*gconst7);
IkReal x130=(gconst11*gconst14);
IkReal x131=(gconst11*gconst6);
IkReal x132=(gconst13*gconst6);
IkReal x133=((1.0)*gconst2);
IkReal x134=((2.8224)*gconst14);
IkReal x135=(gconst6*gconst9*pz);
IkReal x136=((5.6448)*x101);
IkReal x137=((1.4112)*x99);
IkReal x138=((11.2896)*x100);
IkReal x139=(pz*x99);
IkReal x140=((1.0)*gconst4*gconst7);
IkReal x141=((0.7056)*x99);
IkReal x142=(gconst14*gconst9*pz);
IkReal x143=(gconst1*gconst14*pz);
IkReal x144=((2.8224)*x101);
IkReal x145=((1.0)*gconst15*gconst4);
IkReal x146=(x100*x99);
IkReal x147=(gconst14*x107*x110);
IkReal x148=(x130*x141);
IkReal x149=((2.8224)*x107*x120);
IkReal x150=(gconst6*x107*x110);
IkReal x151=(x120*x141);
IkReal x152=(x131*x141);
IkReal x153=((2.8224)*x107*x121);
IkReal x154=(x121*x141);
IkReal x155=(x107*x116*x119);
IkReal x156=((5.6448)*x107*x142);
IkReal x157=(gconst12*x116*x137);
IkReal x158=(x137*x142);
IkReal x159=((5.6448)*x107*x143);
IkReal x160=(x107*x116*x122);
IkReal x161=((5.6448)*x107*x135);
IkReal x162=(x107*x118*x119);
IkReal x163=(gconst12*x118*x137);
IkReal x164=(x137*x143);
IkReal x165=(x135*x137);
IkReal x166=(gconst4*x116*x137);
IkReal x167=((5.6448)*pz*x107*x114);
IkReal x168=(x107*x118*x122);
IkReal x169=(gconst4*x118*x137);
IkReal x170=(pz*x114*x137);
IkReal x171=(x107*x108*x138);
IkReal x172=((2.8224)*x108*x146);
IkReal x173=(x107*x126*x138);
IkReal x174=(x107*x124*x138);
IkReal x175=((2.8224)*x126*x146);
IkReal x176=((2.8224)*x124*x146);
IkReal x177=(x105*x107*x138);
IkReal x178=((2.8224)*x105*x146);
IkReal x179=(x171+x147);
IkReal x180=(x172+x148);
IkReal x181=(x178+x154);
IkReal x182=(x157+x158);
IkReal x183=(x168+x167);
IkReal x184=(x156+x155);
IkReal x185=(x177+x153);
IkReal x186=(x170+x169);
IkReal x187=(x175+x176+x152+x151);
IkReal x188=(x162+x160+x161+x159);
IkReal x189=(x163+x166+x164+x165);
IkReal x190=(x173+x174+x150+x149);
op[0]=((((-1.0)*x180))+((x108*x128))+((x109*x115))+x182+(((-1.0)*gconst10*x109*x112))+(((-1.0)*gconst15*x104*x115)));
op[1]=((((-1.0)*x179))+x184);
op[2]=((((5.6448)*x108*x146))+(((-1.0)*gconst1*x109*x117))+(((-1.0)*gconst2*x109*x112))+(((-1.0)*x101*x108*x138))+((x106*x108))+((x111*x115))+(((-1.0)*x115*x145))+((x136*x142))+(((-1.0)*x187))+(((-1.0)*gconst15*x102*x104))+((x108*x123))+x189+((x102*x109))+((x130*x137))+((x109*x125))+((x124*x128))+(((-1.0)*gconst10*x112*x132))+(((-1.0)*gconst12*x110*x139))+((x126*x128))+((x115*x132))+(((-1.0)*gconst14*x101*x110))+(((-1.0)*gconst15*x104*x125))+(((-1.0)*gconst10*x111*x112))+(((-1.0)*gconst7*x104*x115))+(((-1.0)*gconst9*x134*x139))+((x101*x116*x119)));
op[3]=((((-1.0)*x184))+(((-1.0)*x190))+x179+x188);
op[4]=(((x101*x118*x119))+(((-1.0)*gconst1*x134*x139))+((gconst1*x119*x146))+((x111*x125))+(((-1.0)*x101*x126*x138))+(((-1.0)*x115*x140))+(((-1.0)*x120*x144))+(((-1.0)*x125*x145))+((x136*x143))+((x135*x136))+((x101*x116*x122))+((x102*x132))+(((-1.0)*x180))+(((-1.0)*x181))+(((-1.0)*gconst1*x109*x133))+((x106*x126))+((x106*x124))+(((-2.8224)*gconst12*x118*x99))+((x102*x111))+((x108*x129))+((x103*x115))+((x109*x113))+(((-1.0)*gconst6*x101*x110))+x186+x182+(((-1.0)*x102*x145))+(((-1.0)*gconst7*x102*x104))+((gconst9*x122*x146))+((x131*x137))+((x123*x126))+((x123*x124))+((x120*x137))+((x105*x128))+((gconst13*gconst8*x121))+(((-1.0)*gconst10*x103*x112))+(((-1.0)*gconst13*x114*x117))+(((-1.0)*gconst15*x104*x113))+(((-1.0)*gconst2*x111*x112))+(((-1.0)*gconst1*x111*x117))+(((-1.0)*gconst7*x104*x125))+(((-1.0)*gconst2*x112*x132))+(((-2.8224)*x135*x99))+(((-1.0)*x101*x124*x138))+(((-1.0)*gconst4*x110*x139)));
op[5]=((((-1.0)*x185))+(((-1.0)*x188))+x190+x183);
op[6]=(((x121*x137))+((x101*x118*x122))+((x111*x113))+(((-1.0)*gconst1*x103*x117))+(((-1.0)*x125*x140))+(((-2.8224)*x114*x139))+(((-1.0)*x187))+((x103*x125))+x189+(((-1.0)*x102*x140))+((x102*x103))+(((-1.0)*x121*x144))+((x113*x132))+((x105*x123))+((x124*x129))+(((-1.0)*x101*x105*x138))+(((-2.8224)*gconst4*x118*x99))+(((-1.0)*gconst13*x114*x133))+(((5.6448)*x105*x146))+((x126*x129))+((pz*x114*x136))+(((-1.0)*gconst1*x111*x133))+((x105*x106))+(((-1.0)*gconst7*x104*x113))+(((-1.0)*x113*x145))+(((-1.0)*gconst2*x103*x112)));
op[7]=((((-1.0)*x183))+x185);
op[8]=((((-1.0)*gconst1*x103*x133))+(((-1.0)*x181))+((x103*x113))+x186+((x105*x129))+(((-1.0)*x113*x140)));
polyroots8(op,zeror,numroots);
IkReal j6array[8], cj6array[8], sj6array[8], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[8]={true,true,true,true,true,true,true,true};
_nj6 = 8;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal j5eval[2];
IkReal x191=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x191);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x191);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x191);
rxp2_2=0;
IkReal x192=(cj6*r20);
IkReal x193=(r21*sj6);
j5eval[0]=((((2.38095238095238)*(IKabs(((((-0.42)*x193))+(((0.42)*x192)))))))+(IKabs(r22)));
j5eval[1]=((x193*x193)+(r22*r22)+(((-2.0)*x192*x193))+(x192*x192));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x194=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x194);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x194);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x194);
rxp2_2=0;
IkReal x195=pz*pz;
IkReal x196=(cj6*r20);
IkReal x197=(r21*sj6);
j5eval[0]=((IKabs((pz*r22)))+(IKabs(((((-1.0)*pz*x197))+((pz*x196))))));
j5eval[1]=(((x195*(x197*x197)))+((x195*(x196*x196)))+((x195*(r22*r22)))+(((-2.0)*x195*x196*x197)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x198=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x198);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x198);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x198);
rxp2_2=0;
IkReal x199=sj1*sj1;
IkReal x200=cj6*cj6;
IkReal x201=sj6*sj6;
IkReal x202=(sj1*sj6);
IkReal x203=(cj6*sj1);
IkReal x204=(x199*x201);
IkReal x205=(x199*x200);
IkReal x206=((2.0)*cj6*sj6*x199);
j0eval[0]=((IKabs((((r01*x203))+((r00*x202)))))+(IKabs((((r11*x203))+((r10*x202))))));
j0eval[1]=(((r10*r11*x206))+((x205*(r11*r11)))+((r00*r01*x206))+((x204*(r10*r10)))+((x205*(r01*r01)))+((x204*(r00*r00))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j5]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x207=((0.49)*sj6);
IkReal x208=((1.0)*pz);
IkReal x209=(cj6*r21);
IkReal x210=((0.49)*cj6*sj1);
IkReal x211=(((r11*x210))+((r10*sj1*x207)));
IkReal x212=(((r00*sj1*x207))+((r01*x210)));
CheckValue<IkReal> x215 = IKatan2WithCheck(IkReal(x212),IkReal(x211),IKFAST_ATAN2_MAGTHRESH);
if(!x215.valid){
continue;
}
IkReal x213=((1.0)*(x215.value));
if((((x211*x211)+(x212*x212))) < -0.00001)
continue;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(IKabs(IKsqrt(((x211*x211)+(x212*x212)))),-1);
if(!x216.valid){
continue;
}
if( (((x216.value)*(((((-1.0)*r20*sj6*x208))+(((-1.0)*x208*x209))+((cj1*r20*x207))+(((0.49)*cj1*x209)))))) < -1-IKFAST_SINCOS_THRESH || (((x216.value)*(((((-1.0)*r20*sj6*x208))+(((-1.0)*x208*x209))+((cj1*r20*x207))+(((0.49)*cj1*x209)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x214=IKasin(((x216.value)*(((((-1.0)*r20*sj6*x208))+(((-1.0)*x208*x209))+((cj1*r20*x207))+(((0.49)*cj1*x209))))));
j0array[0]=((((-1.0)*x214))+(((-1.0)*x213)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x214+(((-1.0)*x213)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5eval[1];
IkReal x217=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x217);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x217);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x217);
rxp2_2=0;
j5eval[0]=((((-1.0)*r01*sj6))+((cj6*r00)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x218=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x218);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x218);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x218);
rxp2_2=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x219=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x219);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x219);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x219);
rxp2_2=0;
j5eval[0]=(((cj6*r21))+((r20*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x221 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x221)==0){
continue;
}
IkReal x220=pow(x221,-0.5);
CheckValue<IkReal> x222 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x222.valid){
continue;
}
IkReal gconst32=((-1.0)*(x222.value));
IkReal gconst33=((-1.0)*r21*x220);
IkReal gconst34=(r20*x220);
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x223.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x224=((49.0)*r02);
IkReal x225=(pz*r22);
IkReal x226=(cj0*sj1);
IkReal x227=(cj1*r22);
IkReal x228=(r12*sj0*sj1);
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((((-42.0)*gconst33*r01))+(((42.0)*gconst34*r00))),-1);
if(!x229.valid){
continue;
}
if( IKabs(((x229.value)*((((x224*x227))+((x224*x228))+(((-49.0)*x226))+(((-100.0)*r02*x225))+((r02*x224*x226)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.38095238095238)*x225))+(((1.16666666666667)*r02*x226))+(((1.16666666666667)*x228))+(((1.16666666666667)*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x229.value)*((((x224*x227))+((x224*x228))+(((-49.0)*x226))+(((-100.0)*r02*x225))+((r02*x224*x226))))))+IKsqr(((((-2.38095238095238)*x225))+(((1.16666666666667)*r02*x226))+(((1.16666666666667)*x228))+(((1.16666666666667)*x227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x229.value)*((((x224*x227))+((x224*x228))+(((-49.0)*x226))+(((-100.0)*r02*x225))+((r02*x224*x226))))), ((((-2.38095238095238)*x225))+(((1.16666666666667)*r02*x226))+(((1.16666666666667)*x228))+(((1.16666666666667)*x227))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x230=IKcos(j5);
IkReal x231=IKsin(j5);
IkReal x232=((0.49)*sj1);
IkReal x233=(gconst33*r01);
IkReal x234=((0.49)*cj1);
IkReal x235=(gconst33*r21);
IkReal x236=(gconst34*r00);
IkReal x237=((1.0)*pz);
IkReal x238=(gconst34*r20);
IkReal x239=((0.84)*pz);
IkReal x240=(gconst33*r11);
IkReal x241=(gconst34*r10);
IkReal x242=((0.42)*x230);
IkReal x243=((0.42)*x231);
evalcond[0]=((((-1.0)*r22*x237))+((cj0*r02*x232))+(((-1.0)*x242))+((r12*sj0*x232))+((r22*x234)));
evalcond[1]=(((x236*x243))+(((-1.0)*x233*x243))+(((-1.0)*r02*x242))+((cj0*x232)));
evalcond[2]=(((sj0*x232))+(((-1.0)*r12*x242))+((x241*x243))+(((-1.0)*x240*x243)));
evalcond[3]=(((x238*x243))+(((-1.0)*x237))+x234+(((-1.0)*x235*x243))+(((-1.0)*r22*x242)));
evalcond[4]=((0.0637)+(((-1.0)*pz*x237))+(((-1.0)*x231*x235*x239))+((x231*x238*x239))+(((-1.0)*r22*x230*x239)));
evalcond[5]=(((x234*x238))+((cj0*x232*x236))+((sj0*x232*x241))+(((-1.0)*sj0*x232*x240))+((pz*x235))+x243+(((-1.0)*x234*x235))+(((-1.0)*x237*x238))+(((-1.0)*cj0*x232*x233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1146 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1146)==0){
continue;
}
IkReal x1145=pow(x1146,-0.5);
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x1147.value))));
IkReal gconst36=((1.0)*r21*x1145);
IkReal gconst37=((-1.0)*r20*x1145);
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1148.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1149=((49.0)*r02);
IkReal x1150=(pz*r22);
IkReal x1151=(cj0*sj1);
IkReal x1152=(cj1*r22);
IkReal x1153=(r12*sj0*sj1);
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(((((42.0)*gconst37*r00))+(((-42.0)*gconst36*r01))),-1);
if(!x1154.valid){
continue;
}
if( IKabs(((x1154.value)*((((x1149*x1153))+((x1149*x1152))+(((-49.0)*x1151))+(((-100.0)*r02*x1150))+((r02*x1149*x1151)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.16666666666667)*x1153))+(((1.16666666666667)*x1152))+(((-2.38095238095238)*x1150))+(((1.16666666666667)*r02*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1154.value)*((((x1149*x1153))+((x1149*x1152))+(((-49.0)*x1151))+(((-100.0)*r02*x1150))+((r02*x1149*x1151))))))+IKsqr(((((1.16666666666667)*x1153))+(((1.16666666666667)*x1152))+(((-2.38095238095238)*x1150))+(((1.16666666666667)*r02*x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1154.value)*((((x1149*x1153))+((x1149*x1152))+(((-49.0)*x1151))+(((-100.0)*r02*x1150))+((r02*x1149*x1151))))), ((((1.16666666666667)*x1153))+(((1.16666666666667)*x1152))+(((-2.38095238095238)*x1150))+(((1.16666666666667)*r02*x1151))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1155=IKcos(j5);
IkReal x1156=IKsin(j5);
IkReal x1157=(gconst37*r20);
IkReal x1158=((0.49)*cj1);
IkReal x1159=(gconst36*r11);
IkReal x1160=(gconst36*r21);
IkReal x1161=(gconst37*r00);
IkReal x1162=((1.0)*pz);
IkReal x1163=((0.49)*sj1);
IkReal x1164=(gconst36*r01);
IkReal x1165=(gconst37*r10);
IkReal x1166=((0.42)*x1156);
IkReal x1167=((0.42)*x1155);
IkReal x1168=((0.84)*pz*x1156);
evalcond[0]=(((r12*sj0*x1163))+((r22*x1158))+(((-1.0)*r22*x1162))+(((-1.0)*x1167))+((cj0*r02*x1163)));
evalcond[1]=((((-1.0)*r02*x1167))+((cj0*x1163))+(((-1.0)*x1164*x1166))+((x1161*x1166)));
evalcond[2]=(((x1165*x1166))+(((-1.0)*x1159*x1166))+((sj0*x1163))+(((-1.0)*r12*x1167)));
evalcond[3]=(x1158+((x1157*x1166))+(((-1.0)*r22*x1167))+(((-1.0)*x1160*x1166))+(((-1.0)*x1162)));
evalcond[4]=((0.0637)+(((-0.84)*pz*r22*x1155))+(((-1.0)*pz*x1162))+((x1157*x1168))+(((-1.0)*x1160*x1168)));
evalcond[5]=(x1166+((sj0*x1163*x1165))+(((-1.0)*x1158*x1160))+((cj0*x1161*x1163))+(((-1.0)*cj0*x1163*x1164))+((pz*x1160))+(((-1.0)*sj0*x1159*x1163))+(((-1.0)*x1157*x1162))+((x1157*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1171 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1171)==0){
continue;
}
IkReal x1169=pow(x1171,-0.5);
IkReal x1170=((-1.0)*x1169);
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
IkReal gconst38=((-1.0)*(x1172.value));
IkReal gconst39=(r10*x1170);
IkReal gconst40=(r11*x1170);
CheckValue<IkReal> x1173 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1173.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j6+(x1173.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1174=((49.0)*r02);
IkReal x1175=(pz*r22);
IkReal x1176=(cj0*sj1);
IkReal x1177=(cj1*r22);
IkReal x1178=(r12*sj0*sj1);
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(((((42.0)*gconst40*r00))+(((-42.0)*gconst39*r01))),-1);
if(!x1179.valid){
continue;
}
if( IKabs(((x1179.value)*((((x1174*x1177))+((x1174*x1178))+(((-49.0)*x1176))+((r02*x1174*x1176))+(((-100.0)*r02*x1175)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.38095238095238)*x1175))+(((1.16666666666667)*r02*x1176))+(((1.16666666666667)*x1177))+(((1.16666666666667)*x1178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1179.value)*((((x1174*x1177))+((x1174*x1178))+(((-49.0)*x1176))+((r02*x1174*x1176))+(((-100.0)*r02*x1175))))))+IKsqr(((((-2.38095238095238)*x1175))+(((1.16666666666667)*r02*x1176))+(((1.16666666666667)*x1177))+(((1.16666666666667)*x1178))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1179.value)*((((x1174*x1177))+((x1174*x1178))+(((-49.0)*x1176))+((r02*x1174*x1176))+(((-100.0)*r02*x1175))))), ((((-2.38095238095238)*x1175))+(((1.16666666666667)*r02*x1176))+(((1.16666666666667)*x1177))+(((1.16666666666667)*x1178))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1180=IKsin(j5);
IkReal x1181=IKcos(j5);
IkReal x1182=(gconst40*r20);
IkReal x1183=((0.49)*cj1);
IkReal x1184=(gconst39*r21);
IkReal x1185=(gconst40*r10);
IkReal x1186=((0.49)*sj1);
IkReal x1187=(gconst39*r01);
IkReal x1188=((1.0)*pz);
IkReal x1189=(gconst39*r11);
IkReal x1190=(gconst40*r00);
IkReal x1191=((0.42)*x1181);
IkReal x1192=((0.42)*x1180);
IkReal x1193=((0.84)*pz*x1180);
evalcond[0]=(((r22*x1183))+((r12*sj0*x1186))+(((-1.0)*x1191))+(((-1.0)*r22*x1188))+((cj0*r02*x1186)));
evalcond[1]=(((cj0*x1186))+(((-1.0)*x1187*x1192))+(((-1.0)*r02*x1191))+((x1190*x1192)));
evalcond[2]=((((-1.0)*x1189*x1192))+((x1185*x1192))+((sj0*x1186))+(((-1.0)*r12*x1191)));
evalcond[3]=(x1183+((x1182*x1192))+(((-1.0)*x1184*x1192))+(((-1.0)*r22*x1191))+(((-1.0)*x1188)));
evalcond[4]=((0.0637)+((x1182*x1193))+(((-1.0)*pz*x1188))+(((-1.0)*x1184*x1193))+(((-0.84)*pz*r22*x1181)));
evalcond[5]=(x1192+(((-1.0)*sj0*x1186*x1189))+((x1182*x1183))+((pz*x1184))+(((-1.0)*cj0*x1186*x1187))+((cj0*x1186*x1190))+(((-1.0)*x1183*x1184))+(((-1.0)*x1182*x1188))+((sj0*x1185*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1196 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1196)==0){
continue;
}
IkReal x1194=pow(x1196,-0.5);
IkReal x1195=((1.0)*x1194);
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1197.value))));
IkReal gconst42=(r10*x1195);
IkReal gconst43=(r11*x1195);
CheckValue<IkReal> x1198 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1198.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6+(x1198.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1199=((49.0)*r02);
IkReal x1200=(pz*r22);
IkReal x1201=(cj0*sj1);
IkReal x1202=(cj1*r22);
IkReal x1203=(r12*sj0*sj1);
CheckValue<IkReal> x1204=IKPowWithIntegerCheck(((((-42.0)*gconst42*r01))+(((42.0)*gconst43*r00))),-1);
if(!x1204.valid){
continue;
}
if( IKabs(((x1204.value)*(((((-100.0)*r02*x1200))+((r02*x1199*x1201))+((x1199*x1203))+((x1199*x1202))+(((-49.0)*x1201)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.16666666666667)*x1203))+(((1.16666666666667)*x1202))+(((-2.38095238095238)*x1200))+(((1.16666666666667)*r02*x1201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1204.value)*(((((-100.0)*r02*x1200))+((r02*x1199*x1201))+((x1199*x1203))+((x1199*x1202))+(((-49.0)*x1201))))))+IKsqr(((((1.16666666666667)*x1203))+(((1.16666666666667)*x1202))+(((-2.38095238095238)*x1200))+(((1.16666666666667)*r02*x1201))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1204.value)*(((((-100.0)*r02*x1200))+((r02*x1199*x1201))+((x1199*x1203))+((x1199*x1202))+(((-49.0)*x1201))))), ((((1.16666666666667)*x1203))+(((1.16666666666667)*x1202))+(((-2.38095238095238)*x1200))+(((1.16666666666667)*r02*x1201))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j5);
IkReal x1206=IKsin(j5);
IkReal x1207=((0.49)*cj1);
IkReal x1208=(gconst42*r21);
IkReal x1209=((0.49)*sj1);
IkReal x1210=(gconst43*r00);
IkReal x1211=(gconst42*r11);
IkReal x1212=((1.0)*pz);
IkReal x1213=(gconst42*r01);
IkReal x1214=(gconst43*r20);
IkReal x1215=(gconst43*r10);
IkReal x1216=((0.42)*x1205);
IkReal x1217=((0.42)*x1206);
IkReal x1218=((0.84)*pz*x1206);
evalcond[0]=((((-1.0)*r22*x1212))+((r12*sj0*x1209))+(((-1.0)*x1216))+((cj0*r02*x1209))+((r22*x1207)));
evalcond[1]=(((cj0*x1209))+(((-1.0)*r02*x1216))+((x1210*x1217))+(((-1.0)*x1213*x1217)));
evalcond[2]=(((sj0*x1209))+(((-1.0)*x1211*x1217))+(((-1.0)*r12*x1216))+((x1215*x1217)));
evalcond[3]=(((x1214*x1217))+x1207+(((-1.0)*x1208*x1217))+(((-1.0)*r22*x1216))+(((-1.0)*x1212)));
evalcond[4]=((0.0637)+((x1214*x1218))+(((-1.0)*x1208*x1218))+(((-0.84)*pz*r22*x1205))+(((-1.0)*pz*x1212)));
evalcond[5]=(x1217+((cj0*x1209*x1210))+((x1207*x1214))+(((-1.0)*cj0*x1209*x1213))+(((-1.0)*x1212*x1214))+((sj0*x1209*x1215))+(((-1.0)*sj0*x1209*x1211))+((pz*x1208))+(((-1.0)*x1207*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1221 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1221)==0){
continue;
}
IkReal x1219=pow(x1221,-0.5);
IkReal x1220=((-1.0)*x1219);
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1222.value));
IkReal gconst45=(r00*x1220);
IkReal gconst46=(r01*x1220);
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1223.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1224=(r12*r22);
IkReal x1225=((1.16666666666667)*sj1);
IkReal x1226=(cj0*r02);
IkReal x1227=((49.0)*sj0*sj1);
CheckValue<IkReal> x1228=IKPowWithIntegerCheck(((((-42.0)*gconst45*r11))+(((42.0)*gconst46*r10))),-1);
if(!x1228.valid){
continue;
}
if( IKabs(((x1228.value)*(((((-100.0)*pz*x1224))+(((-1.0)*x1227))+(((49.0)*r12*sj1*x1226))+(((49.0)*cj1*x1224))+((x1227*(r12*r12))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.16666666666667)*cj1*r22))+((x1225*x1226))+(((-2.38095238095238)*pz*r22))+((r12*sj0*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1228.value)*(((((-100.0)*pz*x1224))+(((-1.0)*x1227))+(((49.0)*r12*sj1*x1226))+(((49.0)*cj1*x1224))+((x1227*(r12*r12)))))))+IKsqr(((((1.16666666666667)*cj1*r22))+((x1225*x1226))+(((-2.38095238095238)*pz*r22))+((r12*sj0*x1225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1228.value)*(((((-100.0)*pz*x1224))+(((-1.0)*x1227))+(((49.0)*r12*sj1*x1226))+(((49.0)*cj1*x1224))+((x1227*(r12*r12)))))), ((((1.16666666666667)*cj1*r22))+((x1225*x1226))+(((-2.38095238095238)*pz*r22))+((r12*sj0*x1225))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1229=IKsin(j5);
IkReal x1230=IKcos(j5);
IkReal x1231=((0.49)*cj1);
IkReal x1232=(gconst46*r10);
IkReal x1233=(gconst45*r21);
IkReal x1234=((1.0)*pz);
IkReal x1235=(gconst45*r01);
IkReal x1236=(gconst45*r11);
IkReal x1237=(gconst46*r20);
IkReal x1238=(gconst46*r00);
IkReal x1239=((0.49)*sj0*sj1);
IkReal x1240=(pz*x1237);
IkReal x1241=((0.84)*x1229);
IkReal x1242=((0.42)*x1230);
IkReal x1243=((0.42)*x1229);
IkReal x1244=((0.49)*cj0*sj1);
evalcond[0]=((((-1.0)*x1242))+((r22*x1231))+((r02*x1244))+(((-1.0)*r22*x1234))+((r12*x1239)));
evalcond[1]=((((-1.0)*r02*x1242))+x1244+(((-1.0)*x1235*x1243))+((x1238*x1243)));
evalcond[2]=(x1239+(((-1.0)*x1236*x1243))+(((-1.0)*r12*x1242))+((x1232*x1243)));
evalcond[3]=(x1231+(((-1.0)*x1234))+(((-1.0)*x1233*x1243))+(((-1.0)*r22*x1242))+((x1237*x1243)));
evalcond[4]=((0.0637)+(((-0.84)*pz*r22*x1230))+((x1240*x1241))+(((-1.0)*pz*x1234))+(((-1.0)*pz*x1233*x1241)));
evalcond[5]=(x1243+((pz*x1233))+(((-1.0)*x1235*x1244))+(((-1.0)*x1236*x1239))+((x1238*x1244))+((x1231*x1237))+(((-1.0)*x1234*x1237))+((x1232*x1239))+(((-1.0)*x1231*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1247 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x1247)==0){
continue;
}
IkReal x1245=pow(x1247,-0.5);
IkReal x1246=((1.0)*x1245);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1248.value))));
IkReal gconst48=(r00*x1246);
IkReal gconst49=(r01*x1246);
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(r00),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1249.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1250=(sj0*sj1);
IkReal x1251=(cj1*r22);
IkReal x1252=((49.0)*r12);
IkReal x1253=(pz*r22);
IkReal x1254=(cj0*r02*sj1);
CheckValue<IkReal> x1255=IKPowWithIntegerCheck(((((42.0)*gconst49*r10))+(((-42.0)*gconst48*r11))),-1);
if(!x1255.valid){
continue;
}
if( IKabs(((x1255.value)*((((r12*x1250*x1252))+(((-100.0)*r12*x1253))+((x1252*x1254))+((x1251*x1252))+(((-49.0)*x1250)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.16666666666667)*r12*x1250))+(((1.16666666666667)*x1254))+(((1.16666666666667)*x1251))+(((-2.38095238095238)*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1255.value)*((((r12*x1250*x1252))+(((-100.0)*r12*x1253))+((x1252*x1254))+((x1251*x1252))+(((-49.0)*x1250))))))+IKsqr(((((1.16666666666667)*r12*x1250))+(((1.16666666666667)*x1254))+(((1.16666666666667)*x1251))+(((-2.38095238095238)*x1253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1255.value)*((((r12*x1250*x1252))+(((-100.0)*r12*x1253))+((x1252*x1254))+((x1251*x1252))+(((-49.0)*x1250))))), ((((1.16666666666667)*r12*x1250))+(((1.16666666666667)*x1254))+(((1.16666666666667)*x1251))+(((-2.38095238095238)*x1253))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1256=IKcos(j5);
IkReal x1257=IKsin(j5);
IkReal x1258=((0.49)*cj1);
IkReal x1259=(pz*r20);
IkReal x1260=(gconst48*r21);
IkReal x1261=((1.0)*pz);
IkReal x1262=((0.49)*sj1);
IkReal x1263=((0.84)*pz);
IkReal x1264=(gconst49*x1257);
IkReal x1265=(gconst48*x1262);
IkReal x1266=((0.42)*x1256);
IkReal x1267=((0.42)*x1257);
evalcond[0]=(((r22*x1258))+((r12*sj0*x1262))+(((-1.0)*r22*x1261))+((cj0*r02*x1262))+(((-1.0)*x1266)));
evalcond[1]=(((cj0*x1262))+(((0.42)*r00*x1264))+(((-1.0)*gconst48*r01*x1267))+(((-1.0)*r02*x1266)));
evalcond[2]=((((-1.0)*r12*x1266))+(((-1.0)*gconst48*r11*x1267))+((sj0*x1262))+(((0.42)*r10*x1264)));
evalcond[3]=(x1258+(((0.42)*r20*x1264))+(((-1.0)*x1260*x1267))+(((-1.0)*r22*x1266))+(((-1.0)*x1261)));
evalcond[4]=((0.0637)+(((-1.0)*x1257*x1260*x1263))+(((-1.0)*pz*x1261))+(((0.84)*x1259*x1264))+(((-1.0)*r22*x1256*x1263)));
evalcond[5]=((((-1.0)*x1258*x1260))+x1267+((gconst49*r20*x1258))+(((-1.0)*gconst49*x1259))+((gconst49*r10*sj0*x1262))+(((-1.0)*r11*sj0*x1265))+(((-1.0)*cj0*r01*x1265))+((pz*x1260))+((cj0*gconst49*r00*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=(((cj6*r20))+(((-1.0)*r21*sj6)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=0;
rxp0_0=(pz*r10);
rxp0_1=0;
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=0;
rxp1_2=0;
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=0;
r00=0;
r01=0;
r12=0;
r22=0;
j5eval[0]=((((-1.0)*r11*sj6))+((cj6*r10)));
j5eval[1]=r02;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(((((-42.0)*r11*sj6))+(((42.0)*cj6*r10))),-1);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(r02,-1);
if(!x1269.valid){
continue;
}
if( IKabs(((-49.0)*sj0*sj1*(x1268.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.16666666666667)*cj0*sj1*(x1269.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-49.0)*sj0*sj1*(x1268.value)))+IKsqr(((1.16666666666667)*cj0*sj1*(x1269.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-49.0)*sj0*sj1*(x1268.value)), ((1.16666666666667)*cj0*sj1*(x1269.value)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1270=IKcos(j5);
IkReal x1271=IKsin(j5);
IkReal x1272=((0.49)*cj1);
IkReal x1273=((1.0)*pz);
IkReal x1274=(cj6*r20);
IkReal x1275=((0.84)*pz);
IkReal x1276=(r21*sj6);
IkReal x1277=(r11*sj6);
IkReal x1278=(cj6*r10);
IkReal x1279=((0.42)*x1270);
IkReal x1280=((0.49)*cj0*sj1);
IkReal x1281=((0.49)*sj0*sj1);
IkReal x1282=((0.42)*x1271);
IkReal x1283=(x1271*x1276);
evalcond[0]=(((r02*x1280))+(((-1.0)*x1279)));
evalcond[1]=(x1280+(((-1.0)*r02*x1279)));
evalcond[2]=(x1281+((x1278*x1282))+(((-1.0)*x1277*x1282)));
evalcond[3]=(x1272+(((-1.0)*x1273))+(((-1.0)*x1276*x1282))+((x1274*x1282)));
evalcond[4]=((0.0637)+(((-1.0)*x1275*x1283))+((x1271*x1274*x1275))+(((-1.0)*pz*x1273)));
evalcond[5]=(((pz*x1276))+x1282+((x1278*x1281))+((x1272*x1274))+(((-1.0)*x1277*x1281))+(((-1.0)*x1272*x1276))+(((-1.0)*x1273*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(((((-0.42)*r21*sj6))+(((0.42)*cj6*r20))),-1);
if(!x1284.valid){
continue;
}
if( IKabs(((x1284.value)*((pz+(((-0.49)*cj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.16666666666667)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1284.value)*((pz+(((-0.49)*cj1))))))+IKsqr(((1.16666666666667)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1284.value)*((pz+(((-0.49)*cj1))))), ((1.16666666666667)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1285=IKcos(j5);
IkReal x1286=IKsin(j5);
IkReal x1287=((0.49)*cj1);
IkReal x1288=((1.0)*pz);
IkReal x1289=(cj6*r20);
IkReal x1290=((0.84)*pz);
IkReal x1291=(r21*sj6);
IkReal x1292=(r11*sj6);
IkReal x1293=(cj6*r10);
IkReal x1294=((0.42)*x1285);
IkReal x1295=((0.49)*cj0*sj1);
IkReal x1296=((0.49)*sj0*sj1);
IkReal x1297=((0.42)*x1286);
IkReal x1298=(x1286*x1291);
evalcond[0]=((((-1.0)*x1294))+((r02*x1295)));
evalcond[1]=(x1295+(((-1.0)*r02*x1294)));
evalcond[2]=(x1296+((x1293*x1297))+(((-1.0)*x1292*x1297)));
evalcond[3]=(x1287+(((-1.0)*x1288))+(((-1.0)*x1291*x1297))+((x1289*x1297)));
evalcond[4]=((0.0637)+((x1286*x1289*x1290))+(((-1.0)*x1290*x1298))+(((-1.0)*pz*x1288)));
evalcond[5]=(x1297+(((-1.0)*x1287*x1291))+((x1293*x1296))+((pz*x1291))+(((-1.0)*x1292*x1296))+((x1287*x1289))+(((-1.0)*x1288*x1289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(((((-42.0)*r11*sj6))+(((42.0)*cj6*r10))),-1);
if(!x1299.valid){
continue;
}
if( IKabs(((-49.0)*sj0*sj1*(x1299.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.16666666666667)*cj0*r02*sj1)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-49.0)*sj0*sj1*(x1299.value)))+IKsqr(((1.16666666666667)*cj0*r02*sj1))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-49.0)*sj0*sj1*(x1299.value)), ((1.16666666666667)*cj0*r02*sj1));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1300=IKcos(j5);
IkReal x1301=IKsin(j5);
IkReal x1302=((0.49)*cj1);
IkReal x1303=((1.0)*pz);
IkReal x1304=(cj6*r20);
IkReal x1305=((0.84)*pz);
IkReal x1306=(r21*sj6);
IkReal x1307=(r11*sj6);
IkReal x1308=(cj6*r10);
IkReal x1309=((0.42)*x1300);
IkReal x1310=((0.49)*cj0*sj1);
IkReal x1311=((0.49)*sj0*sj1);
IkReal x1312=((0.42)*x1301);
IkReal x1313=(x1301*x1306);
evalcond[0]=((((-1.0)*x1309))+((r02*x1310)));
evalcond[1]=(x1310+(((-1.0)*r02*x1309)));
evalcond[2]=(x1311+((x1308*x1312))+(((-1.0)*x1307*x1312)));
evalcond[3]=(x1302+(((-1.0)*x1306*x1312))+(((-1.0)*x1303))+((x1304*x1312)));
evalcond[4]=((0.0637)+(((-1.0)*x1305*x1313))+(((-1.0)*pz*x1303))+((x1301*x1304*x1305)));
evalcond[5]=(x1312+((pz*x1306))+((x1308*x1311))+(((-1.0)*x1307*x1311))+(((-1.0)*x1303*x1304))+((x1302*x1304))+(((-1.0)*x1302*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1314=((49.0)*sj1);
IkReal x1315=(cj6*r21);
IkReal x1316=((2.94)*sj1);
IkReal x1317=(r20*sj6);
CheckValue<IkReal> x1318=IKPowWithIntegerCheck(((((42.0)*x1315))+(((42.0)*x1317))),-1);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(((((2.52)*x1315))+(((2.52)*x1317))),-1);
if(!x1319.valid){
continue;
}
if( IKabs(((x1318.value)*(((((-1.0)*r02*sj0*x1314))+((cj0*r12*x1314)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1319.value)*((((r01*sj0*sj6*x1316))+(((-1.0)*cj0*r11*sj6*x1316))+((cj0*cj6*r10*x1316))+(((-1.0)*cj6*r00*sj0*x1316)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1318.value)*(((((-1.0)*r02*sj0*x1314))+((cj0*r12*x1314))))))+IKsqr(((x1319.value)*((((r01*sj0*sj6*x1316))+(((-1.0)*cj0*r11*sj6*x1316))+((cj0*cj6*r10*x1316))+(((-1.0)*cj6*r00*sj0*x1316))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1318.value)*(((((-1.0)*r02*sj0*x1314))+((cj0*r12*x1314))))), ((x1319.value)*((((r01*sj0*sj6*x1316))+(((-1.0)*cj0*r11*sj6*x1316))+((cj0*cj6*r10*x1316))+(((-1.0)*cj6*r00*sj0*x1316))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1320=IKsin(j5);
IkReal x1321=IKcos(j5);
IkReal x1322=((0.49)*cj1);
IkReal x1323=(r01*sj6);
IkReal x1324=((0.49)*sj1);
IkReal x1325=(cj6*r10);
IkReal x1326=((1.0)*pz);
IkReal x1327=(cj6*r00);
IkReal x1328=(r11*sj6);
IkReal x1329=(r21*sj6);
IkReal x1330=(cj6*r20);
IkReal x1331=((0.42)*x1321);
IkReal x1332=((0.42)*x1320);
IkReal x1333=(pz*x1329);
IkReal x1334=(pz*x1330);
IkReal x1335=((0.84)*x1320);
evalcond[0]=((((-1.0)*r22*x1326))+((r12*sj0*x1324))+((r22*x1322))+(((-1.0)*x1331))+((cj0*r02*x1324)));
evalcond[1]=((((-1.0)*x1323*x1332))+((x1327*x1332))+(((-1.0)*r02*x1331))+((cj0*x1324)));
evalcond[2]=((((-1.0)*x1328*x1332))+((x1325*x1332))+(((-1.0)*r12*x1331))+((sj0*x1324)));
evalcond[3]=(x1322+(((-1.0)*x1326))+(((-1.0)*r22*x1331))+(((-1.0)*x1329*x1332))+((x1330*x1332)));
evalcond[4]=((0.0637)+(((-1.0)*x1333*x1335))+(((-1.0)*pz*x1326))+(((-0.84)*pz*r22*x1321))+((x1334*x1335)));
evalcond[5]=((((-1.0)*x1326*x1330))+x1333+x1332+(((-1.0)*x1322*x1329))+((cj0*x1324*x1327))+(((-1.0)*cj0*x1323*x1324))+(((-1.0)*sj0*x1324*x1328))+((x1322*x1330))+((sj0*x1324*x1325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1336=(cj1*r22);
IkReal x1337=((49.0)*r12);
IkReal x1338=(pz*r22);
IkReal x1339=((1.16666666666667)*sj1);
IkReal x1340=(cj0*r02);
IkReal x1341=((49.0)*sj0*sj1);
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(((((-42.0)*r11*sj6))+(((42.0)*cj6*r10))),-1);
if(!x1342.valid){
continue;
}
if( IKabs(((x1342.value)*((((x1336*x1337))+((r12*sj0*sj1*x1337))+(((-1.0)*x1341))+((sj1*x1337*x1340))+(((-100.0)*r12*x1338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.16666666666667)*x1336))+((x1339*x1340))+((r12*sj0*x1339))+(((-2.38095238095238)*x1338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1342.value)*((((x1336*x1337))+((r12*sj0*sj1*x1337))+(((-1.0)*x1341))+((sj1*x1337*x1340))+(((-100.0)*r12*x1338))))))+IKsqr(((((1.16666666666667)*x1336))+((x1339*x1340))+((r12*sj0*x1339))+(((-2.38095238095238)*x1338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1342.value)*((((x1336*x1337))+((r12*sj0*sj1*x1337))+(((-1.0)*x1341))+((sj1*x1337*x1340))+(((-100.0)*r12*x1338))))), ((((1.16666666666667)*x1336))+((x1339*x1340))+((r12*sj0*x1339))+(((-2.38095238095238)*x1338))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1343=IKsin(j5);
IkReal x1344=IKcos(j5);
IkReal x1345=((0.49)*cj1);
IkReal x1346=(r01*sj6);
IkReal x1347=((0.49)*sj1);
IkReal x1348=(cj6*r10);
IkReal x1349=((1.0)*pz);
IkReal x1350=(cj6*r00);
IkReal x1351=(r11*sj6);
IkReal x1352=(r21*sj6);
IkReal x1353=(cj6*r20);
IkReal x1354=((0.42)*x1344);
IkReal x1355=((0.42)*x1343);
IkReal x1356=(pz*x1352);
IkReal x1357=(pz*x1353);
IkReal x1358=((0.84)*x1343);
evalcond[0]=((((-1.0)*x1354))+((r22*x1345))+((r12*sj0*x1347))+(((-1.0)*r22*x1349))+((cj0*r02*x1347)));
evalcond[1]=((((-1.0)*r02*x1354))+(((-1.0)*x1346*x1355))+((cj0*x1347))+((x1350*x1355)));
evalcond[2]=((((-1.0)*r12*x1354))+((sj0*x1347))+((x1348*x1355))+(((-1.0)*x1351*x1355)));
evalcond[3]=(x1345+(((-1.0)*x1352*x1355))+(((-1.0)*x1349))+(((-1.0)*r22*x1354))+((x1353*x1355)));
evalcond[4]=((0.0637)+((x1357*x1358))+(((-1.0)*pz*x1349))+(((-0.84)*pz*r22*x1344))+(((-1.0)*x1356*x1358)));
evalcond[5]=(x1356+x1355+((sj0*x1347*x1348))+(((-1.0)*x1345*x1352))+((x1345*x1353))+(((-1.0)*cj0*x1346*x1347))+(((-1.0)*sj0*x1347*x1351))+((cj0*x1347*x1350))+(((-1.0)*x1349*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1359=((49.0)*r02);
IkReal x1360=(pz*r22);
IkReal x1361=(cj0*sj1);
IkReal x1362=(cj1*r22);
IkReal x1363=(r12*sj0*sj1);
CheckValue<IkReal> x1364=IKPowWithIntegerCheck(((((-42.0)*r01*sj6))+(((42.0)*cj6*r00))),-1);
if(!x1364.valid){
continue;
}
if( IKabs(((x1364.value)*(((((-49.0)*x1361))+((x1359*x1363))+((x1359*x1362))+(((-100.0)*r02*x1360))+((r02*x1359*x1361)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.38095238095238)*x1360))+(((1.16666666666667)*r02*x1361))+(((1.16666666666667)*x1362))+(((1.16666666666667)*x1363)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1364.value)*(((((-49.0)*x1361))+((x1359*x1363))+((x1359*x1362))+(((-100.0)*r02*x1360))+((r02*x1359*x1361))))))+IKsqr(((((-2.38095238095238)*x1360))+(((1.16666666666667)*r02*x1361))+(((1.16666666666667)*x1362))+(((1.16666666666667)*x1363))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1364.value)*(((((-49.0)*x1361))+((x1359*x1363))+((x1359*x1362))+(((-100.0)*r02*x1360))+((r02*x1359*x1361))))), ((((-2.38095238095238)*x1360))+(((1.16666666666667)*r02*x1361))+(((1.16666666666667)*x1362))+(((1.16666666666667)*x1363))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1365=IKsin(j5);
IkReal x1366=IKcos(j5);
IkReal x1367=((0.49)*cj1);
IkReal x1368=(r01*sj6);
IkReal x1369=((0.49)*sj1);
IkReal x1370=(cj6*r10);
IkReal x1371=((1.0)*pz);
IkReal x1372=(cj6*r00);
IkReal x1373=(r11*sj6);
IkReal x1374=(r21*sj6);
IkReal x1375=(cj6*r20);
IkReal x1376=((0.42)*x1366);
IkReal x1377=((0.42)*x1365);
IkReal x1378=(pz*x1374);
IkReal x1379=(pz*x1375);
IkReal x1380=((0.84)*x1365);
evalcond[0]=(((r22*x1367))+(((-1.0)*r22*x1371))+(((-1.0)*x1376))+((cj0*r02*x1369))+((r12*sj0*x1369)));
evalcond[1]=(((x1372*x1377))+(((-1.0)*r02*x1376))+((cj0*x1369))+(((-1.0)*x1368*x1377)));
evalcond[2]=(((sj0*x1369))+(((-1.0)*r12*x1376))+((x1370*x1377))+(((-1.0)*x1373*x1377)));
evalcond[3]=(x1367+((x1375*x1377))+(((-1.0)*r22*x1376))+(((-1.0)*x1371))+(((-1.0)*x1374*x1377)));
evalcond[4]=((0.0637)+(((-0.84)*pz*r22*x1366))+((x1379*x1380))+(((-1.0)*pz*x1371))+(((-1.0)*x1378*x1380)));
evalcond[5]=(x1377+x1378+(((-1.0)*x1371*x1375))+((sj0*x1369*x1370))+((x1367*x1375))+((cj0*x1369*x1372))+(((-1.0)*cj0*x1368*x1369))+(((-1.0)*x1367*x1374))+(((-1.0)*sj0*x1369*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1381=pz*pz;
IkReal x1382=((0.84)*pz);
IkReal x1383=(((cj6*r20*x1382))+(((-1.0)*r21*sj6*x1382)));
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal(((-0.84)*pz*r22)),IkReal(x1383),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
IkReal x1384=((1.0)*(x1386.value));
if((((((0.7056)*x1381*(r22*r22)))+(x1383*x1383))) < -0.00001)
continue;
CheckValue<IkReal> x1387=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.7056)*x1381*(r22*r22)))+(x1383*x1383)))),-1);
if(!x1387.valid){
continue;
}
if( (((x1387.value)*(((0.0637)+(((-1.0)*x1381)))))) < -1-IKFAST_SINCOS_THRESH || (((x1387.value)*(((0.0637)+(((-1.0)*x1381)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1385=IKasin(((x1387.value)*(((0.0637)+(((-1.0)*x1381))))));
j5array[0]=((((-1.0)*x1384))+(((-1.0)*x1385)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1384))+x1385);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1388=IKsin(j5);
IkReal x1389=((0.42)*x1388);
evalcond[0]=((((0.49)*cj1))+((cj6*r20*x1389))+(((-1.0)*pz))+(((-1.0)*r21*sj6*x1389))+(((-0.42)*r22*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1390=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1390);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1390);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1390);
rxp2_2=0;
IkReal x1391=((42.0)*sj5);
IkReal x1392=((42.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((r01*sj6*x1391))+((r02*x1392))+(((-1.0)*cj6*r00*x1391)))))+(IKabs(((((-1.0)*cj6*r10*x1391))+((r11*sj6*x1391))+((r12*x1392))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1393=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1393);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1393);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1393);
rxp2_2=0;
IkReal x1394=cj1*cj1;
IkReal x1395=(r10*sj6);
IkReal x1396=(cj6*r11);
IkReal x1397=((1.0)*x1394);
j0eval[0]=(x1396+x1395+(((-1.0)*x1395*x1397))+(((-1.0)*x1396*x1397)));
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1398=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1398);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1398);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1398);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(sj1,-1);
if(!x1405.valid){
continue;
}
IkReal x1399=x1405.value;
IkReal x1400=((42.0)*sj5);
IkReal x1401=(cj6*r00);
IkReal x1402=(r01*sj6);
IkReal x1403=((42.0)*cj5);
IkReal x1404=((0.0204081632653061)*x1399);
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(r12,-1);
if(!x1406.valid){
continue;
}
if( IKabs((x1404*(x1406.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1400*x1402))+((r02*x1400*x1401))+x1403+(((-49.0)*cj1*r22))+(((-1.0)*x1403*(r02*r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1404*((((r02*x1403))+(((-1.0)*x1400*x1401))+((x1400*x1402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1404*(x1406.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1400*x1402))+((r02*x1400*x1401))+x1403+(((-49.0)*cj1*r22))+(((-1.0)*x1403*(r02*r02)))))))+IKsqr((x1404*((((r02*x1403))+(((-1.0)*x1400*x1401))+((x1400*x1402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1404*(x1406.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1400*x1402))+((r02*x1400*x1401))+x1403+(((-49.0)*cj1*r22))+(((-1.0)*x1403*(r02*r02)))))), (x1404*((((r02*x1403))+(((-1.0)*x1400*x1401))+((x1400*x1402))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1407=IKcos(j0);
IkReal x1408=IKsin(j0);
IkReal x1409=((0.42)*sj5);
IkReal x1410=(r11*sj6);
IkReal x1411=(pz*sj6);
IkReal x1412=((1.0)*r20);
IkReal x1413=(cj6*r00);
IkReal x1414=(cj6*pz);
IkReal x1415=(cj6*r10);
IkReal x1416=((0.49)*cj1);
IkReal x1417=(r01*sj6);
IkReal x1418=((0.42)*cj5);
IkReal x1419=((0.49)*sj1*x1408);
IkReal x1420=((0.49)*sj1*x1407);
evalcond[0]=((((-1.0)*r02*x1418))+x1420+(((-1.0)*x1409*x1417))+((x1409*x1413)));
evalcond[1]=((((-1.0)*r12*x1418))+x1419+(((-1.0)*x1409*x1410))+((x1409*x1415)));
evalcond[2]=((((-1.0)*x1418))+(((-1.0)*pz*r22))+((r22*x1416))+((r02*x1420))+((r12*x1419)));
evalcond[3]=(((cj6*r11*x1419))+((cj6*r01*x1420))+((r20*sj6*x1416))+((r10*sj6*x1419))+(((-1.0)*x1411*x1412))+(((-1.0)*r21*x1414))+((r00*sj6*x1420))+((cj6*r21*x1416)));
evalcond[4]=(((r21*x1411))+((x1415*x1419))+((cj6*r20*x1416))+(((-1.0)*x1412*x1414))+(((-1.0)*x1417*x1420))+(((-1.0)*r21*sj6*x1416))+(((-1.0)*x1410*x1419))+x1409+((x1413*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1421=cj1*cj1;
IkReal x1422=(r01*sj5);
IkReal x1423=(r00*sj1);
IkReal x1424=(cj5*r02);
IkReal x1425=(sj5*sj6);
IkReal x1426=(cj6*r11);
IkReal x1427=(r10*sj6);
IkReal x1428=(cj6*r21);
IkReal x1429=(r20*sj6);
IkReal x1430=((20.58)*cj6*sj1);
IkReal x1431=((24.01)*x1421);
IkReal x1432=((49.0)*pz*sj1);
IkReal x1433=((24.01)*cj1*sj1);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(((((-1.0)*x1426*x1431))+(((-1.0)*x1427*x1431))+(((24.01)*x1426))+(((24.01)*x1427))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435=IKPowWithIntegerCheck(sj1,-1);
if(!x1435.valid){
continue;
}
if( IKabs(((x1434.value)*((((x1429*x1432))+((x1428*x1432))+(((-1.0)*x1429*x1433))+(((-20.58)*x1422*x1423))+(((-1.0)*r01*sj6*x1422*x1430))+(((-1.0)*x1428*x1433))+(((41.16)*x1422*x1423*(cj6*cj6)))+(((-1.0)*r01*x1424*x1430))+(((-20.58)*sj6*x1423*x1424))+(((20.58)*cj6*r00*x1423*x1425)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0204081632653061)*(x1435.value)*(((((42.0)*sj6*x1422))+(((42.0)*x1424))+(((-42.0)*cj6*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1434.value)*((((x1429*x1432))+((x1428*x1432))+(((-1.0)*x1429*x1433))+(((-20.58)*x1422*x1423))+(((-1.0)*r01*sj6*x1422*x1430))+(((-1.0)*x1428*x1433))+(((41.16)*x1422*x1423*(cj6*cj6)))+(((-1.0)*r01*x1424*x1430))+(((-20.58)*sj6*x1423*x1424))+(((20.58)*cj6*r00*x1423*x1425))))))+IKsqr(((0.0204081632653061)*(x1435.value)*(((((42.0)*sj6*x1422))+(((42.0)*x1424))+(((-42.0)*cj6*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1434.value)*((((x1429*x1432))+((x1428*x1432))+(((-1.0)*x1429*x1433))+(((-20.58)*x1422*x1423))+(((-1.0)*r01*sj6*x1422*x1430))+(((-1.0)*x1428*x1433))+(((41.16)*x1422*x1423*(cj6*cj6)))+(((-1.0)*r01*x1424*x1430))+(((-20.58)*sj6*x1423*x1424))+(((20.58)*cj6*r00*x1423*x1425))))), ((0.0204081632653061)*(x1435.value)*(((((42.0)*sj6*x1422))+(((42.0)*x1424))+(((-42.0)*cj6*r00*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1436=IKcos(j0);
IkReal x1437=IKsin(j0);
IkReal x1438=((0.42)*sj5);
IkReal x1439=(r11*sj6);
IkReal x1440=(pz*sj6);
IkReal x1441=((1.0)*r20);
IkReal x1442=(cj6*r00);
IkReal x1443=(cj6*pz);
IkReal x1444=(cj6*r10);
IkReal x1445=((0.49)*cj1);
IkReal x1446=(r01*sj6);
IkReal x1447=((0.42)*cj5);
IkReal x1448=((0.49)*sj1*x1437);
IkReal x1449=((0.49)*sj1*x1436);
evalcond[0]=(((x1438*x1442))+(((-1.0)*x1438*x1446))+x1449+(((-1.0)*r02*x1447)));
evalcond[1]=((((-1.0)*x1438*x1439))+((x1438*x1444))+(((-1.0)*r12*x1447))+x1448);
evalcond[2]=(((r12*x1448))+((r22*x1445))+(((-1.0)*pz*r22))+((r02*x1449))+(((-1.0)*x1447)));
evalcond[3]=(((cj6*r01*x1449))+(((-1.0)*r21*x1443))+((cj6*r21*x1445))+((cj6*r11*x1448))+((r20*sj6*x1445))+((r10*sj6*x1448))+(((-1.0)*x1440*x1441))+((r00*sj6*x1449)));
evalcond[4]=((((-1.0)*r21*sj6*x1445))+((x1444*x1448))+(((-1.0)*x1446*x1449))+((x1442*x1449))+((r21*x1440))+(((-1.0)*x1439*x1448))+(((-1.0)*x1441*x1443))+((cj6*r20*x1445))+x1438);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1450=((42.0)*sj5);
IkReal x1451=((42.0)*cj5);
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1452.valid){
continue;
}
CheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10*x1450))+((r11*sj6*x1450))+((r12*x1451)))),IkReal((((r01*sj6*x1450))+(((-1.0)*cj6*r00*x1450))+((r02*x1451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1453.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1452.value)))+(x1453.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1454=IKcos(j0);
IkReal x1455=IKsin(j0);
IkReal x1456=((0.42)*sj5);
IkReal x1457=(r11*sj6);
IkReal x1458=(pz*sj6);
IkReal x1459=((1.0)*r20);
IkReal x1460=(cj6*r00);
IkReal x1461=(cj6*pz);
IkReal x1462=(cj6*r10);
IkReal x1463=((0.49)*cj1);
IkReal x1464=(r01*sj6);
IkReal x1465=((0.42)*cj5);
IkReal x1466=((0.49)*sj1*x1455);
IkReal x1467=((0.49)*sj1*x1454);
evalcond[0]=((((-1.0)*r02*x1465))+(((-1.0)*x1456*x1464))+((x1456*x1460))+x1467);
evalcond[1]=(((x1456*x1462))+x1466+(((-1.0)*r12*x1465))+(((-1.0)*x1456*x1457)));
evalcond[2]=((((-1.0)*pz*r22))+(((-1.0)*x1465))+((r12*x1466))+((r22*x1463))+((r02*x1467)));
evalcond[3]=(((r20*sj6*x1463))+((cj6*r21*x1463))+(((-1.0)*x1458*x1459))+((cj6*r11*x1466))+((r00*sj6*x1467))+((cj6*r01*x1467))+((r10*sj6*x1466))+(((-1.0)*r21*x1461)));
evalcond[4]=(((cj6*r20*x1463))+(((-1.0)*x1459*x1461))+(((-1.0)*r21*sj6*x1463))+(((-1.0)*x1464*x1467))+((x1460*x1467))+(((-1.0)*x1457*x1466))+((r21*x1458))+x1456+((x1462*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1468=((((-0.42)*r21*sj6))+(((0.42)*cj6*r20)));
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal(((-0.42)*r22)),IkReal(x1468),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
IkReal x1469=((1.0)*(x1471.value));
if((((((0.1764)*(r22*r22)))+(x1468*x1468))) < -0.00001)
continue;
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.1764)*(r22*r22)))+(x1468*x1468)))),-1);
if(!x1472.valid){
continue;
}
if( (((x1472.value)*(((((0.49)*cj1))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1472.value)*(((((0.49)*cj1))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1470=IKasin(((x1472.value)*(((((0.49)*cj1))+(((-1.0)*pz))))));
j5array[0]=((((-1.0)*x1469))+(((-1.0)*x1470)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1469))+x1470);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
IkReal x1473=IKsin(j5);
IkReal x1474=((0.84)*pz);
evalcond[0]=((0.0637)+((cj6*r20*x1473*x1474))+(((-1.0)*r22*x1474*(IKcos(j5))))+(((-1.0)*r21*sj6*x1473*x1474))+(((-1.0)*(pz*pz))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1475=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1475);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1475);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1475);
rxp2_2=0;
IkReal x1476=((42.0)*sj5);
IkReal x1477=((42.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs(((((-1.0)*cj6*r10*x1476))+((r12*x1477))+((r11*sj6*x1476)))))+(IKabs(((((-1.0)*cj6*r00*x1476))+((r02*x1477))+((r01*sj6*x1476))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1478=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1478);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1478);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1478);
rxp2_2=0;
IkReal x1479=cj1*cj1;
IkReal x1480=(r10*sj6);
IkReal x1481=(cj6*r11);
IkReal x1482=((1.0)*x1479);
j0eval[0]=((((-1.0)*x1481*x1482))+(((-1.0)*x1480*x1482))+x1481+x1480);
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1483=((-1.0)*pz);
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1483);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x1483);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x1483);
rxp2_2=0;
j0eval[0]=r12;
j0eval[1]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1490=IKPowWithIntegerCheck(sj1,-1);
if(!x1490.valid){
continue;
}
IkReal x1484=x1490.value;
IkReal x1485=((42.0)*sj5);
IkReal x1486=(cj6*r00);
IkReal x1487=(r01*sj6);
IkReal x1488=((42.0)*cj5);
IkReal x1489=((0.0204081632653061)*x1484);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(r12,-1);
if(!x1491.valid){
continue;
}
if( IKabs((x1489*(x1491.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1485*x1487))+((r02*x1485*x1486))+x1488+(((-49.0)*cj1*r22))+(((-1.0)*x1488*(r02*r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1489*(((((-1.0)*x1485*x1486))+((x1485*x1487))+((r02*x1488)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1489*(x1491.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1485*x1487))+((r02*x1485*x1486))+x1488+(((-49.0)*cj1*r22))+(((-1.0)*x1488*(r02*r02)))))))+IKsqr((x1489*(((((-1.0)*x1485*x1486))+((x1485*x1487))+((r02*x1488))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x1489*(x1491.value)*(((((100.0)*pz*r22))+(((-1.0)*r02*x1485*x1487))+((r02*x1485*x1486))+x1488+(((-49.0)*cj1*r22))+(((-1.0)*x1488*(r02*r02)))))), (x1489*(((((-1.0)*x1485*x1486))+((x1485*x1487))+((r02*x1488))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1492=IKcos(j0);
IkReal x1493=IKsin(j0);
IkReal x1494=((0.42)*sj5);
IkReal x1495=(r11*sj6);
IkReal x1496=(pz*sj6);
IkReal x1497=((1.0)*r20);
IkReal x1498=(cj6*r00);
IkReal x1499=(cj6*pz);
IkReal x1500=(cj6*r10);
IkReal x1501=((0.49)*cj1);
IkReal x1502=(r01*sj6);
IkReal x1503=((0.42)*cj5);
IkReal x1504=((0.49)*sj1*x1493);
IkReal x1505=((0.49)*sj1*x1492);
evalcond[0]=(((x1494*x1498))+(((-1.0)*x1494*x1502))+(((-1.0)*r02*x1503))+x1505);
evalcond[1]=(((x1494*x1500))+(((-1.0)*x1494*x1495))+x1504+(((-1.0)*r12*x1503)));
evalcond[2]=((((-1.0)*x1503))+(((-1.0)*pz*r22))+((r12*x1504))+((r02*x1505))+((r22*x1501)));
evalcond[3]=(((cj6*r01*x1505))+((r10*sj6*x1504))+(((-1.0)*x1496*x1497))+(((-1.0)*r21*x1499))+((r20*sj6*x1501))+((cj6*r21*x1501))+((r00*sj6*x1505))+((cj6*r11*x1504)));
evalcond[4]=(((x1498*x1505))+(((-1.0)*r21*sj6*x1501))+((r21*x1496))+(((-1.0)*x1497*x1499))+((cj6*r20*x1501))+((x1500*x1504))+x1494+(((-1.0)*x1502*x1505))+(((-1.0)*x1495*x1504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1506=cj1*cj1;
IkReal x1507=(r01*sj5);
IkReal x1508=(r00*sj1);
IkReal x1509=(cj5*r02);
IkReal x1510=(sj5*sj6);
IkReal x1511=(cj6*r11);
IkReal x1512=(r10*sj6);
IkReal x1513=(cj6*r21);
IkReal x1514=(r20*sj6);
IkReal x1515=((20.58)*cj6*sj1);
IkReal x1516=((24.01)*x1506);
IkReal x1517=((49.0)*pz*sj1);
IkReal x1518=((24.01)*cj1*sj1);
CheckValue<IkReal> x1519=IKPowWithIntegerCheck(((((24.01)*x1512))+(((24.01)*x1511))+(((-1.0)*x1512*x1516))+(((-1.0)*x1511*x1516))),-1);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(sj1,-1);
if(!x1520.valid){
continue;
}
if( IKabs(((x1519.value)*((((x1513*x1517))+((x1514*x1517))+(((41.16)*x1507*x1508*(cj6*cj6)))+(((-1.0)*x1513*x1518))+(((-1.0)*r01*sj6*x1507*x1515))+(((-1.0)*r01*x1509*x1515))+(((-20.58)*sj6*x1508*x1509))+(((-1.0)*x1514*x1518))+(((20.58)*cj6*r00*x1508*x1510))+(((-20.58)*x1507*x1508)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.0204081632653061)*(x1520.value)*(((((42.0)*sj6*x1507))+(((-42.0)*cj6*r00*sj5))+(((42.0)*x1509)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1519.value)*((((x1513*x1517))+((x1514*x1517))+(((41.16)*x1507*x1508*(cj6*cj6)))+(((-1.0)*x1513*x1518))+(((-1.0)*r01*sj6*x1507*x1515))+(((-1.0)*r01*x1509*x1515))+(((-20.58)*sj6*x1508*x1509))+(((-1.0)*x1514*x1518))+(((20.58)*cj6*r00*x1508*x1510))+(((-20.58)*x1507*x1508))))))+IKsqr(((0.0204081632653061)*(x1520.value)*(((((42.0)*sj6*x1507))+(((-42.0)*cj6*r00*sj5))+(((42.0)*x1509))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1519.value)*((((x1513*x1517))+((x1514*x1517))+(((41.16)*x1507*x1508*(cj6*cj6)))+(((-1.0)*x1513*x1518))+(((-1.0)*r01*sj6*x1507*x1515))+(((-1.0)*r01*x1509*x1515))+(((-20.58)*sj6*x1508*x1509))+(((-1.0)*x1514*x1518))+(((20.58)*cj6*r00*x1508*x1510))+(((-20.58)*x1507*x1508))))), ((0.0204081632653061)*(x1520.value)*(((((42.0)*sj6*x1507))+(((-42.0)*cj6*r00*sj5))+(((42.0)*x1509))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1521=IKcos(j0);
IkReal x1522=IKsin(j0);
IkReal x1523=((0.42)*sj5);
IkReal x1524=(r11*sj6);
IkReal x1525=(pz*sj6);
IkReal x1526=((1.0)*r20);
IkReal x1527=(cj6*r00);
IkReal x1528=(cj6*pz);
IkReal x1529=(cj6*r10);
IkReal x1530=((0.49)*cj1);
IkReal x1531=(r01*sj6);
IkReal x1532=((0.42)*cj5);
IkReal x1533=((0.49)*sj1*x1522);
IkReal x1534=((0.49)*sj1*x1521);
evalcond[0]=(((x1523*x1527))+(((-1.0)*r02*x1532))+x1534+(((-1.0)*x1523*x1531)));
evalcond[1]=((((-1.0)*r12*x1532))+((x1523*x1529))+x1533+(((-1.0)*x1523*x1524)));
evalcond[2]=(((r12*x1533))+(((-1.0)*pz*r22))+(((-1.0)*x1532))+((r02*x1534))+((r22*x1530)));
evalcond[3]=(((cj6*r11*x1533))+(((-1.0)*x1525*x1526))+((cj6*r01*x1534))+(((-1.0)*r21*x1528))+((r10*sj6*x1533))+((r20*sj6*x1530))+((r00*sj6*x1534))+((cj6*r21*x1530)));
evalcond[4]=((((-1.0)*x1524*x1533))+(((-1.0)*r21*sj6*x1530))+(((-1.0)*x1531*x1534))+((cj6*r20*x1530))+((x1527*x1534))+x1523+((r21*x1525))+((x1529*x1533))+(((-1.0)*x1526*x1528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1535=((42.0)*sj5);
IkReal x1536=((42.0)*cj5);
CheckValue<IkReal> x1537=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x1537.valid){
continue;
}
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r10*x1535))+((r12*x1536))+((r11*sj6*x1535)))),IkReal((((r01*sj6*x1535))+(((-1.0)*cj6*r00*x1535))+((r02*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1537.value)))+(x1538.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1539=IKcos(j0);
IkReal x1540=IKsin(j0);
IkReal x1541=((0.42)*sj5);
IkReal x1542=(r11*sj6);
IkReal x1543=(pz*sj6);
IkReal x1544=((1.0)*r20);
IkReal x1545=(cj6*r00);
IkReal x1546=(cj6*pz);
IkReal x1547=(cj6*r10);
IkReal x1548=((0.49)*cj1);
IkReal x1549=(r01*sj6);
IkReal x1550=((0.42)*cj5);
IkReal x1551=((0.49)*sj1*x1540);
IkReal x1552=((0.49)*sj1*x1539);
evalcond[0]=(((x1541*x1545))+(((-1.0)*r02*x1550))+x1552+(((-1.0)*x1541*x1549)));
evalcond[1]=(((x1541*x1547))+x1551+(((-1.0)*r12*x1550))+(((-1.0)*x1541*x1542)));
evalcond[2]=((((-1.0)*pz*r22))+((r12*x1551))+((r02*x1552))+((r22*x1548))+(((-1.0)*x1550)));
evalcond[3]=((((-1.0)*x1543*x1544))+((cj6*r21*x1548))+((r10*sj6*x1551))+((r20*sj6*x1548))+((cj6*r11*x1551))+(((-1.0)*r21*x1546))+((cj6*r01*x1552))+((r00*sj6*x1552)));
evalcond[4]=(((cj6*r20*x1548))+((x1547*x1551))+(((-1.0)*x1549*x1552))+x1541+((r21*x1543))+(((-1.0)*x1542*x1551))+(((-1.0)*r21*sj6*x1548))+(((-1.0)*x1544*x1546))+((x1545*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1553=sj1*sj1;
IkReal x1554=((-0.98)*sj1);
IkReal x1555=((0.9604)*x1553);
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal((px*x1554)),IkReal((py*x1554)),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
IkReal x1556=((1.0)*(x1558.value));
if(((((x1555*(py*py)))+((x1555*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1555*(py*py)))+((x1555*(px*px)))))),-1);
if(!x1559.valid){
continue;
}
if( (((x1559.value)*(((0.0637)+pp+(((-0.98)*cj1*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x1559.value)*(((0.0637)+pp+(((-0.98)*cj1*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1557=IKasin(((x1559.value)*(((0.0637)+pp+(((-0.98)*cj1*pz))))));
j0array[0]=((((-1.0)*x1557))+(((-1.0)*x1556)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1557+(((-1.0)*x1556)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x1560=((1.16666666666667)*sj1);
cj5array[0]=((((1.16666666666667)*cj1*r22))+((r12*sj0*x1560))+(((-2.38095238095238)*npz))+((cj0*r02*x1560)));
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j6eval[3];
IkReal x1561=(r12*sj5);
IkReal x1562=((24.5)*cj1);
IkReal x1563=((21.0)*cj5);
IkReal x1564=((24.5)*cj0*sj1);
j6eval[0]=x1561;
j6eval[1]=((IKabs(((((-1.0)*r20*x1564))+(((50.0)*rxp0_1))+(((-1.0)*r11*x1563))+((r00*x1562)))))+(IKabs(((((-1.0)*r21*x1564))+(((50.0)*rxp1_1))+((r10*x1563))+((r01*x1562))))));
j6eval[2]=IKsign(x1561);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1565=((25.0)*pp);
IkReal x1566=((24.5)*cj1);
IkReal x1567=((50.0)*pz);
IkReal x1568=((21.0)*cj5);
IkReal x1569=(npy*r20*sj5);
IkReal x1570=(npx*r21*sj5);
j6eval[0]=(x1569+(((-1.0)*x1570)));
j6eval[1]=IKsign(((((-21.0)*x1570))+(((21.0)*x1569))));
j6eval[2]=((IKabs((((npy*r22*x1568))+((npy*x1567))+(((-1.0)*npz*r21*x1568))+(((-1.0)*r21*x1565))+(((1.5925)*r21))+(((-1.0)*npy*x1566)))))+(IKabs((((npx*x1567))+(((-1.0)*npz*r20*x1568))+(((-1.0)*r20*x1565))+((npx*r22*x1568))+(((1.5925)*r20))+(((-1.0)*npx*x1566))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1571=((21.0)*cj5);
IkReal x1572=((25.0)*pp);
IkReal x1573=((50.0)*px);
IkReal x1574=((24.5)*cj0*sj1);
IkReal x1575=(npy*r00*sj5);
IkReal x1576=(npx*r01*sj5);
j6eval[0]=(x1575+(((-1.0)*x1576)));
j6eval[1]=IKsign(((((-21.0)*x1576))+(((21.0)*x1575))));
j6eval[2]=((IKabs((((npx*r02*x1571))+(((-1.0)*r00*x1572))+(((1.5925)*r00))+(((-1.0)*npx*x1574))+(((-1.0)*npz*r00*x1571))+((npx*x1573)))))+(IKabs((((npy*r02*x1571))+(((-1.0)*npz*r01*x1571))+((npy*x1573))+(((-1.0)*r01*x1572))+(((-1.0)*npy*x1574))+(((1.5925)*r01))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1577=((0.49)*sj1);
IkReal x1578=((0.49)*cj1);
j6eval[0]=((IKabs((npy+(((-1.0)*r21*x1578))+(((-1.0)*r11*sj0*x1577))+(((-1.0)*cj0*r01*x1577)))))+(IKabs((((r20*x1578))+(((-1.0)*npx))+((cj0*r00*x1577))+((r10*sj0*x1577))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=1.0;
j5=0;
IkReal x1579=((0.49)*sj1);
IkReal x1580=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*npy))+((cj0*r01*x1579))+((r11*sj0*x1579))+((r21*x1580)))))+(IKabs((((r20*x1580))+(((-1.0)*npx))+((cj0*r00*x1579))+((r10*sj0*x1579))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1581=((0.49)*sj1);
IkReal x1582=((0.49)*cj1);
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((((cj0*r01*x1581))+(((-1.0)*npy))+((r11*sj0*x1581))+((r21*x1582)))),IkReal((((r20*x1582))+((cj0*r00*x1581))+(((-1.0)*npx))+((r10*sj0*x1581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
IkReal x1583=x1584.value;
j6array[0]=((-1.0)*x1583);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1583)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1585=IKcos(j6);
IkReal x1586=IKsin(j6);
IkReal x1587=(cj0*sj1);
IkReal x1588=(sj0*sj1);
IkReal x1589=((0.49)*x1585);
IkReal x1590=((0.49)*x1586);
evalcond[0]=((((-1.0)*r01*x1587*x1590))+((r10*x1588*x1589))+((r00*x1587*x1589))+((npy*x1586))+(((-1.0)*r11*x1588*x1590))+(((-1.0)*npx*x1585))+(((-1.0)*cj1*r21*x1590))+((cj1*r20*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1591=((0.49)*sj1);
IkReal x1592=((0.49)*cj1);
CheckValue<IkReal> x1594 = IKatan2WithCheck(IkReal((((r20*x1592))+((cj0*r00*x1591))+(((-1.0)*npx))+((r10*sj0*x1591)))),IkReal(((((-1.0)*r11*sj0*x1591))+(((-1.0)*cj0*r01*x1591))+npy+(((-1.0)*r21*x1592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1594.valid){
continue;
}
IkReal x1593=x1594.value;
j6array[0]=((-1.0)*x1593);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1593)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1595=IKcos(j6);
IkReal x1596=IKsin(j6);
IkReal x1597=(sj0*sj1);
IkReal x1598=(cj0*sj1);
IkReal x1599=((0.49)*x1596);
IkReal x1600=((0.49)*x1595);
evalcond[0]=(((r01*x1598*x1600))+(((-1.0)*npy*x1595))+((r10*x1597*x1599))+((cj1*r21*x1600))+(((-1.0)*npx*x1596))+((cj1*r20*x1599))+((r00*x1598*x1599))+((r11*x1597*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1601=((0.49)*sj1);
IkReal x1602=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*cj0*r01*x1601))+(((-1.0)*r21*x1602))+npy+(((-1.0)*r11*sj0*x1601)))))+(IKabs((((r10*sj0*x1601))+((cj0*r00*x1601))+(((-1.0)*npx))+((r20*x1602))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1603=((0.49)*sj1);
IkReal x1604=((0.49)*cj1);
j6eval[0]=((IKabs((((r10*sj0*x1603))+((cj0*r00*x1603))+(((-1.0)*npx))+((r20*x1604)))))+(IKabs((((cj0*r01*x1603))+((r21*x1604))+(((-1.0)*npy))+((r11*sj0*x1603))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1605=((0.49)*sj1);
IkReal x1606=((0.49)*cj1);
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal((((cj0*r01*x1605))+((r21*x1606))+(((-1.0)*npy))+((r11*sj0*x1605)))),IkReal((((r10*sj0*x1605))+((cj0*r00*x1605))+(((-1.0)*npx))+((r20*x1606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
IkReal x1607=x1608.value;
j6array[0]=((-1.0)*x1607);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1607)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1609=IKcos(j6);
IkReal x1610=IKsin(j6);
IkReal x1611=(cj0*sj1);
IkReal x1612=(sj0*sj1);
IkReal x1613=((0.49)*x1609);
IkReal x1614=((0.49)*x1610);
evalcond[0]=(((npy*x1610))+(((-1.0)*r01*x1611*x1614))+(((-1.0)*cj1*r21*x1614))+((cj1*r20*x1613))+((r10*x1612*x1613))+((r00*x1611*x1613))+(((-1.0)*r11*x1612*x1614))+(((-1.0)*npx*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1615=((0.49)*sj1);
IkReal x1616=((0.49)*cj1);
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal((((r20*x1616))+((r10*sj0*x1615))+((cj0*r00*x1615))+(((-1.0)*npx)))),IkReal(((((-1.0)*r11*sj0*x1615))+(((-1.0)*r21*x1616))+(((-1.0)*cj0*r01*x1615))+npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
IkReal x1617=x1618.value;
j6array[0]=((-1.0)*x1617);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1617)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1619=IKcos(j6);
IkReal x1620=IKsin(j6);
IkReal x1621=(sj0*sj1);
IkReal x1622=(cj0*sj1);
IkReal x1623=((0.49)*x1620);
IkReal x1624=((0.49)*x1619);
evalcond[0]=((((-1.0)*npx*x1620))+(((-1.0)*npy*x1619))+((r11*x1621*x1624))+((r10*x1621*x1623))+((cj1*r21*x1624))+((cj1*r20*x1623))+((r01*x1622*x1624))+((r00*x1622*x1623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1625=(r02*sj5);
IkReal x1626=((24.5)*cj1);
IkReal x1627=((21.0)*cj5*r22);
IkReal x1628=((24.5)*sj0*sj1);
j6eval[0]=x1625;
j6eval[1]=IKsign(x1625);
j6eval[2]=((IKabs(((((-1.0)*r20*x1628))+(((-50.0)*rxp0_0))+(((-1.0)*r10*x1627))+((r10*x1626)))))+(IKabs(((((-50.0)*rxp1_0))+(((-1.0)*r11*x1627))+(((-1.0)*r21*x1628))+((r11*x1626))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1629=(r22*sj5);
IkReal x1630=((24.5)*sj1);
IkReal x1631=((21.0)*cj5*r02);
j6eval[0]=x1629;
j6eval[1]=IKsign(x1629);
j6eval[2]=((IKabs(((((-50.0)*rxp1_2))+((r01*sj0*x1630))+((r11*x1631))+(((-1.0)*cj0*r11*x1630)))))+(IKabs((((r10*x1631))+(((-50.0)*rxp0_2))+(((-1.0)*cj0*r10*x1630))+((r00*sj0*x1630))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
IkReal x1632=((50.0)*py);
IkReal x1633=((25.0)*pp);
IkReal x1634=((21.0)*r10);
IkReal x1635=(npy*sj5);
IkReal x1636=((21.0)*r11);
IkReal x1637=(npx*r11*sj5);
IkReal x1638=((24.5)*sj0*sj1);
IkReal x1639=(cj5*px*r02);
IkReal x1640=(cj5*pz*r22);
j6eval[0]=(((r10*x1635))+(((-1.0)*x1637)));
j6eval[1]=IKsign((((x1634*x1635))+(((-1.0)*npx*sj5*x1636))));
j6eval[2]=((IKabs((((npx*x1632))+(((-1.0)*x1634*x1639))+(((-1.0)*x1634*x1640))+(((-1.0)*r10*x1633))+(((-1.0)*npx*x1638))+(((1.5925)*r10)))))+(IKabs(((((-1.0)*r11*x1633))+(((-1.0)*npy*x1638))+(((-1.0)*x1636*x1639))+(((-1.0)*x1636*x1640))+(((1.5925)*r11))+((npy*x1632))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1641=((0.42)*r02);
IkReal x1642=((1.0)*pz);
IkReal x1643=((0.49)*cj1);
j6eval[0]=((IKabs((((r20*x1643))+(((-1.0)*r20*x1642))+((r00*x1641)))))+(IKabs((((r21*x1643))+(((-1.0)*r21*x1642))+((r01*x1641))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1644=((0.42)*r02);
IkReal x1645=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r01*x1644))+(((-1.0)*r21*x1645))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+((r20*x1645))+((r00*x1644))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1646=((0.42)*r02);
IkReal x1647=((0.49)*cj1);
CheckValue<IkReal> x1649 = IKatan2WithCheck(IkReal((((px*r00))+((r20*x1647))+(((-1.0)*npx))+((r00*x1646))+((py*r10)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r01*x1646))+npy+(((-1.0)*r21*x1647))+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1649.valid){
continue;
}
IkReal x1648=x1649.value;
j6array[0]=((-1.0)*x1648);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1648)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1650=IKsin(j6);
IkReal x1651=IKcos(j6);
IkReal x1652=((0.49)*cj1);
IkReal x1653=((0.42)*r02);
IkReal x1654=(r01*x1651);
IkReal x1655=(r00*x1650);
evalcond[0]=(((r21*x1651*x1652))+((r20*x1650*x1652))+((py*r11*x1651))+(((-1.0)*npx*x1650))+((px*x1655))+((px*x1654))+((py*r10*x1650))+((x1653*x1654))+((x1653*x1655))+(((-1.0)*npy*x1651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1656=((0.42)*r02);
IkReal x1657=((0.49)*cj1);
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((r01*x1656))+((py*r11))+((r21*x1657)))),IkReal((((px*r00))+((r20*x1657))+(((-1.0)*npx))+((r00*x1656))+((py*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
IkReal x1658=x1659.value;
j6array[0]=((-1.0)*x1658);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1658)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1660=IKcos(j6);
IkReal x1661=IKsin(j6);
IkReal x1662=((0.49)*cj1);
IkReal x1663=((0.42)*r02);
IkReal x1664=(r00*x1660);
IkReal x1665=(r01*x1661);
evalcond[0]=(((px*x1664))+(((-1.0)*npx*x1660))+((py*r10*x1660))+(((-1.0)*x1663*x1665))+(((-1.0)*r21*x1661*x1662))+((npy*x1661))+((r20*x1660*x1662))+(((-1.0)*py*r11*x1661))+(((-1.0)*px*x1665))+((x1663*x1664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1666=((0.42)*r02);
IkReal x1667=((1.0)*pz);
IkReal x1668=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r01*x1666))+(((-1.0)*r21*x1667))+((r21*x1668)))))+(IKabs(((((-1.0)*r00*x1666))+(((-1.0)*r20*x1667))+((r20*x1668))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(((px*r02))+((pz*r22)));
rxp2_0=((-1.0)*py*r22);
rxp2_2=(py*r02);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1669=((0.42)*r02);
IkReal x1670=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r00*x1669))+(((-1.0)*pz*r20))+((r20*x1670)))))+(IKabs((((r01*x1669))+((pz*r21))+(((-1.0)*r21*x1670))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j6]

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1671=((0.42)*r02);
IkReal x1672=((0.49)*cj1);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((r20*x1672))+(((-1.0)*r00*x1671))+((py*r10)))),IkReal(((((-1.0)*px*r01))+npy+(((-1.0)*py*r11))+(((-1.0)*r21*x1672))+((r01*x1671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
IkReal x1673=x1674.value;
j6array[0]=((-1.0)*x1673);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1673)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1675=IKsin(j6);
IkReal x1676=IKcos(j6);
IkReal x1677=((0.49)*cj1);
IkReal x1678=((0.42)*r02);
IkReal x1679=(r01*x1676);
IkReal x1680=(r00*x1675);
evalcond[0]=((((-1.0)*x1678*x1679))+((r21*x1676*x1677))+(((-1.0)*x1678*x1680))+((py*r11*x1676))+((px*x1679))+((r20*x1675*x1677))+((py*r10*x1675))+(((-1.0)*npx*x1675))+((px*x1680))+(((-1.0)*npy*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1681=((0.42)*r02);
IkReal x1682=((0.49)*cj1);
CheckValue<IkReal> x1684 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1681))+((px*r01))+((r21*x1682))+(((-1.0)*npy))+((py*r11)))),IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+((r20*x1682))+(((-1.0)*r00*x1681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1684.valid){
continue;
}
IkReal x1683=x1684.value;
j6array[0]=((-1.0)*x1683);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1683)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1685=IKcos(j6);
IkReal x1686=IKsin(j6);
IkReal x1687=((0.49)*cj1);
IkReal x1688=((0.42)*r02);
IkReal x1689=(r00*x1685);
IkReal x1690=(r01*x1686);
evalcond[0]=(((py*r10*x1685))+(((-1.0)*npx*x1685))+(((-1.0)*px*x1690))+(((-1.0)*py*r11*x1686))+((px*x1689))+((r20*x1685*x1687))+((x1688*x1690))+((npy*x1686))+(((-1.0)*r21*x1686*x1687))+(((-1.0)*x1688*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1691=(r22*sj5);
IkReal x1692=((24.5)*sj1);
j6eval[0]=x1691;
j6eval[1]=((IKabs(((((-50.0)*rxp1_2))+((r01*sj0*x1692))+(((-1.0)*cj0*r11*x1692)))))+(IKabs(((((-1.0)*cj0*r10*x1692))+((r00*sj0*x1692))+(((-50.0)*rxp0_2))))));
j6eval[2]=IKsign(x1691);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1693=((25.0)*pp);
IkReal x1694=((50.0)*px);
IkReal x1695=((21.0)*r01);
IkReal x1696=(npx*sj5);
IkReal x1697=((24.5)*cj0*sj1);
IkReal x1698=(npy*r00*sj5);
IkReal x1699=(cj5*pz*r22);
j6eval[0]=(x1698+(((-1.0)*r01*x1696)));
j6eval[1]=IKsign(((((21.0)*x1698))+(((-1.0)*x1695*x1696))));
j6eval[2]=((IKabs(((((-1.0)*npx*x1697))+((npx*x1694))+(((-21.0)*r00*x1699))+(((1.5925)*r00))+(((-1.0)*r00*x1693)))))+(IKabs(((((-1.0)*npy*x1697))+((npy*x1694))+(((1.5925)*r01))+(((-1.0)*r01*x1693))+(((-1.0)*x1695*x1699))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
IkReal x1700=((50.0)*py);
IkReal x1701=((25.0)*pp);
IkReal x1702=(npx*r11*sj5);
IkReal x1703=(npy*r10*sj5);
IkReal x1704=((24.5)*sj0*sj1);
IkReal x1705=((21.0)*cj5*pz*r22);
j6eval[0]=(x1703+(((-1.0)*x1702)));
j6eval[1]=((IKabs((((npx*x1700))+(((-1.0)*r10*x1701))+(((-1.0)*r10*x1705))+(((-1.0)*npx*x1704))+(((1.5925)*r10)))))+(IKabs((((npy*x1700))+(((-1.0)*npy*x1704))+(((1.5925)*r11))+(((-1.0)*r11*x1701))+(((-1.0)*r11*x1705))))));
j6eval[2]=IKsign(((((21.0)*x1703))+(((-21.0)*x1702))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1706=((1.0)*pz);
IkReal x1707=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r21*x1706))+((r21*x1707)))))+(IKabs(((((-1.0)*r20*x1706))+((r20*x1707))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=1.0;
j5=0;
IkReal x1708=((0.49)*cj1);
j6eval[0]=((IKabs(((((-1.0)*r21*x1708))+((pz*r21)))))+(IKabs(((((-1.0)*pz*r20))+((r20*x1708))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1709=((0.49)*cj1);
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((r20*x1709))+((py*r10)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r21*x1709))+npy+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
IkReal x1710=x1711.value;
j6array[0]=((-1.0)*x1710);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1710)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1712=IKsin(j6);
IkReal x1713=IKcos(j6);
IkReal x1714=((0.49)*cj1);
evalcond[0]=(((px*r00*x1712))+(((-1.0)*npx*x1712))+((py*r10*x1712))+((py*r11*x1713))+((r20*x1712*x1714))+((px*r01*x1713))+((r21*x1713*x1714))+(((-1.0)*npy*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1715=((0.49)*cj1);
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal((((px*r01))+(((-1.0)*npy))+((r21*x1715))+((py*r11)))),IkReal((((px*r00))+((r20*x1715))+(((-1.0)*npx))+((py*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
IkReal x1716=x1717.value;
j6array[0]=((-1.0)*x1716);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1716)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1718=IKcos(j6);
IkReal x1719=IKsin(j6);
IkReal x1720=((0.49)*cj1);
IkReal x1721=((1.0)*x1719);
evalcond[0]=((((-1.0)*r21*x1719*x1720))+((r20*x1718*x1720))+((px*r00*x1718))+((npy*x1719))+(((-1.0)*npx*x1718))+((py*r10*x1718))+(((-1.0)*py*r11*x1721))+(((-1.0)*px*r01*x1721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1722=((1.0)*pz);
IkReal x1723=((0.49)*cj1);
j6eval[0]=((IKabs((((r21*x1723))+(((-1.0)*r21*x1722)))))+(IKabs((((r20*x1723))+(((-1.0)*r20*x1722))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
r12=0;
npz=(pz*r22);
rxp2_0=((-1.0)*py*r22);
rxp2_2=0;
r02=0;
rxp2_1=(px*r22);
sj5=0;
cj5=-1.0;
j5=3.14159265358979;
IkReal x1724=((0.49)*cj1);
j6eval[0]=((IKabs((((pz*r21))+(((-1.0)*r21*x1724)))))+(IKabs(((((-1.0)*pz*r20))+((r20*x1724))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1725=((0.49)*cj1);
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+((r20*x1725)))),IkReal(((((-1.0)*px*r01))+npy+(((-1.0)*py*r11))+(((-1.0)*r21*x1725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
IkReal x1726=x1727.value;
j6array[0]=((-1.0)*x1726);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1726)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1728=IKsin(j6);
IkReal x1729=IKcos(j6);
IkReal x1730=((0.49)*cj1);
evalcond[0]=(((py*r11*x1729))+((px*r01*x1729))+(((-1.0)*npy*x1729))+((r21*x1729*x1730))+((px*r00*x1728))+(((-1.0)*npx*x1728))+((py*r10*x1728))+((r20*x1728*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x1731=((0.49)*cj1);
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal((((px*r01))+((r21*x1731))+(((-1.0)*npy))+((py*r11)))),IkReal((((px*r00))+(((-1.0)*npx))+((py*r10))+((r20*x1731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
IkReal x1732=x1733.value;
j6array[0]=((-1.0)*x1732);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x1732)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[1];
IkReal x1734=IKcos(j6);
IkReal x1735=IKsin(j6);
IkReal x1736=((0.49)*cj1);
IkReal x1737=((1.0)*x1735);
evalcond[0]=((((-1.0)*r21*x1735*x1736))+((r20*x1734*x1736))+((px*r00*x1734))+(((-1.0)*py*r11*x1737))+((py*r10*x1734))+(((-1.0)*npx*x1734))+((npy*x1735))+(((-1.0)*px*r01*x1737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1738=((50.0)*py);
IkReal x1739=((21.0)*r11);
IkReal x1740=((25.0)*pp);
IkReal x1741=((21.0)*r10);
IkReal x1742=(cj5*pz*r22);
IkReal x1743=((24.5)*sj0*sj1);
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(IKsign((((npy*sj5*x1741))+(((-1.0)*npx*sj5*x1739)))),-1);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal(((((-1.0)*x1741*x1742))+(((-1.0)*npx*x1743))+((npx*x1738))+(((-1.0)*r10*x1740))+(((1.5925)*r10)))),IkReal(((((-1.0)*r11*x1740))+(((-1.0)*npy*x1743))+(((-1.0)*x1739*x1742))+((npy*x1738))+(((1.5925)*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1744.value)))+(x1745.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1746=IKcos(j6);
IkReal x1747=IKsin(j6);
IkReal x1748=(r10*sj0);
IkReal x1749=(cj5*r22);
IkReal x1750=(cj0*r01);
IkReal x1751=((0.49)*cj1);
IkReal x1752=((1.0)*npx);
IkReal x1753=((0.49)*sj1);
IkReal x1754=(r11*sj0);
IkReal x1755=((0.42)*sj5);
IkReal x1756=((0.84)*sj5);
IkReal x1757=(cj0*r00);
IkReal x1758=(npy*x1747);
IkReal x1759=(r20*x1746);
IkReal x1760=(r21*x1747);
IkReal x1761=(x1747*x1753);
IkReal x1762=(x1746*x1755);
evalcond[0]=(((r00*x1762))+(((-1.0)*r01*x1747*x1755))+(((-1.0)*px))+((cj0*x1753)));
evalcond[1]=((((-1.0)*py))+((r10*x1762))+((sj0*x1753))+(((-1.0)*r11*x1747*x1755)));
evalcond[2]=((0.0637)+(((-1.0)*x1756*x1758))+(((-1.0)*pp))+(((-0.84)*pz*x1749))+((npx*x1746*x1756)));
evalcond[3]=(x1751+(((-1.0)*x1755*x1760))+(((-1.0)*pz))+(((-0.42)*x1749))+((x1755*x1759)));
evalcond[4]=(((r20*x1747*x1751))+((x1746*x1750*x1753))+((x1748*x1761))+(((-1.0)*npy*x1746))+(((-1.0)*x1747*x1752))+((x1746*x1753*x1754))+((x1757*x1761))+((r21*x1746*x1751)));
evalcond[5]=((((-1.0)*x1750*x1761))+(((-1.0)*x1754*x1761))+((x1746*x1748*x1753))+x1758+x1755+(((-1.0)*x1746*x1752))+((x1746*x1753*x1757))+(((-1.0)*x1751*x1760))+((x1751*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1763=((25.0)*pp);
IkReal x1764=((50.0)*px);
IkReal x1765=((21.0)*sj5);
IkReal x1766=((24.5)*cj0*sj1);
IkReal x1767=((21.0)*cj5*pz*r22);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*r01*x1765))+((npy*r00*x1765)))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x1767))+(((-1.0)*r00*x1763))+((npx*x1764))+(((1.5925)*r00))+(((-1.0)*npx*x1766)))),IkReal(((((-1.0)*r01*x1767))+(((-1.0)*r01*x1763))+((npy*x1764))+(((-1.0)*npy*x1766))+(((1.5925)*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1768.value)))+(x1769.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1770=IKcos(j6);
IkReal x1771=IKsin(j6);
IkReal x1772=(r10*sj0);
IkReal x1773=(cj5*r22);
IkReal x1774=(cj0*r01);
IkReal x1775=((0.49)*cj1);
IkReal x1776=((1.0)*npx);
IkReal x1777=((0.49)*sj1);
IkReal x1778=(r11*sj0);
IkReal x1779=((0.42)*sj5);
IkReal x1780=((0.84)*sj5);
IkReal x1781=(cj0*r00);
IkReal x1782=(npy*x1771);
IkReal x1783=(r20*x1770);
IkReal x1784=(r21*x1771);
IkReal x1785=(x1771*x1777);
IkReal x1786=(x1770*x1779);
evalcond[0]=(((cj0*x1777))+(((-1.0)*px))+(((-1.0)*r01*x1771*x1779))+((r00*x1786)));
evalcond[1]=(((r10*x1786))+(((-1.0)*r11*x1771*x1779))+(((-1.0)*py))+((sj0*x1777)));
evalcond[2]=((0.0637)+(((-0.84)*pz*x1773))+(((-1.0)*pp))+((npx*x1770*x1780))+(((-1.0)*x1780*x1782)));
evalcond[3]=((((-0.42)*x1773))+x1775+((x1779*x1783))+(((-1.0)*pz))+(((-1.0)*x1779*x1784)));
evalcond[4]=(((r20*x1771*x1775))+((x1772*x1785))+((r21*x1770*x1775))+((x1770*x1774*x1777))+((x1770*x1777*x1778))+(((-1.0)*x1771*x1776))+(((-1.0)*npy*x1770))+((x1781*x1785)));
evalcond[5]=(((x1770*x1772*x1777))+((x1775*x1783))+x1782+x1779+(((-1.0)*x1775*x1784))+(((-1.0)*x1774*x1785))+(((-1.0)*x1770*x1776))+(((-1.0)*x1778*x1785))+((x1770*x1777*x1781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1787=((24.5)*sj1);
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal(((((-50.0)*rxp0_2))+(((-1.0)*cj0*r10*x1787))+((r00*sj0*x1787)))),IkReal(((((-50.0)*rxp1_2))+(((-1.0)*cj0*r11*x1787))+((r01*sj0*x1787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
CheckValue<IkReal> x1789=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1789.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1788.value)+(((1.5707963267949)*(x1789.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1790=IKcos(j6);
IkReal x1791=IKsin(j6);
IkReal x1792=(r10*sj0);
IkReal x1793=(cj5*r22);
IkReal x1794=(cj0*r01);
IkReal x1795=((0.49)*cj1);
IkReal x1796=((1.0)*npx);
IkReal x1797=((0.49)*sj1);
IkReal x1798=(r11*sj0);
IkReal x1799=((0.42)*sj5);
IkReal x1800=((0.84)*sj5);
IkReal x1801=(cj0*r00);
IkReal x1802=(npy*x1791);
IkReal x1803=(r20*x1790);
IkReal x1804=(r21*x1791);
IkReal x1805=(x1791*x1797);
IkReal x1806=(x1790*x1799);
evalcond[0]=((((-1.0)*px))+(((-1.0)*r01*x1791*x1799))+((r00*x1806))+((cj0*x1797)));
evalcond[1]=(((sj0*x1797))+(((-1.0)*r11*x1791*x1799))+(((-1.0)*py))+((r10*x1806)));
evalcond[2]=((0.0637)+(((-1.0)*pp))+(((-0.84)*pz*x1793))+(((-1.0)*x1800*x1802))+((npx*x1790*x1800)));
evalcond[3]=(((x1799*x1803))+x1795+(((-1.0)*x1799*x1804))+(((-1.0)*pz))+(((-0.42)*x1793)));
evalcond[4]=((((-1.0)*npy*x1790))+((x1801*x1805))+((r20*x1791*x1795))+((x1790*x1797*x1798))+((x1792*x1805))+((x1790*x1794*x1797))+((r21*x1790*x1795))+(((-1.0)*x1791*x1796)));
evalcond[5]=((((-1.0)*x1790*x1796))+x1799+((x1790*x1792*x1797))+((x1795*x1803))+(((-1.0)*x1795*x1804))+((x1790*x1797*x1801))+(((-1.0)*x1798*x1805))+(((-1.0)*x1794*x1805))+x1802);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1807=((50.0)*py);
IkReal x1808=((21.0)*cj5);
IkReal x1809=(pz*r22);
IkReal x1810=((25.0)*pp);
IkReal x1811=(px*r02);
IkReal x1812=((21.0)*sj5);
IkReal x1813=((24.5)*sj0*sj1);
CheckValue<IkReal> x1814=IKPowWithIntegerCheck(IKsign((((npy*r10*x1812))+(((-1.0)*npx*r11*x1812)))),-1);
if(!x1814.valid){
continue;
}
CheckValue<IkReal> x1815 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1808*x1811))+(((-1.0)*npx*x1813))+((npx*x1807))+(((-1.0)*r10*x1810))+(((-1.0)*r10*x1808*x1809))+(((1.5925)*r10)))),IkReal((((npy*x1807))+(((-1.0)*r11*x1808*x1811))+(((-1.0)*npy*x1813))+(((-1.0)*r11*x1810))+(((1.5925)*r11))+(((-1.0)*r11*x1808*x1809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1814.value)))+(x1815.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1816=IKcos(j6);
IkReal x1817=IKsin(j6);
IkReal x1818=(r10*sj0);
IkReal x1819=((0.84)*cj5);
IkReal x1820=((0.49)*cj1);
IkReal x1821=(cj0*r01);
IkReal x1822=((1.0)*npx);
IkReal x1823=((0.49)*sj1);
IkReal x1824=((0.42)*cj5);
IkReal x1825=(r11*sj0);
IkReal x1826=((0.42)*sj5);
IkReal x1827=((0.84)*sj5);
IkReal x1828=(cj0*r00);
IkReal x1829=(npy*x1817);
IkReal x1830=(r21*x1817);
IkReal x1831=(x1817*x1823);
IkReal x1832=(x1816*x1826);
evalcond[0]=(((r10*x1832))+(((-1.0)*py))+((sj0*x1823))+(((-1.0)*r11*x1817*x1826)));
evalcond[1]=((((-1.0)*pz))+(((-1.0)*x1826*x1830))+(((-1.0)*r22*x1824))+x1820+((r20*x1832)));
evalcond[2]=(((cj0*x1823))+(((-1.0)*r01*x1817*x1826))+(((-1.0)*px))+(((-1.0)*r02*x1824))+((r00*x1832)));
evalcond[3]=((0.0637)+((npx*x1816*x1827))+(((-1.0)*pp))+(((-1.0)*x1827*x1829))+(((-1.0)*px*r02*x1819))+(((-1.0)*pz*r22*x1819)));
evalcond[4]=(((x1816*x1823*x1825))+(((-1.0)*x1817*x1822))+((r21*x1816*x1820))+((x1816*x1821*x1823))+((r20*x1817*x1820))+((x1818*x1831))+((x1828*x1831))+(((-1.0)*npy*x1816)));
evalcond[5]=(((x1816*x1818*x1823))+(((-1.0)*x1825*x1831))+((x1816*x1823*x1828))+((r20*x1816*x1820))+x1829+x1826+(((-1.0)*x1816*x1822))+(((-1.0)*x1820*x1830))+(((-1.0)*x1821*x1831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1833=((24.5)*sj1);
IkReal x1834=((21.0)*cj5*r02);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal((((r10*x1834))+(((-50.0)*rxp0_2))+((r00*sj0*x1833))+(((-1.0)*cj0*r10*x1833)))),IkReal((((r01*sj0*x1833))+(((-50.0)*rxp1_2))+(((-1.0)*cj0*r11*x1833))+((r11*x1834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1836.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1837=IKcos(j6);
IkReal x1838=IKsin(j6);
IkReal x1839=(r10*sj0);
IkReal x1840=((0.84)*cj5);
IkReal x1841=((0.49)*cj1);
IkReal x1842=(cj0*r01);
IkReal x1843=((1.0)*npx);
IkReal x1844=((0.49)*sj1);
IkReal x1845=((0.42)*cj5);
IkReal x1846=(r11*sj0);
IkReal x1847=((0.42)*sj5);
IkReal x1848=((0.84)*sj5);
IkReal x1849=(cj0*r00);
IkReal x1850=(npy*x1838);
IkReal x1851=(r21*x1838);
IkReal x1852=(x1838*x1844);
IkReal x1853=(x1837*x1847);
evalcond[0]=(((r10*x1853))+(((-1.0)*r11*x1838*x1847))+((sj0*x1844))+(((-1.0)*py)));
evalcond[1]=((((-1.0)*r22*x1845))+(((-1.0)*pz))+x1841+(((-1.0)*x1847*x1851))+((r20*x1853)));
evalcond[2]=(((cj0*x1844))+(((-1.0)*r02*x1845))+((r00*x1853))+(((-1.0)*px))+(((-1.0)*r01*x1838*x1847)));
evalcond[3]=((0.0637)+(((-1.0)*x1848*x1850))+(((-1.0)*px*r02*x1840))+(((-1.0)*pp))+((npx*x1837*x1848))+(((-1.0)*pz*r22*x1840)));
evalcond[4]=(((x1849*x1852))+((r21*x1837*x1841))+((x1837*x1844*x1846))+(((-1.0)*npy*x1837))+((r20*x1838*x1841))+(((-1.0)*x1838*x1843))+((x1839*x1852))+((x1837*x1842*x1844)));
evalcond[5]=(((x1837*x1844*x1849))+(((-1.0)*x1841*x1851))+(((-1.0)*x1842*x1852))+x1850+x1847+((r20*x1837*x1841))+((x1837*x1839*x1844))+(((-1.0)*x1837*x1843))+(((-1.0)*x1846*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1854=((24.5)*cj1);
IkReal x1855=((24.5)*sj0*sj1);
IkReal x1856=((21.0)*cj5*r22);
CheckValue<IkReal> x1857=IKPowWithIntegerCheck(IKsign((r02*sj5)),-1);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal((((r10*x1854))+(((-50.0)*rxp0_0))+(((-1.0)*r10*x1856))+(((-1.0)*r20*x1855)))),IkReal(((((-50.0)*rxp1_0))+(((-1.0)*r11*x1856))+((r11*x1854))+(((-1.0)*r21*x1855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1857.value)))+(x1858.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1859=IKcos(j6);
IkReal x1860=IKsin(j6);
IkReal x1861=(r10*sj0);
IkReal x1862=((0.84)*cj5);
IkReal x1863=((0.49)*cj1);
IkReal x1864=(cj0*r01);
IkReal x1865=((1.0)*npx);
IkReal x1866=((0.49)*sj1);
IkReal x1867=((0.42)*cj5);
IkReal x1868=(r11*sj0);
IkReal x1869=((0.42)*sj5);
IkReal x1870=((0.84)*sj5);
IkReal x1871=(cj0*r00);
IkReal x1872=(npy*x1860);
IkReal x1873=(r21*x1860);
IkReal x1874=(x1860*x1866);
IkReal x1875=(x1859*x1869);
evalcond[0]=((((-1.0)*py))+((r10*x1875))+((sj0*x1866))+(((-1.0)*r11*x1860*x1869)));
evalcond[1]=((((-1.0)*x1869*x1873))+(((-1.0)*pz))+((r20*x1875))+x1863+(((-1.0)*r22*x1867)));
evalcond[2]=((((-1.0)*r02*x1867))+(((-1.0)*px))+((cj0*x1866))+((r00*x1875))+(((-1.0)*r01*x1860*x1869)));
evalcond[3]=((0.0637)+(((-1.0)*x1870*x1872))+(((-1.0)*px*r02*x1862))+(((-1.0)*pp))+(((-1.0)*pz*r22*x1862))+((npx*x1859*x1870)));
evalcond[4]=(((r20*x1860*x1863))+((x1859*x1864*x1866))+((x1861*x1874))+(((-1.0)*x1860*x1865))+((x1859*x1866*x1868))+((x1871*x1874))+(((-1.0)*npy*x1859))+((r21*x1859*x1863)));
evalcond[5]=((((-1.0)*x1868*x1874))+((r20*x1859*x1863))+(((-1.0)*x1864*x1874))+((x1859*x1861*x1866))+(((-1.0)*x1863*x1873))+x1869+x1872+((x1859*x1866*x1871))+(((-1.0)*x1859*x1865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1876=((21.0)*cj5);
IkReal x1877=((25.0)*pp);
IkReal x1878=((50.0)*px);
IkReal x1879=((21.0)*sj5);
IkReal x1880=((24.5)*cj0*sj1);
CheckValue<IkReal> x1881=IKPowWithIntegerCheck(IKsign(((((-1.0)*npx*r01*x1879))+((npy*r00*x1879)))),-1);
if(!x1881.valid){
continue;
}
CheckValue<IkReal> x1882 = IKatan2WithCheck(IkReal((((npx*x1878))+(((-1.0)*r00*x1877))+(((-1.0)*npz*r00*x1876))+((npx*r02*x1876))+(((-1.0)*npx*x1880))+(((1.5925)*r00)))),IkReal(((((-1.0)*r01*x1877))+((npy*x1878))+(((-1.0)*npy*x1880))+((npy*r02*x1876))+(((-1.0)*npz*r01*x1876))+(((1.5925)*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1882.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1881.value)))+(x1882.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1883=IKcos(j6);
IkReal x1884=IKsin(j6);
IkReal x1885=(r10*sj0);
IkReal x1886=((0.49)*cj1);
IkReal x1887=(cj0*r01);
IkReal x1888=((1.0)*npx);
IkReal x1889=((0.49)*sj1);
IkReal x1890=((0.42)*cj5);
IkReal x1891=(r11*sj0);
IkReal x1892=((0.42)*sj5);
IkReal x1893=((0.84)*sj5);
IkReal x1894=(cj0*r00);
IkReal x1895=(npy*x1884);
IkReal x1896=(r20*x1883);
IkReal x1897=(r21*x1884);
IkReal x1898=(x1884*x1889);
IkReal x1899=(x1883*x1892);
evalcond[0]=((0.0637)+(((-1.0)*x1893*x1895))+(((-0.84)*cj5*npz))+((npx*x1883*x1893))+(((-1.0)*pp)));
evalcond[1]=((((-1.0)*x1892*x1897))+((x1892*x1896))+(((-1.0)*r22*x1890))+(((-1.0)*pz))+x1886);
evalcond[2]=((((-1.0)*r01*x1884*x1892))+(((-1.0)*r02*x1890))+((r00*x1899))+(((-1.0)*px))+((cj0*x1889)));
evalcond[3]=(((r10*x1899))+(((-1.0)*py))+(((-1.0)*r12*x1890))+(((-1.0)*r11*x1884*x1892))+((sj0*x1889)));
evalcond[4]=((((-1.0)*npy*x1883))+((x1883*x1889*x1891))+((x1885*x1898))+((x1883*x1887*x1889))+(((-1.0)*x1884*x1888))+((x1894*x1898))+((r21*x1883*x1886))+((r20*x1884*x1886)));
evalcond[5]=(((x1883*x1889*x1894))+((x1886*x1896))+(((-1.0)*x1883*x1888))+((x1883*x1885*x1889))+(((-1.0)*x1891*x1898))+(((-1.0)*x1886*x1897))+x1895+x1892+(((-1.0)*x1887*x1898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1900=((24.5)*cj1);
IkReal x1901=((21.0)*sj5);
IkReal x1902=((50.0)*pz);
IkReal x1903=((25.0)*pp);
IkReal x1904=((21.0)*cj5);
CheckValue<IkReal> x1905 = IKatan2WithCheck(IkReal((((npx*r22*x1904))+((npx*x1902))+(((-1.0)*r20*x1903))+(((1.5925)*r20))+(((-1.0)*npx*x1900))+(((-1.0)*npz*r20*x1904)))),IkReal(((((-1.0)*npz*r21*x1904))+(((-1.0)*r21*x1903))+(((-1.0)*npy*x1900))+(((1.5925)*r21))+((npy*r22*x1904))+((npy*x1902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1905.valid){
continue;
}
CheckValue<IkReal> x1906=IKPowWithIntegerCheck(IKsign((((npy*r20*x1901))+(((-1.0)*npx*r21*x1901)))),-1);
if(!x1906.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1905.value)+(((1.5707963267949)*(x1906.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1907=IKcos(j6);
IkReal x1908=IKsin(j6);
IkReal x1909=(r10*sj0);
IkReal x1910=((0.49)*cj1);
IkReal x1911=(cj0*r01);
IkReal x1912=((1.0)*npx);
IkReal x1913=((0.49)*sj1);
IkReal x1914=((0.42)*cj5);
IkReal x1915=(r11*sj0);
IkReal x1916=((0.42)*sj5);
IkReal x1917=((0.84)*sj5);
IkReal x1918=(cj0*r00);
IkReal x1919=(npy*x1908);
IkReal x1920=(r20*x1907);
IkReal x1921=(r21*x1908);
IkReal x1922=(x1908*x1913);
IkReal x1923=(x1907*x1916);
evalcond[0]=((0.0637)+(((-1.0)*x1917*x1919))+(((-0.84)*cj5*npz))+((npx*x1907*x1917))+(((-1.0)*pp)));
evalcond[1]=((((-1.0)*x1916*x1921))+(((-1.0)*r22*x1914))+(((-1.0)*pz))+x1910+((x1916*x1920)));
evalcond[2]=(((r00*x1923))+(((-1.0)*r02*x1914))+(((-1.0)*r01*x1908*x1916))+(((-1.0)*px))+((cj0*x1913)));
evalcond[3]=((((-1.0)*r12*x1914))+(((-1.0)*py))+(((-1.0)*r11*x1908*x1916))+((sj0*x1913))+((r10*x1923)));
evalcond[4]=(((x1918*x1922))+(((-1.0)*npy*x1907))+((x1907*x1911*x1913))+((r20*x1908*x1910))+((x1907*x1913*x1915))+((x1909*x1922))+((r21*x1907*x1910))+(((-1.0)*x1908*x1912)));
evalcond[5]=((((-1.0)*x1915*x1922))+(((-1.0)*x1910*x1921))+(((-1.0)*x1911*x1922))+((x1907*x1909*x1913))+(((-1.0)*x1907*x1912))+x1919+x1916+((x1910*x1920))+((x1907*x1913*x1918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1924=((24.5)*cj1);
IkReal x1925=((21.0)*cj5);
IkReal x1926=((24.5)*cj0*sj1);
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1925))+((r00*x1924))+(((-1.0)*r20*x1926))+(((50.0)*rxp0_1)))),IkReal((((r01*x1924))+(((-1.0)*r21*x1926))+(((50.0)*rxp1_1))+((r10*x1925)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign((r12*sj5)),-1);
if(!x1928.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1927.value)+(((-1.5707963267949)*(x1928.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1929=IKcos(j6);
IkReal x1930=IKsin(j6);
IkReal x1931=(r10*sj0);
IkReal x1932=((0.49)*cj1);
IkReal x1933=(cj0*r01);
IkReal x1934=((1.0)*npx);
IkReal x1935=((0.49)*sj1);
IkReal x1936=((0.42)*cj5);
IkReal x1937=(r11*sj0);
IkReal x1938=((0.42)*sj5);
IkReal x1939=((0.84)*sj5);
IkReal x1940=(cj0*r00);
IkReal x1941=(npy*x1930);
IkReal x1942=(r20*x1929);
IkReal x1943=(r21*x1930);
IkReal x1944=(x1930*x1935);
IkReal x1945=(x1929*x1938);
evalcond[0]=((0.0637)+(((-0.84)*cj5*npz))+((npx*x1929*x1939))+(((-1.0)*pp))+(((-1.0)*x1939*x1941)));
evalcond[1]=(((x1938*x1942))+(((-1.0)*r22*x1936))+(((-1.0)*pz))+x1932+(((-1.0)*x1938*x1943)));
evalcond[2]=((((-1.0)*px))+((cj0*x1935))+((r00*x1945))+(((-1.0)*r01*x1930*x1938))+(((-1.0)*r02*x1936)));
evalcond[3]=(((r10*x1945))+(((-1.0)*r12*x1936))+(((-1.0)*py))+((sj0*x1935))+(((-1.0)*r11*x1930*x1938)));
evalcond[4]=(((r20*x1930*x1932))+(((-1.0)*x1930*x1934))+((x1940*x1944))+((x1929*x1935*x1937))+((x1929*x1933*x1935))+(((-1.0)*npy*x1929))+((x1931*x1944))+((r21*x1929*x1932)));
evalcond[5]=(((x1929*x1931*x1935))+(((-1.0)*x1937*x1944))+((x1929*x1935*x1940))+x1938+x1941+(((-1.0)*x1929*x1934))+(((-1.0)*x1932*x1943))+((x1932*x1942))+(((-1.0)*x1933*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x244=((1.0)*r12);
IkReal x245=((1.0)*cj5);
IkReal x246=(cj1*sj0);
IkReal x247=((1.0)*sj5);
IkReal x248=(cj0*r01);
IkReal x249=(sj0*sj1);
IkReal x250=((1.0)*cj1);
IkReal x251=(cj0*r00);
IkReal x252=((1.0)*sj0);
IkReal x253=((1.0)*sj6);
IkReal x254=(cj0*r02);
IkReal x255=((1.0)*sj1);
IkReal x256=((((-1.0)*r01*x252))+((cj0*r11)));
IkReal x257=((((-1.0)*r00*x252))+((cj0*r10)));
IkReal x258=(((r02*sj0))+(((-1.0)*cj0*x244)));
IkReal x259=(((cj1*x251))+(((-1.0)*r20*x255))+((r10*x246)));
IkReal x260=(((cj1*x248))+(((-1.0)*r21*x255))+((r11*x246)));
IkReal x261=(((sj1*x251))+((cj1*r20))+((r10*x249)));
IkReal x262=(((cj1*r21))+((r11*x249))+((sj1*x248)));
IkReal x263=((((-1.0)*x250*x254))+((r22*sj1))+(((-1.0)*x244*x246)));
IkReal x264=(((cj6*x257))+(((-1.0)*x253*x256)));
IkReal x265=((((-1.0)*r22*x250))+(((-1.0)*x254*x255))+(((-1.0)*x244*x249)));
IkReal x266=((1.0)*x265);
IkReal x267=(((cj6*x259))+(((-1.0)*x253*x260)));
IkReal x268=((((-1.0)*x253*x262))+((cj6*x261)));
new_r00=(((cj5*x267))+(((-1.0)*x247*x263)));
new_r01=(((sj6*x259))+((cj6*x260)));
new_r02=((((-1.0)*x247*x267))+(((-1.0)*x245*x263)));
new_r10=(((cj5*x264))+(((-1.0)*x247*x258)));
new_r11=(((sj6*x257))+((cj6*x256)));
new_r12=((((-1.0)*x245*x258))+(((-1.0)*x247*x264)));
new_r20=(((cj5*x268))+(((-1.0)*x247*x265)));
new_r21=(((sj6*x261))+((cj6*x262)));
new_r22=((((-1.0)*x247*x268))+(((-1.0)*x245*x265)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((-1.0)*new_r22);
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r12;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j4mul = 1;
j4=0;
j2mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].fmul = j2mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(1);
vfree[0] = 4;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x269=new_r22*new_r22;
IkReal x270=((16.0)*new_r10);
IkReal x271=((16.0)*new_r01);
IkReal x272=((16.0)*new_r22);
IkReal x273=((8.0)*new_r11);
IkReal x274=((8.0)*new_r00);
IkReal x275=(x269*x270);
IkReal x276=(x269*x271);
j2eval[0]=((IKabs((x270+(((-1.0)*x275)))))+(IKabs(((((-1.0)*new_r22*x274))+((x269*x273)))))+(IKabs((x275+(((-1.0)*x270)))))+(IKabs(((((-32.0)*new_r00*x269))+(((16.0)*new_r00))+((new_r11*x272)))))+(IKabs((x271+(((-1.0)*x276)))))+(IKabs((((new_r22*x273))+(((-1.0)*x274)))))+(IKabs((x276+(((-1.0)*x271)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x272))+(((-16.0)*new_r11*x269))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2, j4]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j2evalpoly[1];
IkReal x277=new_r22*new_r22;
IkReal x278=((16.0)*new_r10);
IkReal x279=(new_r11*new_r22);
IkReal x280=(x277*x278);
IkReal x281=((((8.0)*x279))+(((-8.0)*new_r00)));
op[0]=x281;
op[1]=(x278+(((-1.0)*x280)));
op[2]=((((-32.0)*new_r00*x277))+(((16.0)*new_r00))+(((16.0)*x279)));
op[3]=(x280+(((-1.0)*x278)));
op[4]=x281;
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

IkReal x282=((16.0)*new_r01);
IkReal x283=new_r22*new_r22;
IkReal x284=(new_r00*new_r22);
IkReal x285=((8.0)*x284);
IkReal x286=(new_r11*x283);
IkReal x287=(x282*x283);
IkReal x288=((8.0)*x286);
j2evalpoly[0]=((((htj2*htj2*htj2)*((x287+(((-1.0)*x282))))))+((htj2*((x282+(((-1.0)*x287))))))+x288+(((htj2*htj2*htj2*htj2)*((x288+(((-1.0)*x285))))))+(((-1.0)*x285))+(((htj2*htj2)*(((((32.0)*new_r11))+(((-16.0)*x286))+(((-16.0)*x284)))))));
if( IKabs(j2evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x289=cj2*cj2;
IkReal x290=new_r22*new_r22;
IkReal x291=(new_r22*sj2);
IkReal x292=((1.0)*new_r10);
IkReal x293=((((-1.0)*x289*x290))+x290+x289);
j4eval[0]=x293;
j4eval[1]=((IKabs((((new_r11*x291))+(((-1.0)*cj2*x292)))))+(IKabs(((((-1.0)*x291*x292))+(((-1.0)*cj2*new_r11))))));
j4eval[2]=IKsign(x293);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=new_r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x294=IKcos(j4);
IkReal x295=IKsin(j4);
IkReal x296=((1.0)*new_r22);
evalcond[0]=(x295+(((-1.0)*new_r00)));
evalcond[1]=(x294+(((-1.0)*new_r01)));
evalcond[2]=(((new_r22*x294))+new_r10);
evalcond[3]=((((-1.0)*x295*x296))+new_r11);
evalcond[4]=((((-1.0)*new_r11*x296))+x295);
evalcond[5]=((((-1.0)*x294))+(((-1.0)*new_r10*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x297=IKsin(j4);
IkReal x298=IKcos(j4);
evalcond[0]=(x297+new_r00);
evalcond[1]=(x298+new_r01);
evalcond[2]=(x297+((new_r11*new_r22)));
evalcond[3]=(((new_r22*x298))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*x298))+((new_r10*new_r22)));
evalcond[5]=((((-1.0)*new_r22*x297))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x299=new_r22*new_r22;
CheckValue<IkReal> x300=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x299))),-1);
if(!x300.valid){
continue;
}
if((((-1.0)*x299*(x300.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x299*(x300.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x301=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
if( IKabs((((new_r00*x301))+(((-1.0)*gconst62*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x301))+(((-1.0)*gconst62*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x301))+(((-1.0)*gconst62*new_r10))))+IKsqr((((new_r01*x301))+(((-1.0)*gconst62*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*x301))+(((-1.0)*gconst62*new_r10))), (((new_r01*x301))+(((-1.0)*gconst62*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x302=IKcos(j4);
IkReal x303=IKsin(j4);
IkReal x304=((1.0)*new_r22);
IkReal x305=(gconst62*new_r00);
IkReal x306=(gconst62*new_r01);
IkReal x307=(new_r22*x302);
IkReal x308=(gconst62*x303);
IkReal x309=x301;
IkReal x310=((1.0)*x309);
evalcond[0]=((((-1.0)*new_r00*x310))+((gconst62*new_r10))+x303);
evalcond[1]=(((gconst62*new_r11))+x302+(((-1.0)*new_r01*x310)));
evalcond[2]=(((new_r10*x309))+x307+x305);
evalcond[3]=(((new_r11*x309))+(((-1.0)*x303*x304))+x306);
evalcond[4]=(x308+new_r10+((x307*x309)));
evalcond[5]=((((-1.0)*x303*x304*x309))+((gconst62*x302))+new_r11);
evalcond[6]=((((-1.0)*x303*x310))+((gconst62*x307))+new_r00);
evalcond[7]=((((-1.0)*new_r11*x304*x309))+x303+(((-1.0)*x304*x306)));
evalcond[8]=((((-1.0)*x302*x310))+(((-1.0)*x304*x308))+new_r01);
evalcond[9]=((((-1.0)*x302))+(((-1.0)*new_r10*x304*x309))+(((-1.0)*x304*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x311=new_r22*new_r22;
CheckValue<IkReal> x312=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x311))),-1);
if(!x312.valid){
continue;
}
if((((-1.0)*x311*(x312.value))) < -0.00001)
continue;
IkReal gconst62=IKsqrt(((-1.0)*x311*(x312.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst62)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst62*gconst62))))) < -0.00001)
continue;
IkReal x313=IKsqrt(((1.0)+(((-1.0)*(gconst62*gconst62)))));
if( IKabs(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x313))+(((-1.0)*gconst62*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x313))))+IKsqr(((((-1.0)*new_r01*x313))+(((-1.0)*gconst62*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*gconst62*new_r10))+(((-1.0)*new_r00*x313))), ((((-1.0)*new_r01*x313))+(((-1.0)*gconst62*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x314=IKsin(j4);
IkReal x315=IKcos(j4);
IkReal x316=((1.0)*new_r22);
IkReal x317=(gconst62*new_r00);
IkReal x318=(gconst62*new_r01);
IkReal x319=(gconst62*x314);
IkReal x320=(gconst62*x315);
IkReal x321=((1.0)*x315);
IkReal x322=x313;
IkReal x323=(new_r22*x322);
IkReal x324=((1.0)*x322);
evalcond[0]=(((new_r00*x322))+((gconst62*new_r10))+x314);
evalcond[1]=(((new_r01*x322))+((gconst62*new_r11))+x315);
evalcond[2]=(x320+((x314*x323))+new_r11);
evalcond[3]=(x317+(((-1.0)*new_r10*x324))+((new_r22*x315)));
evalcond[4]=(((new_r22*x320))+((x314*x322))+new_r00);
evalcond[5]=(x314+((new_r11*x323))+(((-1.0)*x316*x318)));
evalcond[6]=(x318+(((-1.0)*x314*x316))+(((-1.0)*new_r11*x324)));
evalcond[7]=(((x315*x322))+new_r01+(((-1.0)*x316*x319)));
evalcond[8]=(x319+new_r10+(((-1.0)*x315*x316*x322)));
evalcond[9]=((((-1.0)*x321))+((new_r10*x323))+(((-1.0)*x316*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x325=new_r22*new_r22;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x325))),-1);
if(!x326.valid){
continue;
}
if((((-1.0)*x325*(x326.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x325*(x326.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x327=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
if( IKabs((((new_r00*x327))+(((-1.0)*gconst63*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*x327))+(((-1.0)*gconst63*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x327))+(((-1.0)*gconst63*new_r10))))+IKsqr((((new_r01*x327))+(((-1.0)*gconst63*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*x327))+(((-1.0)*gconst63*new_r10))), (((new_r01*x327))+(((-1.0)*gconst63*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x328=IKcos(j4);
IkReal x329=IKsin(j4);
IkReal x330=(gconst63*new_r01);
IkReal x331=((1.0)*new_r22);
IkReal x332=(gconst63*new_r00);
IkReal x333=(gconst63*x328);
IkReal x334=(new_r22*x328);
IkReal x335=(gconst63*x329);
IkReal x336=x327;
IkReal x337=((1.0)*x336);
IkReal x338=(x331*x336);
evalcond[0]=(((gconst63*new_r10))+x329+(((-1.0)*new_r00*x337)));
evalcond[1]=(((gconst63*new_r11))+x328+(((-1.0)*new_r01*x337)));
evalcond[2]=(((new_r10*x336))+x332+x334);
evalcond[3]=((((-1.0)*x329*x331))+((new_r11*x336))+x330);
evalcond[4]=(((x334*x336))+x335+new_r10);
evalcond[5]=((((-1.0)*x329*x338))+x333+new_r11);
evalcond[6]=(((new_r22*x333))+(((-1.0)*x329*x337))+new_r00);
evalcond[7]=((((-1.0)*new_r11*x338))+x329+(((-1.0)*x330*x331)));
evalcond[8]=((((-1.0)*x328*x337))+(((-1.0)*x331*x335))+new_r01);
evalcond[9]=((((-1.0)*new_r10*x338))+(((-1.0)*x328))+(((-1.0)*x331*x332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x339=new_r22*new_r22;
CheckValue<IkReal> x340=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x339))),-1);
if(!x340.valid){
continue;
}
if((((-1.0)*x339*(x340.value))) < -0.00001)
continue;
IkReal gconst63=((-1.0)*(IKsqrt(((-1.0)*x339*(x340.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj2+(((-1.0)*gconst63)))))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if((((1.0)+(((-1.0)*(gconst63*gconst63))))) < -0.00001)
continue;
IkReal x341=IKsqrt(((1.0)+(((-1.0)*(gconst63*gconst63)))));
if( IKabs(((((-1.0)*new_r00*x341))+(((-1.0)*gconst63*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x341))+(((-1.0)*gconst63*new_r10))))+IKsqr(((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r00*x341))+(((-1.0)*gconst63*new_r10))), ((((-1.0)*gconst63*new_r11))+(((-1.0)*new_r01*x341))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x342=IKcos(j4);
IkReal x343=IKsin(j4);
IkReal x344=(gconst63*new_r01);
IkReal x345=((1.0)*new_r22);
IkReal x346=(gconst63*new_r00);
IkReal x347=(gconst63*x342);
IkReal x348=(gconst63*x343);
IkReal x349=x341;
IkReal x350=(new_r10*x349);
IkReal x351=(new_r22*x349);
IkReal x352=(x342*x349);
evalcond[0]=(((new_r00*x349))+((gconst63*new_r10))+x343);
evalcond[1]=(((gconst63*new_r11))+((new_r01*x349))+x342);
evalcond[2]=(x347+((x343*x351))+new_r11);
evalcond[3]=(((new_r22*x342))+(((-1.0)*x350))+x346);
evalcond[4]=(((new_r22*x347))+new_r00+((x343*x349)));
evalcond[5]=(x343+(((-1.0)*x344*x345))+((new_r11*x351)));
evalcond[6]=((((-1.0)*new_r11*x349))+x344+(((-1.0)*x343*x345)));
evalcond[7]=(x352+(((-1.0)*x345*x348))+new_r01);
evalcond[8]=((((-1.0)*x345*x352))+x348+new_r10);
evalcond[9]=(((new_r22*x350))+(((-1.0)*x345*x346))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x353=(new_r01*new_r22);
IkReal x354=(cj2*new_r11);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(cj2,-1);
if(!x355.valid){
continue;
}
if( IKabs(((x355.value)*((((x353*(cj2*cj2)))+((new_r22*sj2*x354))+(((-1.0)*x353))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*x354)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x355.value)*((((x353*(cj2*cj2)))+((new_r22*sj2*x354))+(((-1.0)*x353))+(((-1.0)*new_r10))))))+IKsqr((((new_r01*sj2))+(((-1.0)*x354))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x355.value)*((((x353*(cj2*cj2)))+((new_r22*sj2*x354))+(((-1.0)*x353))+(((-1.0)*new_r10))))), (((new_r01*sj2))+(((-1.0)*x354))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x356=IKcos(j4);
IkReal x357=IKsin(j4);
IkReal x358=(cj2*new_r01);
IkReal x359=(new_r10*sj2);
IkReal x360=((1.0)*new_r22);
IkReal x361=((1.0)*sj2);
IkReal x362=(new_r11*sj2);
IkReal x363=(cj2*new_r00);
IkReal x364=(cj2*x357);
IkReal x365=(new_r22*x356);
evalcond[0]=((((-1.0)*new_r00*x361))+x357+((cj2*new_r10)));
evalcond[1]=(x356+((cj2*new_r11))+(((-1.0)*new_r01*x361)));
evalcond[2]=(x359+x363+x365);
evalcond[3]=(x358+x362+(((-1.0)*x357*x360)));
evalcond[4]=(x364+((sj2*x365))+new_r10);
evalcond[5]=((((-1.0)*sj2*x357*x360))+new_r11+((cj2*x356)));
evalcond[6]=(((cj2*x365))+new_r00+(((-1.0)*x357*x361)));
evalcond[7]=((((-1.0)*x360*x362))+(((-1.0)*x358*x360))+x357);
evalcond[8]=((((-1.0)*x360*x364))+(((-1.0)*x356*x361))+new_r01);
evalcond[9]=((((-1.0)*x360*x363))+(((-1.0)*x356))+(((-1.0)*x359*x360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x366=((1.0)*cj2);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(new_r22,-1);
if(!x367.valid){
continue;
}
if( IKabs((((new_r00*sj2))+(((-1.0)*new_r10*x366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x367.value)*(((((-1.0)*new_r00*x366))+(((-1.0)*new_r10*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj2))+(((-1.0)*new_r10*x366))))+IKsqr(((x367.value)*(((((-1.0)*new_r00*x366))+(((-1.0)*new_r10*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r00*sj2))+(((-1.0)*new_r10*x366))), ((x367.value)*(((((-1.0)*new_r00*x366))+(((-1.0)*new_r10*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x368=IKcos(j4);
IkReal x369=IKsin(j4);
IkReal x370=(cj2*new_r01);
IkReal x371=(new_r10*sj2);
IkReal x372=((1.0)*new_r22);
IkReal x373=((1.0)*sj2);
IkReal x374=(new_r11*sj2);
IkReal x375=(cj2*new_r00);
IkReal x376=(cj2*x369);
IkReal x377=(new_r22*x368);
evalcond[0]=((((-1.0)*new_r00*x373))+x369+((cj2*new_r10)));
evalcond[1]=(x368+((cj2*new_r11))+(((-1.0)*new_r01*x373)));
evalcond[2]=(x377+x375+x371);
evalcond[3]=(x374+x370+(((-1.0)*x369*x372)));
evalcond[4]=(x376+((sj2*x377))+new_r10);
evalcond[5]=((((-1.0)*sj2*x369*x372))+((cj2*x368))+new_r11);
evalcond[6]=((((-1.0)*x369*x373))+new_r00+((cj2*x377)));
evalcond[7]=((((-1.0)*x370*x372))+(((-1.0)*x372*x374))+x369);
evalcond[8]=((((-1.0)*x368*x373))+(((-1.0)*x372*x376))+new_r01);
evalcond[9]=((((-1.0)*x368))+(((-1.0)*x372*x375))+(((-1.0)*x371*x372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x378=cj2*cj2;
IkReal x379=new_r22*new_r22;
IkReal x380=(new_r22*sj2);
IkReal x381=((1.0)*cj2);
CheckValue<IkReal> x382 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x381))+((new_r11*x380)))),IkReal(((((-1.0)*new_r11*x381))+(((-1.0)*new_r10*x380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x382.valid){
continue;
}
CheckValue<IkReal> x383=IKPowWithIntegerCheck(IKsign(((((-1.0)*x378*x379))+x379+x378)),-1);
if(!x383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x382.value)+(((1.5707963267949)*(x383.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[10];
IkReal x384=IKcos(j4);
IkReal x385=IKsin(j4);
IkReal x386=(cj2*new_r01);
IkReal x387=(new_r10*sj2);
IkReal x388=((1.0)*new_r22);
IkReal x389=((1.0)*sj2);
IkReal x390=(new_r11*sj2);
IkReal x391=(cj2*new_r00);
IkReal x392=(cj2*x385);
IkReal x393=(new_r22*x384);
evalcond[0]=((((-1.0)*new_r00*x389))+x385+((cj2*new_r10)));
evalcond[1]=((((-1.0)*new_r01*x389))+x384+((cj2*new_r11)));
evalcond[2]=(x387+x391+x393);
evalcond[3]=(x386+x390+(((-1.0)*x385*x388)));
evalcond[4]=(x392+((sj2*x393))+new_r10);
evalcond[5]=((((-1.0)*sj2*x385*x388))+((cj2*x384))+new_r11);
evalcond[6]=(((cj2*x393))+new_r00+(((-1.0)*x385*x389)));
evalcond[7]=((((-1.0)*x388*x390))+x385+(((-1.0)*x386*x388)));
evalcond[8]=((((-1.0)*x384*x389))+(((-1.0)*x388*x392))+new_r01);
evalcond[9]=((((-1.0)*x387*x388))+(((-1.0)*x388*x391))+(((-1.0)*x384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x395=IKPowWithIntegerCheck(sj3,-1);
if(!x395.valid){
continue;
}
IkReal x394=x395.value;
CheckValue<IkReal> x396=IKPowWithIntegerCheck(new_r12,-1);
if(!x396.valid){
continue;
}
if( IKabs((x394*(x396.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x394)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x394*(x396.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))))+IKsqr((new_r02*x394))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x394*(x396.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj3*cj3)))))), (new_r02*x394));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x397=IKcos(j2);
IkReal x398=IKsin(j2);
IkReal x399=((1.0)*sj3);
IkReal x400=(new_r02*x397);
IkReal x401=(new_r12*x398);
IkReal x402=(x398*x399);
evalcond[0]=((((-1.0)*x397*x399))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x402)));
evalcond[2]=((((-1.0)*new_r02*x398))+((new_r12*x397)));
evalcond[3]=((((-1.0)*x399))+x401+x400);
evalcond[4]=(((new_r22*sj3))+((cj3*x400))+((cj3*x401)));
evalcond[5]=((((-1.0)*new_r00*x397*x399))+(((-1.0)*new_r10*x402))+((cj3*new_r20)));
evalcond[6]=((((-1.0)*new_r01*x397*x399))+(((-1.0)*new_r11*x402))+((cj3*new_r21)));
evalcond[7]=((1.0)+(((-1.0)*x399*x400))+(((-1.0)*x399*x401))+((cj3*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x403=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*new_r11*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x403))))+IKsqr((((new_r01*sj2))+(((-1.0)*new_r11*x403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r11*sj2))+(((-1.0)*new_r01*x403))), (((new_r01*sj2))+(((-1.0)*new_r11*x403))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x404=IKsin(j4);
IkReal x405=IKcos(j4);
IkReal x406=((1.0)*sj2);
IkReal x407=(cj2*x404);
IkReal x408=(cj2*x405);
IkReal x409=(x405*x406);
evalcond[0]=(((new_r11*sj2))+x404+((cj2*new_r01)));
evalcond[1]=(x404+((cj2*new_r10))+(((-1.0)*new_r00*x406)));
evalcond[2]=(x405+((cj2*new_r11))+(((-1.0)*new_r01*x406)));
evalcond[3]=(((sj2*x404))+x408+new_r11);
evalcond[4]=(((new_r10*sj2))+((cj2*new_r00))+(((-1.0)*x405)));
evalcond[5]=(x407+new_r01+(((-1.0)*x409)));
evalcond[6]=(x407+new_r10+(((-1.0)*x409)));
evalcond[7]=((((-1.0)*x404*x406))+new_r00+(((-1.0)*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x410=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj2*x410))+((new_r11*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*x410))+((new_r11*sj2))))+IKsqr(((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj2*x410))+((new_r11*sj2))), ((((-1.0)*cj2*new_r11))+(((-1.0)*sj2*x410))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x411=IKcos(j4);
IkReal x412=IKsin(j4);
IkReal x413=((1.0)*sj2);
IkReal x414=(cj2*x411);
IkReal x415=((1.0)*x412);
IkReal x416=(x412*x413);
evalcond[0]=(((new_r10*sj2))+x411+((cj2*new_r00)));
evalcond[1]=(x412+((cj2*new_r10))+(((-1.0)*new_r00*x413)));
evalcond[2]=(x411+((cj2*new_r11))+(((-1.0)*new_r01*x413)));
evalcond[3]=(((new_r11*sj2))+((cj2*new_r01))+(((-1.0)*x415)));
evalcond[4]=(((sj2*x411))+new_r10+((cj2*x412)));
evalcond[5]=(x414+new_r11+(((-1.0)*x416)));
evalcond[6]=(x414+new_r00+(((-1.0)*x416)));
evalcond[7]=((((-1.0)*cj2*x415))+(((-1.0)*x411*x413))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x417=IKsin(j4);
IkReal x418=IKcos(j4);
IkReal x419=((1.0)*x418);
evalcond[0]=(x417+new_r10);
evalcond[1]=(x418+new_r11);
evalcond[2]=(((sj3*x417))+new_r21);
evalcond[3]=(new_r01+((cj3*x417)));
evalcond[4]=(new_r20+(((-1.0)*sj3*x419)));
evalcond[5]=((((-1.0)*cj3*x419))+new_r00);
evalcond[6]=(x417+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+((cj3*new_r00))+(((-1.0)*x419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x420=IKsin(j4);
IkReal x421=IKcos(j4);
IkReal x422=((1.0)*new_r00);
IkReal x423=((1.0)*new_r01);
IkReal x424=((1.0)*x421);
evalcond[0]=(((sj3*x420))+new_r21);
evalcond[1]=(x420+(((-1.0)*new_r10)));
evalcond[2]=(x421+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x424))+new_r20);
evalcond[4]=((((-1.0)*x423))+((cj3*x420)));
evalcond[5]=((((-1.0)*cj3*x424))+(((-1.0)*x422)));
evalcond[6]=((((-1.0)*cj3*x423))+x420+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*cj3*x422))+(((-1.0)*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x425=IKsin(j4);
IkReal x426=IKcos(j4);
IkReal x427=((1.0)*x426);
evalcond[0]=(((sj3*x425))+new_r21);
evalcond[1]=(x425+(((-1.0)*new_r00)));
evalcond[2]=(x426+(((-1.0)*new_r01)));
evalcond[3]=(((cj3*x425))+new_r11);
evalcond[4]=((((-1.0)*sj3*x427))+new_r20);
evalcond[5]=((((-1.0)*cj3*x427))+new_r10);
evalcond[6]=(x425+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x427))+((cj3*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x428=IKsin(j4);
IkReal x429=IKcos(j4);
IkReal x430=((1.0)*cj3);
IkReal x431=((1.0)*x429);
evalcond[0]=(x428+new_r00);
evalcond[1]=(x429+new_r01);
evalcond[2]=(((sj3*x428))+new_r21);
evalcond[3]=((((-1.0)*sj3*x431))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((cj3*x428)));
evalcond[5]=((((-1.0)*x429*x430))+(((-1.0)*new_r10)));
evalcond[6]=(x428+((new_r21*sj3))+(((-1.0)*new_r11*x430)));
evalcond[7]=((((-1.0)*x431))+((new_r20*sj3))+(((-1.0)*new_r10*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(sj3,-1);
if(!x433.valid){
continue;
}
IkReal x432=x433.value;
CheckValue<IkReal> x434=IKPowWithIntegerCheck(sj2,-1);
if(!x434.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x432)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x432*(x434.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x432))+IKsqr((x432*(x434.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x432), (x432*(x434.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x435=IKsin(j4);
IkReal x436=IKcos(j4);
IkReal x437=(cj2*new_r01);
IkReal x438=(new_r10*sj2);
IkReal x439=((1.0)*sj2);
IkReal x440=(cj3*sj2);
IkReal x441=(cj2*new_r00);
IkReal x442=((1.0)*x436);
IkReal x443=(cj2*x435);
evalcond[0]=(((sj3*x435))+new_r21);
evalcond[1]=((((-1.0)*sj3*x442))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x439))+x435+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x439))+x436+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+((cj3*x435))+x437);
evalcond[5]=(((x435*x440))+((cj2*x436))+new_r11);
evalcond[6]=((((-1.0)*cj3*x442))+x438+x441);
evalcond[7]=((((-1.0)*x436*x439))+((cj3*x443))+new_r01);
evalcond[8]=((((-1.0)*cj3*x436*x439))+x443+new_r10);
evalcond[9]=((((-1.0)*x435*x439))+(((-1.0)*cj2*cj3*x442))+new_r00);
evalcond[10]=(((new_r11*x440))+((cj3*x437))+x435+((new_r21*sj3)));
evalcond[11]=((((-1.0)*x442))+((new_r20*sj3))+((cj3*x438))+((cj3*x441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x445=IKPowWithIntegerCheck(sj3,-1);
if(!x445.valid){
continue;
}
IkReal x444=x445.value;
CheckValue<IkReal> x446=IKPowWithIntegerCheck(cj2,-1);
if(!x446.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x444)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x444*(x446.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x444))+IKsqr((x444*(x446.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x444), (x444*(x446.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x447=IKsin(j4);
IkReal x448=IKcos(j4);
IkReal x449=(cj2*new_r01);
IkReal x450=(new_r10*sj2);
IkReal x451=((1.0)*sj2);
IkReal x452=(cj3*sj2);
IkReal x453=(cj2*new_r00);
IkReal x454=((1.0)*x448);
IkReal x455=(cj2*x447);
evalcond[0]=(((sj3*x447))+new_r21);
evalcond[1]=((((-1.0)*sj3*x454))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x451))+x447+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x451))+x448+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+x449+((cj3*x447)));
evalcond[5]=(((x447*x452))+((cj2*x448))+new_r11);
evalcond[6]=(x453+x450+(((-1.0)*cj3*x454)));
evalcond[7]=(((cj3*x455))+new_r01+(((-1.0)*x448*x451)));
evalcond[8]=(x455+new_r10+(((-1.0)*cj3*x448*x451)));
evalcond[9]=((((-1.0)*x447*x451))+new_r00+(((-1.0)*cj2*cj3*x454)));
evalcond[10]=(((new_r11*x452))+x447+((cj3*x449))+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+((cj3*x450))+((cj3*x453))+(((-1.0)*x454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x456.value)))+(x457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x458=IKsin(j4);
IkReal x459=IKcos(j4);
IkReal x460=(cj2*new_r01);
IkReal x461=(new_r10*sj2);
IkReal x462=((1.0)*sj2);
IkReal x463=(cj3*sj2);
IkReal x464=(cj2*new_r00);
IkReal x465=((1.0)*x459);
IkReal x466=(cj2*x458);
evalcond[0]=(((sj3*x458))+new_r21);
evalcond[1]=((((-1.0)*sj3*x465))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x462))+x458+((cj2*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x462))+x459+((cj2*new_r11)));
evalcond[4]=(((new_r11*sj2))+((cj3*x458))+x460);
evalcond[5]=(((cj2*x459))+new_r11+((x458*x463)));
evalcond[6]=(x461+x464+(((-1.0)*cj3*x465)));
evalcond[7]=((((-1.0)*x459*x462))+((cj3*x466))+new_r01);
evalcond[8]=((((-1.0)*cj3*x459*x462))+x466+new_r10);
evalcond[9]=((((-1.0)*x458*x462))+new_r00+(((-1.0)*cj2*cj3*x465)));
evalcond[10]=(((new_r11*x463))+((cj3*x460))+x458+((new_r21*sj3)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x465))+((cj3*x461))+((cj3*x464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x467=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x467.valid){
continue;
}
CheckValue<IkReal> x468 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x467.value)))+(x468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(new_r21+((sj3*(IKsin(j4)))));
evalcond[1]=((((-1.0)*sj3*(IKcos(j4))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
j2eval[0]=sj3;
j2eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=new_r00;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x469=((1.0)*sj4);
IkReal x470=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x470;
j2eval[1]=((IKabs((((new_r01*sj4))+(((-1.0)*new_r10*x469)))))+(IKabs(((((-1.0)*new_r11*x469))+(((-1.0)*new_r00*x469))))));
j2eval[2]=IKsign(x470);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x471=((1.0)*new_r11);
IkReal x472=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x472;
j2eval[1]=((IKabs(((((-1.0)*sj4*x471))+((cj4*new_r01)))))+(IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x471))))));
j2eval[2]=IKsign(x472);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x473=(((cj4*new_r01))+((new_r11*sj4)));
j2eval[0]=x473;
j2eval[1]=IKsign(x473);
j2eval[2]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj4*cj4))))+(IKabs(((((-1.0)*cj4*sj4))+(((-1.0)*new_r01*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x475 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x475)==0){
continue;
}
IkReal x474=pow(x475,-0.5);
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
IkReal gconst50=((-1.0)*(x476.value));
IkReal gconst51=((-1.0)*new_r01*x474);
IkReal gconst52=(new_r11*x474);
CheckValue<IkReal> x477 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x477.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x480 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x480.valid){
continue;
}
IkReal x478=((-1.0)*(x480.value));
IkReal x479=x474;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x478;
IkReal gconst50=x478;
IkReal gconst51=((-1.0)*new_r01*x479);
IkReal gconst52=(new_r11*x479);
IkReal x481=new_r01*new_r01;
IkReal x482=(new_r00*new_r01);
IkReal x483=(((new_r10*new_r11))+x482);
IkReal x484=x474;
IkReal x485=(new_r01*x484);
j2eval[0]=x483;
j2eval[1]=((IKabs((((new_r10*x485))+(((-1.0)*x481*x484)))))+(IKabs((((new_r11*x485))+((x482*x484))))));
j2eval[2]=IKsign(x483);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x488 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x488.valid){
continue;
}
IkReal x486=((-1.0)*(x488.value));
IkReal x487=x474;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x486;
IkReal gconst50=x486;
IkReal gconst51=((-1.0)*new_r01*x487);
IkReal gconst52=(new_r11*x487);
IkReal x489=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x489;
j2eval[1]=IKsign(x489);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x492 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x492.valid){
continue;
}
IkReal x490=((-1.0)*(x492.value));
IkReal x491=x474;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x490;
IkReal gconst50=x490;
IkReal gconst51=((-1.0)*new_r01*x491);
IkReal gconst52=(new_r11*x491);
IkReal x493=new_r01*new_r01;
IkReal x494=new_r11*new_r11;
IkReal x495=((1.0)*x493);
CheckValue<IkReal> x501=IKPowWithIntegerCheck((x493+x494),-1);
if(!x501.valid){
continue;
}
IkReal x496=x501.value;
CheckValue<IkReal> x502=IKPowWithIntegerCheck(((((-1.0)*x495))+(((-1.0)*x494))),-1);
if(!x502.valid){
continue;
}
IkReal x497=x502.value;
IkReal x498=((1.0)*x497);
IkReal x499=(new_r11*x498);
IkReal x500=(new_r01*x498);
j2eval[0]=((IKabs(((((-1.0)*new_r01*x499))+(((-1.0)*new_r01*x499*(new_r11*new_r11)))+(((-1.0)*x499*(new_r01*new_r01*new_r01))))))+(IKabs(((((-1.0)*x495*x496))+((x496*(x494*x494)))+((x493*x494*x496))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
IkReal x503=((-1.0)*(x504.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x503;
new_r11=0;
new_r00=0;
IkReal gconst50=x503;
IkReal x505 = new_r01*new_r01;
if(IKabs(x505)==0){
continue;
}
IkReal gconst51=((-1.0)*new_r01*(pow(x505,-0.5)));
IkReal gconst52=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x507 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x507.valid){
continue;
}
IkReal x506=((-1.0)*(x507.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x506;
new_r11=0;
new_r00=0;
IkReal gconst50=x506;
IkReal x508 = new_r01*new_r01;
if(IKabs(x508)==0){
continue;
}
IkReal gconst51=((-1.0)*new_r01*(pow(x508,-0.5)));
IkReal gconst52=0;
j2eval[0]=new_r01;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x509=IKPowWithIntegerCheck(gconst51,-1);
if(!x509.valid){
continue;
}
cj2array[0]=((-1.0)*new_r01*(x509.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x510=IKsin(j2);
IkReal x511=IKcos(j2);
evalcond[0]=(gconst51*x510);
evalcond[1]=(new_r10*x510);
evalcond[2]=((-1.0)*new_r01*x510);
evalcond[3]=(((new_r10*x511))+gconst51);
evalcond[4]=(((new_r01*x511))+gconst51);
evalcond[5]=(((gconst51*x511))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x512=IKPowWithIntegerCheck(new_r01,-1);
if(!x512.valid){
continue;
}
cj2array[0]=((-1.0)*gconst51*(x512.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x513=IKsin(j2);
IkReal x514=IKcos(j2);
IkReal x515=(gconst51*x514);
evalcond[0]=(gconst51*x513);
evalcond[1]=(new_r10*x513);
evalcond[2]=((-1.0)*new_r01*x513);
evalcond[3]=(((new_r10*x514))+gconst51);
evalcond[4]=(x515+new_r01);
evalcond[5]=(x515+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x516=IKPowWithIntegerCheck(new_r10,-1);
if(!x516.valid){
continue;
}
cj2array[0]=((-1.0)*gconst51*(x516.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x517=IKsin(j2);
IkReal x518=IKcos(j2);
IkReal x519=(gconst51*x518);
evalcond[0]=(gconst51*x517);
evalcond[1]=(new_r10*x517);
evalcond[2]=((-1.0)*new_r01*x517);
evalcond[3]=(((new_r01*x518))+gconst51);
evalcond[4]=(x519+new_r01);
evalcond[5]=(x519+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst51;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x521 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x521.valid){
continue;
}
IkReal x520=((-1.0)*(x521.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x520;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x520;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=-1.0;
j2eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j2eval[2]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x523 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x523.valid){
continue;
}
IkReal x522=((-1.0)*(x523.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x522;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x522;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=-1.0;
j2eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j2eval[2]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
IkReal x524=((-1.0)*(x525.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x524;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst50=x524;
IkReal gconst51=((-1.0)*new_r01);
IkReal gconst52=new_r11;
j2eval[0]=1.0;
j2eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j2eval[2]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x526=((1.0)*new_r11);
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal(((((-1.0)*gconst51*x526))+((gconst52*new_r01)))),IkReal(((((-1.0)*gconst51*new_r01))+(((-1.0)*gconst52*x526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
CheckValue<IkReal> x528=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x528.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x527.value)+(((1.5707963267949)*(x528.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x529=IKsin(j2);
IkReal x530=IKcos(j2);
IkReal x531=(gconst51*x530);
IkReal x532=((1.0)*x529);
IkReal x533=(gconst52*x530);
IkReal x534=(gconst52*x532);
evalcond[0]=(((new_r01*x530))+gconst51+((new_r11*x529)));
evalcond[1]=(x533+new_r11+((gconst51*x529)));
evalcond[2]=((((-1.0)*x534))+x531);
evalcond[3]=(gconst52+((new_r11*x530))+(((-1.0)*new_r01*x532)));
evalcond[4]=((((-1.0)*x534))+x531+new_r01);
evalcond[5]=((((-1.0)*gconst51*x532))+(((-1.0)*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x535 = IKatan2WithCheck(IkReal((gconst51*new_r11)),IkReal((gconst52*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x535.valid){
continue;
}
CheckValue<IkReal> x536=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst51*gconst51)))+(((-1.0)*(gconst52*gconst52))))),-1);
if(!x536.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x535.value)+(((1.5707963267949)*(x536.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x537=IKsin(j2);
IkReal x538=IKcos(j2);
IkReal x539=(gconst51*x538);
IkReal x540=((1.0)*x537);
IkReal x541=(gconst52*x538);
IkReal x542=(gconst52*x540);
evalcond[0]=(((new_r01*x538))+gconst51+((new_r11*x537)));
evalcond[1]=(x541+new_r11+((gconst51*x537)));
evalcond[2]=((((-1.0)*x542))+x539);
evalcond[3]=(gconst52+((new_r11*x538))+(((-1.0)*new_r01*x540)));
evalcond[4]=((((-1.0)*x542))+x539+new_r01);
evalcond[5]=((((-1.0)*gconst51*x540))+(((-1.0)*x541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign((((gconst51*new_r01))+(((-1.0)*gconst52*new_r11)))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal((gconst51*gconst52)),IkReal(((-1.0)*(gconst51*gconst51))),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x545=IKsin(j2);
IkReal x546=IKcos(j2);
IkReal x547=(gconst51*x546);
IkReal x548=((1.0)*x545);
IkReal x549=(gconst52*x546);
IkReal x550=(gconst52*x548);
evalcond[0]=(gconst51+((new_r11*x545))+((new_r01*x546)));
evalcond[1]=(x549+new_r11+((gconst51*x545)));
evalcond[2]=((((-1.0)*x550))+x547);
evalcond[3]=(gconst52+((new_r11*x546))+(((-1.0)*new_r01*x548)));
evalcond[4]=((((-1.0)*x550))+x547+new_r01);
evalcond[5]=((((-1.0)*gconst51*x548))+(((-1.0)*x549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(gconst52,-1);
if(!x551.valid){
continue;
}
cj2array[0]=(new_r00*(x551.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x552=IKsin(j2);
IkReal x553=IKcos(j2);
IkReal x554=((-1.0)*x552);
evalcond[0]=(new_r11*x552);
evalcond[1]=(new_r00*x554);
evalcond[2]=(gconst52*x554);
evalcond[3]=(((new_r11*x553))+gconst52);
evalcond[4]=(((gconst52*x553))+new_r11);
evalcond[5]=((((-1.0)*gconst52))+((new_r00*x553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x556 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x556.valid){
continue;
}
IkReal x555=((-1.0)*(x556.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x555;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x555;
IkReal gconst51=0;
IkReal x557 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x557)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x557,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x559 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x559.valid){
continue;
}
IkReal x558=((-1.0)*(x559.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x558;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x558;
IkReal gconst51=0;
IkReal x560 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x560)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x560,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
IkReal x561=((-1.0)*(x562.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x561;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst50=x561;
IkReal gconst51=0;
IkReal x563 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x563)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x563,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x564=IKPowWithIntegerCheck(new_r10,-1);
if(!x564.valid){
continue;
}
CheckValue<IkReal> x565=IKPowWithIntegerCheck(new_r11,-1);
if(!x565.valid){
continue;
}
if( IKabs((gconst52*(x564.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x565.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst52*(x564.value)))+IKsqr(((-1.0)*gconst52*(x565.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst52*(x564.value)), ((-1.0)*gconst52*(x565.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x566=IKsin(j2);
IkReal x567=IKcos(j2);
IkReal x568=((1.0)*gconst52);
IkReal x569=(gconst52*x567);
evalcond[0]=(new_r10*x567);
evalcond[1]=(new_r11*x566);
evalcond[2]=((-1.0)*gconst52*x566);
evalcond[3]=((-1.0)*x569);
evalcond[4]=(gconst52+((new_r11*x567)));
evalcond[5]=(x569+new_r11);
evalcond[6]=((((-1.0)*x566*x568))+new_r10);
evalcond[7]=(((new_r10*x566))+(((-1.0)*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x570=IKPowWithIntegerCheck(gconst52,-1);
if(!x570.valid){
continue;
}
CheckValue<IkReal> x571=IKPowWithIntegerCheck(new_r11,-1);
if(!x571.valid){
continue;
}
if( IKabs((new_r10*(x570.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x571.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x570.value)))+IKsqr(((-1.0)*gconst52*(x571.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x570.value)), ((-1.0)*gconst52*(x571.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x572=IKsin(j2);
IkReal x573=IKcos(j2);
IkReal x574=((1.0)*gconst52);
IkReal x575=(gconst52*x573);
evalcond[0]=(new_r10*x573);
evalcond[1]=(new_r11*x572);
evalcond[2]=((-1.0)*gconst52*x572);
evalcond[3]=((-1.0)*x575);
evalcond[4]=(((new_r11*x573))+gconst52);
evalcond[5]=(x575+new_r11);
evalcond[6]=(new_r10+(((-1.0)*x572*x574)));
evalcond[7]=(((new_r10*x572))+(((-1.0)*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x576=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x576.valid){
continue;
}
CheckValue<IkReal> x577 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x577.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x576.value)))+(x577.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x578=IKsin(j2);
IkReal x579=IKcos(j2);
IkReal x580=((1.0)*gconst52);
IkReal x581=(gconst52*x579);
evalcond[0]=(new_r10*x579);
evalcond[1]=(new_r11*x578);
evalcond[2]=((-1.0)*gconst52*x578);
evalcond[3]=((-1.0)*x581);
evalcond[4]=(((new_r11*x579))+gconst52);
evalcond[5]=(x581+new_r11);
evalcond[6]=((((-1.0)*x578*x580))+new_r10);
evalcond[7]=(((new_r10*x578))+(((-1.0)*x580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
IkReal x582=((-1.0)*(x583.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x582;
new_r01=0;
IkReal gconst50=x582;
IkReal gconst51=0;
IkReal x584 = new_r11*new_r11;
if(IKabs(x584)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x584,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
IkReal x585=((-1.0)*(x586.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x585;
new_r01=0;
IkReal gconst50=x585;
IkReal gconst51=0;
IkReal x587 = new_r11*new_r11;
if(IKabs(x587)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x587,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
IkReal x588=((-1.0)*(x589.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst51;
cj4=gconst52;
j4=x588;
new_r01=0;
IkReal gconst50=x588;
IkReal gconst51=0;
IkReal x590 = new_r11*new_r11;
if(IKabs(x590)==0){
continue;
}
IkReal gconst52=(new_r11*(pow(x590,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x591=IKPowWithIntegerCheck(gconst52,-1);
if(!x591.valid){
continue;
}
CheckValue<IkReal> x592=IKPowWithIntegerCheck(new_r11,-1);
if(!x592.valid){
continue;
}
if( IKabs((new_r10*(x591.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst52*(x592.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x591.value)))+IKsqr(((-1.0)*gconst52*(x592.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x591.value)), ((-1.0)*gconst52*(x592.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x593=IKsin(j2);
IkReal x594=IKcos(j2);
IkReal x595=((1.0)*x593);
IkReal x596=(gconst52*x594);
evalcond[0]=(new_r11*x593);
evalcond[1]=((-1.0)*gconst52*x593);
evalcond[2]=(((new_r11*x594))+gconst52);
evalcond[3]=(x596+new_r11);
evalcond[4]=((((-1.0)*gconst52*x595))+new_r10);
evalcond[5]=((((-1.0)*x596))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x595))+((new_r10*x594)));
evalcond[7]=((((-1.0)*gconst52))+((new_r10*x593))+((new_r00*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x597.valid){
continue;
}
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x597.value)))+(x598.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x599=IKsin(j2);
IkReal x600=IKcos(j2);
IkReal x601=((1.0)*x599);
IkReal x602=(gconst52*x600);
evalcond[0]=(new_r11*x599);
evalcond[1]=((-1.0)*gconst52*x599);
evalcond[2]=(gconst52+((new_r11*x600)));
evalcond[3]=(x602+new_r11);
evalcond[4]=(new_r10+(((-1.0)*gconst52*x601)));
evalcond[5]=((((-1.0)*x602))+new_r00);
evalcond[6]=(((new_r10*x600))+(((-1.0)*new_r00*x601)));
evalcond[7]=((((-1.0)*gconst52))+((new_r10*x599))+((new_r00*x600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x603=IKPowWithIntegerCheck(IKsign(gconst52),-1);
if(!x603.valid){
continue;
}
CheckValue<IkReal> x604 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x604.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x603.value)))+(x604.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x605=IKsin(j2);
IkReal x606=IKcos(j2);
IkReal x607=((1.0)*x605);
IkReal x608=(gconst52*x606);
evalcond[0]=(new_r11*x605);
evalcond[1]=((-1.0)*gconst52*x605);
evalcond[2]=(gconst52+((new_r11*x606)));
evalcond[3]=(x608+new_r11);
evalcond[4]=(new_r10+(((-1.0)*gconst52*x607)));
evalcond[5]=((((-1.0)*x608))+new_r00);
evalcond[6]=(((new_r10*x606))+(((-1.0)*new_r00*x607)));
evalcond[7]=((((-1.0)*gconst52))+((new_r10*x605))+((new_r00*x606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x609=((1.0)*new_r11);
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign((((gconst51*new_r01))+(((-1.0)*gconst52*x609)))),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal((((gconst51*gconst52))+(((-1.0)*new_r01*x609)))),IkReal(((((-1.0)*(gconst51*gconst51)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x610.value)))+(x611.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x612=IKsin(j2);
IkReal x613=IKcos(j2);
IkReal x614=(gconst51*x613);
IkReal x615=((1.0)*x612);
IkReal x616=(gconst52*x613);
IkReal x617=(gconst52*x615);
evalcond[0]=(gconst51+((new_r11*x612))+((new_r01*x613)));
evalcond[1]=(((gconst51*x612))+x616+new_r11);
evalcond[2]=(gconst51+((new_r10*x613))+(((-1.0)*new_r00*x615)));
evalcond[3]=(gconst52+((new_r11*x613))+(((-1.0)*new_r01*x615)));
evalcond[4]=((((-1.0)*x617))+x614+new_r01);
evalcond[5]=((((-1.0)*x617))+x614+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r10*x612))+((new_r00*x613)));
evalcond[7]=((((-1.0)*x616))+(((-1.0)*gconst51*x615))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x618=((1.0)*new_r11);
CheckValue<IkReal> x619=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x619.valid){
continue;
}
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal((((gconst52*new_r01))+(((-1.0)*gconst51*x618)))),IkReal(((((-1.0)*gconst52*x618))+(((-1.0)*gconst51*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x619.value)))+(x620.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x621=IKsin(j2);
IkReal x622=IKcos(j2);
IkReal x623=(gconst51*x622);
IkReal x624=((1.0)*x621);
IkReal x625=(gconst52*x622);
IkReal x626=(gconst52*x624);
evalcond[0]=(gconst51+((new_r01*x622))+((new_r11*x621)));
evalcond[1]=(x625+new_r11+((gconst51*x621)));
evalcond[2]=((((-1.0)*new_r00*x624))+gconst51+((new_r10*x622)));
evalcond[3]=((((-1.0)*new_r01*x624))+gconst52+((new_r11*x622)));
evalcond[4]=((((-1.0)*x626))+x623+new_r01);
evalcond[5]=((((-1.0)*x626))+x623+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r00*x622))+((new_r10*x621)));
evalcond[7]=((((-1.0)*gconst51*x624))+(((-1.0)*x625))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x627=((1.0)*gconst51);
CheckValue<IkReal> x628 = IKatan2WithCheck(IkReal((((gconst51*new_r01))+(((-1.0)*new_r10*x627)))),IkReal(((((-1.0)*new_r00*x627))+(((-1.0)*new_r11*x627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x629.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x628.value)+(((1.5707963267949)*(x629.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x630=IKsin(j2);
IkReal x631=IKcos(j2);
IkReal x632=(gconst51*x631);
IkReal x633=((1.0)*x630);
IkReal x634=(gconst52*x631);
IkReal x635=(gconst52*x633);
evalcond[0]=(gconst51+((new_r01*x631))+((new_r11*x630)));
evalcond[1]=(x634+((gconst51*x630))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x633))+gconst51+((new_r10*x631)));
evalcond[3]=((((-1.0)*new_r01*x633))+gconst52+((new_r11*x631)));
evalcond[4]=((((-1.0)*x635))+x632+new_r01);
evalcond[5]=((((-1.0)*x635))+x632+new_r10);
evalcond[6]=((((-1.0)*gconst52))+((new_r00*x631))+((new_r10*x630)));
evalcond[7]=((((-1.0)*gconst51*x633))+(((-1.0)*x634))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x637 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x637)==0){
continue;
}
IkReal x636=pow(x637,-0.5);
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
IkReal gconst53=((3.14159265358979)+(((-1.0)*(x638.value))));
IkReal gconst54=((1.0)*new_r01*x636);
IkReal gconst55=((-1.0)*new_r11*x636);
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x639.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
IkReal x640=((1.0)*(x642.value));
IkReal x641=x636;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x640)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x640)));
IkReal gconst54=((1.0)*new_r01*x641);
IkReal gconst55=((-1.0)*new_r11*x641);
IkReal x643=new_r01*new_r01;
IkReal x644=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x645=x636;
IkReal x646=((1.0)*new_r01*x645);
j2eval[0]=x644;
j2eval[1]=IKsign(x644);
j2eval[2]=((IKabs((((x643*x645))+(((-1.0)*new_r10*x646)))))+(IKabs(((((-1.0)*new_r11*x646))+(((-1.0)*new_r00*x646))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
IkReal x647=((1.0)*(x649.value));
IkReal x648=x636;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x647)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x647)));
IkReal gconst54=((1.0)*new_r01*x648);
IkReal gconst55=((-1.0)*new_r11*x648);
IkReal x650=((new_r01*new_r01)+(new_r11*new_r11));
j2eval[0]=x650;
j2eval[1]=IKsign(x650);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x653 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x653.valid){
continue;
}
IkReal x651=((1.0)*(x653.value));
IkReal x652=x636;
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x651)));
IkReal gconst53=((3.14159265358979)+(((-1.0)*x651)));
IkReal gconst54=((1.0)*new_r01*x652);
IkReal gconst55=((-1.0)*new_r11*x652);
IkReal x654=new_r01*new_r01;
IkReal x655=new_r11*new_r11;
IkReal x656=((1.0)*x654);
CheckValue<IkReal> x662=IKPowWithIntegerCheck((x654+x655),-1);
if(!x662.valid){
continue;
}
IkReal x657=x662.value;
CheckValue<IkReal> x663=IKPowWithIntegerCheck(((((-1.0)*x655))+(((-1.0)*x656))),-1);
if(!x663.valid){
continue;
}
IkReal x658=x663.value;
IkReal x659=((1.0)*x658);
IkReal x660=(new_r11*x659);
IkReal x661=(new_r01*x659);
j2eval[0]=((IKabs((((x657*(x655*x655)))+(((-1.0)*x656*x657))+((x654*x655*x657)))))+(IKabs(((((-1.0)*x660*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x660*(new_r11*new_r11)))+(((-1.0)*new_r01*x660))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x665 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x665.valid){
continue;
}
IkReal x664=((1.0)*(x665.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x664)));
new_r11=0;
new_r00=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x664)));
IkReal x666 = new_r01*new_r01;
if(IKabs(x666)==0){
continue;
}
IkReal gconst54=((1.0)*new_r01*(pow(x666,-0.5)));
IkReal gconst55=0;
j2eval[0]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
IkReal x667=((1.0)*(x668.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x667)));
new_r11=0;
new_r00=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x667)));
IkReal x669 = new_r01*new_r01;
if(IKabs(x669)==0){
continue;
}
IkReal gconst54=((1.0)*new_r01*(pow(x669,-0.5)));
IkReal gconst55=0;
j2eval[0]=new_r01;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x670=IKPowWithIntegerCheck(gconst54,-1);
if(!x670.valid){
continue;
}
cj2array[0]=((-1.0)*new_r01*(x670.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x671=IKsin(j2);
IkReal x672=IKcos(j2);
evalcond[0]=(gconst54*x671);
evalcond[1]=(new_r10*x671);
evalcond[2]=((-1.0)*new_r01*x671);
evalcond[3]=(((new_r10*x672))+gconst54);
evalcond[4]=(((new_r01*x672))+gconst54);
evalcond[5]=(((gconst54*x672))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x673=IKPowWithIntegerCheck(new_r01,-1);
if(!x673.valid){
continue;
}
cj2array[0]=((-1.0)*gconst54*(x673.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x674=IKsin(j2);
IkReal x675=IKcos(j2);
IkReal x676=(gconst54*x675);
evalcond[0]=(gconst54*x674);
evalcond[1]=(new_r10*x674);
evalcond[2]=((-1.0)*new_r01*x674);
evalcond[3]=(((new_r10*x675))+gconst54);
evalcond[4]=(x676+new_r01);
evalcond[5]=(x676+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x677=IKPowWithIntegerCheck(new_r10,-1);
if(!x677.valid){
continue;
}
cj2array[0]=((-1.0)*gconst54*(x677.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x678=IKsin(j2);
IkReal x679=IKcos(j2);
IkReal x680=(gconst54*x679);
evalcond[0]=(gconst54*x678);
evalcond[1]=(new_r10*x678);
evalcond[2]=((-1.0)*new_r01*x678);
evalcond[3]=(((new_r01*x679))+gconst54);
evalcond[4]=(x680+new_r01);
evalcond[5]=(x680+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst54;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
IkReal x681=((1.0)*(x682.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x681)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x681)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=1.0;
j2eval[2]=new_r01;
j2eval[3]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x684 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x684.valid){
continue;
}
IkReal x683=((1.0)*(x684.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x683)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x683)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=-1.0;
j2eval[1]=-1.0;
j2eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x686 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x686.valid){
continue;
}
IkReal x685=((1.0)*(x686.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x685)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x685)));
IkReal gconst54=((1.0)*new_r01);
IkReal gconst55=((-1.0)*new_r11);
j2eval[0]=1.0;
j2eval[1]=1.0;
j2eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x687=((1.0)*gconst54);
CheckValue<IkReal> x688=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x688.valid){
continue;
}
CheckValue<IkReal> x689 = IKatan2WithCheck(IkReal((((gconst55*new_r01))+(((-1.0)*new_r11*x687)))),IkReal(((((-1.0)*new_r01*x687))+(((-1.0)*gconst55*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x689.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x688.value)))+(x689.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x690=IKcos(j2);
IkReal x691=IKsin(j2);
IkReal x692=((1.0)*gconst55);
IkReal x693=(gconst54*x690);
IkReal x694=((1.0)*x691);
IkReal x695=(x691*x692);
evalcond[0]=(gconst54+((new_r11*x691))+((new_r01*x690)));
evalcond[1]=(((gconst55*x690))+((gconst54*x691))+new_r11);
evalcond[2]=(x693+(((-1.0)*x695)));
evalcond[3]=((((-1.0)*new_r01*x694))+gconst55+((new_r11*x690)));
evalcond[4]=(x693+(((-1.0)*x695))+new_r01);
evalcond[5]=((((-1.0)*gconst54*x694))+(((-1.0)*x690*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst55*gconst55)))+(((-1.0)*(gconst54*gconst54))))),-1);
if(!x696.valid){
continue;
}
CheckValue<IkReal> x697 = IKatan2WithCheck(IkReal((gconst54*new_r11)),IkReal((gconst55*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x697.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x696.value)))+(x697.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x698=IKcos(j2);
IkReal x699=IKsin(j2);
IkReal x700=((1.0)*gconst55);
IkReal x701=(gconst54*x698);
IkReal x702=((1.0)*x699);
IkReal x703=(x699*x700);
evalcond[0]=(gconst54+((new_r11*x699))+((new_r01*x698)));
evalcond[1]=(((gconst55*x698))+((gconst54*x699))+new_r11);
evalcond[2]=((((-1.0)*x703))+x701);
evalcond[3]=(gconst55+((new_r11*x698))+(((-1.0)*new_r01*x702)));
evalcond[4]=((((-1.0)*x703))+x701+new_r01);
evalcond[5]=((((-1.0)*gconst54*x702))+(((-1.0)*x698*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal((gconst54*gconst55)),IkReal(((-1.0)*(gconst54*gconst54))),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
CheckValue<IkReal> x705=IKPowWithIntegerCheck(IKsign((((gconst54*new_r01))+(((-1.0)*gconst55*new_r11)))),-1);
if(!x705.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x704.value)+(((1.5707963267949)*(x705.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x706=IKcos(j2);
IkReal x707=IKsin(j2);
IkReal x708=((1.0)*gconst55);
IkReal x709=(gconst54*x706);
IkReal x710=((1.0)*x707);
IkReal x711=(x707*x708);
evalcond[0]=(((new_r01*x706))+gconst54+((new_r11*x707)));
evalcond[1]=(((gconst55*x706))+((gconst54*x707))+new_r11);
evalcond[2]=((((-1.0)*x711))+x709);
evalcond[3]=(gconst55+((new_r11*x706))+(((-1.0)*new_r01*x710)));
evalcond[4]=((((-1.0)*x711))+x709+new_r01);
evalcond[5]=((((-1.0)*x706*x708))+(((-1.0)*gconst54*x710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(gconst55,-1);
if(!x712.valid){
continue;
}
cj2array[0]=(new_r00*(x712.value));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x713=IKsin(j2);
IkReal x714=IKcos(j2);
IkReal x715=((-1.0)*x713);
evalcond[0]=(new_r11*x713);
evalcond[1]=(new_r00*x715);
evalcond[2]=(gconst55*x715);
evalcond[3]=(gconst55+((new_r11*x714)));
evalcond[4]=(((gconst55*x714))+new_r11);
evalcond[5]=((((-1.0)*gconst55))+((new_r00*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x717 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x717.valid){
continue;
}
IkReal x716=((1.0)*(x717.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x716)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x716)));
IkReal gconst54=0;
IkReal x718 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x718)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x718,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x720 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x720.valid){
continue;
}
IkReal x719=((1.0)*(x720.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x719)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x719)));
IkReal gconst54=0;
IkReal x721 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x721)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x721,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x723 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x723.valid){
continue;
}
IkReal x722=((1.0)*(x723.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x722)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x722)));
IkReal gconst54=0;
IkReal x724 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x724)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x724,-0.5)));
j2eval[0]=new_r10;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x725=IKPowWithIntegerCheck(new_r10,-1);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726=IKPowWithIntegerCheck(new_r11,-1);
if(!x726.valid){
continue;
}
if( IKabs((gconst55*(x725.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x726.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst55*(x725.value)))+IKsqr(((-1.0)*gconst55*(x726.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((gconst55*(x725.value)), ((-1.0)*gconst55*(x726.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x727=IKsin(j2);
IkReal x728=IKcos(j2);
IkReal x729=((1.0)*gconst55);
IkReal x730=((-1.0)*gconst55);
evalcond[0]=(new_r10*x728);
evalcond[1]=(new_r11*x727);
evalcond[2]=(x727*x730);
evalcond[3]=(x728*x730);
evalcond[4]=(gconst55+((new_r11*x728)));
evalcond[5]=(((gconst55*x728))+new_r11);
evalcond[6]=((((-1.0)*x727*x729))+new_r10);
evalcond[7]=((((-1.0)*x729))+((new_r10*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(gconst55,-1);
if(!x731.valid){
continue;
}
CheckValue<IkReal> x732=IKPowWithIntegerCheck(new_r11,-1);
if(!x732.valid){
continue;
}
if( IKabs((new_r10*(x731.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x732.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x731.value)))+IKsqr(((-1.0)*gconst55*(x732.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x731.value)), ((-1.0)*gconst55*(x732.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x733=IKsin(j2);
IkReal x734=IKcos(j2);
IkReal x735=((1.0)*gconst55);
IkReal x736=((-1.0)*gconst55);
evalcond[0]=(new_r10*x734);
evalcond[1]=(new_r11*x733);
evalcond[2]=(x733*x736);
evalcond[3]=(x734*x736);
evalcond[4]=(gconst55+((new_r11*x734)));
evalcond[5]=(((gconst55*x734))+new_r11);
evalcond[6]=((((-1.0)*x733*x735))+new_r10);
evalcond[7]=((((-1.0)*x735))+((new_r10*x733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
CheckValue<IkReal> x738=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x738.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x737.value)+(((1.5707963267949)*(x738.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x739=IKsin(j2);
IkReal x740=IKcos(j2);
IkReal x741=((1.0)*gconst55);
IkReal x742=((-1.0)*gconst55);
evalcond[0]=(new_r10*x740);
evalcond[1]=(new_r11*x739);
evalcond[2]=(x739*x742);
evalcond[3]=(x740*x742);
evalcond[4]=(gconst55+((new_r11*x740)));
evalcond[5]=(new_r11+((gconst55*x740)));
evalcond[6]=((((-1.0)*x739*x741))+new_r10);
evalcond[7]=((((-1.0)*x741))+((new_r10*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
IkReal x743=((1.0)*(x744.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x743)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x743)));
IkReal gconst54=0;
IkReal x745 = new_r11*new_r11;
if(IKabs(x745)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x745,-0.5)));
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x747 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x747.valid){
continue;
}
IkReal x746=((1.0)*(x747.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x746)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x746)));
IkReal gconst54=0;
IkReal x748 = new_r11*new_r11;
if(IKabs(x748)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x748,-0.5)));
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
IkReal x749=((1.0)*(x750.value));
sj3=0;
cj3=1.0;
j3=0;
sj4=gconst54;
cj4=gconst55;
j4=((3.14159265)+(((-1.0)*x749)));
new_r01=0;
IkReal gconst53=((3.14159265358979)+(((-1.0)*x749)));
IkReal gconst54=0;
IkReal x751 = new_r11*new_r11;
if(IKabs(x751)==0){
continue;
}
IkReal gconst55=((-1.0)*new_r11*(pow(x751,-0.5)));
j2eval[0]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x752=IKPowWithIntegerCheck(gconst55,-1);
if(!x752.valid){
continue;
}
CheckValue<IkReal> x753=IKPowWithIntegerCheck(new_r11,-1);
if(!x753.valid){
continue;
}
if( IKabs((new_r10*(x752.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst55*(x753.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x752.value)))+IKsqr(((-1.0)*gconst55*(x753.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((new_r10*(x752.value)), ((-1.0)*gconst55*(x753.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x754=IKsin(j2);
IkReal x755=IKcos(j2);
IkReal x756=((1.0)*gconst55);
evalcond[0]=(new_r11*x754);
evalcond[1]=((-1.0)*gconst55*x754);
evalcond[2]=(gconst55+((new_r11*x755)));
evalcond[3]=(((gconst55*x755))+new_r11);
evalcond[4]=((((-1.0)*x754*x756))+new_r10);
evalcond[5]=((((-1.0)*x755*x756))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x754))+((new_r10*x755)));
evalcond[7]=(((new_r00*x755))+((new_r10*x754))+(((-1.0)*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
CheckValue<IkReal> x758=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x758.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x757.value)+(((1.5707963267949)*(x758.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x759=IKsin(j2);
IkReal x760=IKcos(j2);
IkReal x761=((1.0)*gconst55);
evalcond[0]=(new_r11*x759);
evalcond[1]=((-1.0)*gconst55*x759);
evalcond[2]=(((new_r11*x760))+gconst55);
evalcond[3]=(((gconst55*x760))+new_r11);
evalcond[4]=(new_r10+(((-1.0)*x759*x761)));
evalcond[5]=(new_r00+(((-1.0)*x760*x761)));
evalcond[6]=(((new_r10*x760))+(((-1.0)*new_r00*x759)));
evalcond[7]=((((-1.0)*x761))+((new_r00*x760))+((new_r10*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x762=IKPowWithIntegerCheck(IKsign(gconst55),-1);
if(!x762.valid){
continue;
}
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x762.value)))+(x763.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x764=IKsin(j2);
IkReal x765=IKcos(j2);
IkReal x766=((1.0)*gconst55);
evalcond[0]=(new_r11*x764);
evalcond[1]=((-1.0)*gconst55*x764);
evalcond[2]=(((new_r11*x765))+gconst55);
evalcond[3]=(((gconst55*x765))+new_r11);
evalcond[4]=((((-1.0)*x764*x766))+new_r10);
evalcond[5]=((((-1.0)*x765*x766))+new_r00);
evalcond[6]=(((new_r10*x765))+(((-1.0)*new_r00*x764)));
evalcond[7]=(((new_r10*x764))+(((-1.0)*x766))+((new_r00*x765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x767=((1.0)*new_r11);
CheckValue<IkReal> x768 = IKatan2WithCheck(IkReal((((gconst54*gconst55))+(((-1.0)*new_r01*x767)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst54*gconst54))))),IKFAST_ATAN2_MAGTHRESH);
if(!x768.valid){
continue;
}
CheckValue<IkReal> x769=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst55*x767))+((gconst54*new_r01)))),-1);
if(!x769.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x768.value)+(((1.5707963267949)*(x769.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x770=IKcos(j2);
IkReal x771=IKsin(j2);
IkReal x772=((1.0)*gconst55);
IkReal x773=(gconst54*x770);
IkReal x774=((1.0)*x771);
IkReal x775=(x771*x772);
evalcond[0]=(gconst54+((new_r11*x771))+((new_r01*x770)));
evalcond[1]=(((gconst54*x771))+new_r11+((gconst55*x770)));
evalcond[2]=((((-1.0)*new_r00*x774))+gconst54+((new_r10*x770)));
evalcond[3]=((((-1.0)*new_r01*x774))+gconst55+((new_r11*x770)));
evalcond[4]=(x773+(((-1.0)*x775))+new_r01);
evalcond[5]=(x773+(((-1.0)*x775))+new_r10);
evalcond[6]=(((new_r00*x770))+((new_r10*x771))+(((-1.0)*x772)));
evalcond[7]=(new_r00+(((-1.0)*x770*x772))+(((-1.0)*gconst54*x774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x776=((1.0)*gconst54);
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x776))+((gconst55*new_r01)))),IkReal(((((-1.0)*new_r01*x776))+(((-1.0)*gconst55*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x778.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x777.value)+(((1.5707963267949)*(x778.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x779=IKcos(j2);
IkReal x780=IKsin(j2);
IkReal x781=((1.0)*gconst55);
IkReal x782=(gconst54*x779);
IkReal x783=((1.0)*x780);
IkReal x784=(x780*x781);
evalcond[0]=(((new_r11*x780))+gconst54+((new_r01*x779)));
evalcond[1]=(new_r11+((gconst54*x780))+((gconst55*x779)));
evalcond[2]=(gconst54+((new_r10*x779))+(((-1.0)*new_r00*x783)));
evalcond[3]=((((-1.0)*new_r01*x783))+gconst55+((new_r11*x779)));
evalcond[4]=((((-1.0)*x784))+x782+new_r01);
evalcond[5]=((((-1.0)*x784))+x782+new_r10);
evalcond[6]=(((new_r10*x780))+(((-1.0)*x781))+((new_r00*x779)));
evalcond[7]=((((-1.0)*gconst54*x783))+new_r00+(((-1.0)*x779*x781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x785=((1.0)*gconst54);
CheckValue<IkReal> x786 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x785))+((gconst54*new_r01)))),IkReal(((((-1.0)*new_r11*x785))+(((-1.0)*new_r00*x785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x786.valid){
continue;
}
CheckValue<IkReal> x787=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x787.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x786.value)+(((1.5707963267949)*(x787.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x788=IKcos(j2);
IkReal x789=IKsin(j2);
IkReal x790=((1.0)*gconst55);
IkReal x791=(gconst54*x788);
IkReal x792=((1.0)*x789);
IkReal x793=(x789*x790);
evalcond[0]=(((new_r11*x789))+gconst54+((new_r01*x788)));
evalcond[1]=(((gconst55*x788))+new_r11+((gconst54*x789)));
evalcond[2]=(((new_r10*x788))+gconst54+(((-1.0)*new_r00*x792)));
evalcond[3]=((((-1.0)*new_r01*x792))+((new_r11*x788))+gconst55);
evalcond[4]=((((-1.0)*x793))+x791+new_r01);
evalcond[5]=((((-1.0)*x793))+x791+new_r10);
evalcond[6]=((((-1.0)*x790))+((new_r10*x789))+((new_r00*x788)));
evalcond[7]=((((-1.0)*x788*x790))+(((-1.0)*gconst54*x792))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r11=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
IkReal x794=x795.value;
j2array[0]=((-1.0)*x794);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x794)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x796=IKcos(j2);
IkReal x797=IKsin(j2);
IkReal x798=((1.0)*x797);
evalcond[0]=(x796+new_r11);
evalcond[1]=((((-1.0)*x798))+new_r01);
evalcond[2]=((((-1.0)*x798))+new_r10);
evalcond[3]=((((-1.0)*x796))+new_r00);
evalcond[4]=(((new_r11*x797))+((new_r01*x796)));
evalcond[5]=(((new_r10*x796))+(((-1.0)*new_r00*x798)));
evalcond[6]=((-1.0)+((new_r10*x797))+((new_r00*x796)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x798))+((new_r11*x796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x799=IKsin(j2);
IkReal x800=IKcos(j2);
IkReal x801=((1.0)*x799);
evalcond[0]=(x799+new_r01);
evalcond[1]=(x799+new_r10);
evalcond[2]=(new_r00+x800);
evalcond[3]=((((-1.0)*x800))+new_r11);
evalcond[4]=(((new_r11*x799))+((new_r01*x800)));
evalcond[5]=((((-1.0)*new_r00*x801))+((new_r10*x800)));
evalcond[6]=((1.0)+((new_r10*x799))+((new_r00*x800)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x801))+((new_r11*x800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r01);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r10;
j2eval[1]=((IKabs(cj4))+(IKabs(sj4)));
j2eval[2]=IKsign(new_r10);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r00=0;
j2eval[0]=new_r01;
j2eval[1]=new_r10;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x802=IKPowWithIntegerCheck(new_r01,-1);
if(!x802.valid){
continue;
}
CheckValue<IkReal> x803=IKPowWithIntegerCheck(new_r10,-1);
if(!x803.valid){
continue;
}
if( IKabs((cj4*(x802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj4*(x803.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj4*(x802.value)))+IKsqr(((-1.0)*sj4*(x803.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((cj4*(x802.value)), ((-1.0)*sj4*(x803.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x804=IKcos(j2);
IkReal x805=IKsin(j2);
IkReal x806=((1.0)*cj4);
IkReal x807=(sj4*x804);
IkReal x808=(x805*x806);
evalcond[0]=(sj4+((new_r10*x804)));
evalcond[1]=(sj4+((new_r01*x804)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x805)));
evalcond[3]=(((new_r10*x805))+(((-1.0)*x806)));
evalcond[4]=(((cj4*x804))+((sj4*x805)));
evalcond[5]=(new_r01+x807+(((-1.0)*x808)));
evalcond[6]=(new_r10+x807+(((-1.0)*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x809=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x809.valid){
continue;
}
CheckValue<IkReal> x810 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x810.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x809.value)))+(x810.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x811=IKcos(j2);
IkReal x812=IKsin(j2);
IkReal x813=((1.0)*cj4);
IkReal x814=(sj4*x811);
IkReal x815=(x812*x813);
evalcond[0]=(sj4+((new_r10*x811)));
evalcond[1]=(sj4+((new_r01*x811)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x812)));
evalcond[3]=(((new_r10*x812))+(((-1.0)*x813)));
evalcond[4]=(((sj4*x812))+((cj4*x811)));
evalcond[5]=((((-1.0)*x815))+new_r01+x814);
evalcond[6]=((((-1.0)*x815))+new_r10+x814);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x816=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x816.valid){
continue;
}
CheckValue<IkReal> x817 = IKatan2WithCheck(IkReal(cj4),IkReal(((-1.0)*sj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x817.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x816.value)))+(x817.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x818=IKcos(j2);
IkReal x819=IKsin(j2);
IkReal x820=((1.0)*cj4);
IkReal x821=(sj4*x818);
IkReal x822=(x819*x820);
evalcond[0]=(sj4+((new_r10*x818)));
evalcond[1]=(sj4+((new_r01*x818)));
evalcond[2]=(cj4+(((-1.0)*new_r01*x819)));
evalcond[3]=(((new_r10*x819))+(((-1.0)*x820)));
evalcond[4]=(((sj4*x819))+((cj4*x818)));
evalcond[5]=((((-1.0)*x822))+new_r01+x821);
evalcond[6]=((((-1.0)*x822))+new_r10+x821);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x824 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x824.valid){
continue;
}
IkReal x823=x824.value;
j2array[0]=((-1.0)*x823);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x823)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j2))))+((new_r10*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=1.0;
j3=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x826 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x826.valid){
continue;
}
IkReal x825=x826.value;
j2array[0]=((-1.0)*x825);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x825)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r11;
j2eval[1]=IKsign(new_r11);
j2eval[2]=((IKabs(cj4))+(IKabs(sj4)));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r00;
j2eval[1]=new_r11;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj3=0;
cj3=1.0;
j3=0;
new_r01=0;
new_r10=0;
j2eval[0]=new_r11;
j2eval[1]=sj4;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=new_r00;
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x827=IKsin(j2);
IkReal x828=IKcos(j2);
IkReal x829=((-1.0)*x827);
evalcond[0]=(new_r11*x827);
evalcond[1]=(new_r11+x828);
evalcond[2]=x829;
evalcond[3]=(new_r00*x829);
evalcond[4]=((1.0)+((new_r11*x828)));
evalcond[5]=((-1.0)+((new_r00*x828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=new_r11;
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x830=IKsin(j2);
IkReal x831=IKcos(j2);
evalcond[0]=x830;
evalcond[1]=(new_r11*x830);
evalcond[2]=(new_r00+x831);
evalcond[3]=((-1.0)*new_r00*x830);
evalcond[4]=((-1.0)+((new_r11*x831)));
evalcond[5]=((1.0)+((new_r00*x831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(new_r11,-1);
if(!x833.valid){
continue;
}
IkReal x832=x833.value;
CheckValue<IkReal> x834=IKPowWithIntegerCheck(sj4,-1);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(x832,-2);
if(!x835.valid){
continue;
}
if( IKabs((x832*(x834.value)*(((((-1.0)*(x835.value)))+(cj4*cj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*x832)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x832*(x834.value)*(((((-1.0)*(x835.value)))+(cj4*cj4)))))+IKsqr(((-1.0)*cj4*x832))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x832*(x834.value)*(((((-1.0)*(x835.value)))+(cj4*cj4)))), ((-1.0)*cj4*x832));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x836=IKsin(j2);
IkReal x837=IKcos(j2);
IkReal x838=((1.0)*cj4);
IkReal x839=((1.0)*x836);
evalcond[0]=(((new_r11*x837))+cj4);
evalcond[1]=(((new_r11*x836))+sj4);
evalcond[2]=(sj4+(((-1.0)*new_r00*x839)));
evalcond[3]=(((new_r00*x837))+(((-1.0)*x838)));
evalcond[4]=(((sj4*x836))+((cj4*x837))+new_r11);
evalcond[5]=(((sj4*x837))+(((-1.0)*x836*x838)));
evalcond[6]=((((-1.0)*x837*x838))+new_r00+(((-1.0)*sj4*x839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x840=IKPowWithIntegerCheck(new_r00,-1);
if(!x840.valid){
continue;
}
CheckValue<IkReal> x841=IKPowWithIntegerCheck(new_r11,-1);
if(!x841.valid){
continue;
}
if( IKabs((sj4*(x840.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj4*(x841.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj4*(x840.value)))+IKsqr(((-1.0)*cj4*(x841.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((sj4*(x840.value)), ((-1.0)*cj4*(x841.value)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x842=IKsin(j2);
IkReal x843=IKcos(j2);
IkReal x844=((1.0)*cj4);
IkReal x845=((1.0)*x842);
evalcond[0]=(cj4+((new_r11*x843)));
evalcond[1]=(sj4+((new_r11*x842)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x845)));
evalcond[3]=(((new_r00*x843))+(((-1.0)*x844)));
evalcond[4]=(((sj4*x842))+((cj4*x843))+new_r11);
evalcond[5]=(((sj4*x843))+(((-1.0)*x842*x844)));
evalcond[6]=((((-1.0)*x843*x844))+(((-1.0)*sj4*x845))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x846=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x846.valid){
continue;
}
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(((-1.0)*sj4)),IkReal(((-1.0)*cj4)),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x846.value)))+(x847.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[7];
IkReal x848=IKsin(j2);
IkReal x849=IKcos(j2);
IkReal x850=((1.0)*cj4);
IkReal x851=((1.0)*x848);
evalcond[0]=(cj4+((new_r11*x849)));
evalcond[1]=(sj4+((new_r11*x848)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x851)));
evalcond[3]=((((-1.0)*x850))+((new_r00*x849)));
evalcond[4]=(((sj4*x848))+((cj4*x849))+new_r11);
evalcond[5]=(((sj4*x849))+(((-1.0)*x848*x850)));
evalcond[6]=((((-1.0)*sj4*x851))+(((-1.0)*x849*x850))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign((((cj4*new_r01))+((new_r11*sj4)))),-1);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj4*cj4))),IkReal(((((-1.0)*cj4*sj4))+(((-1.0)*new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x852.value)))+(x853.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x854=IKsin(j2);
IkReal x855=IKcos(j2);
IkReal x856=((1.0)*cj4);
IkReal x857=(sj4*x855);
IkReal x858=((1.0)*x854);
IkReal x859=(x854*x856);
evalcond[0]=(sj4+((new_r11*x854))+((new_r01*x855)));
evalcond[1]=(new_r11+((cj4*x855))+((sj4*x854)));
evalcond[2]=(sj4+(((-1.0)*new_r00*x858))+((new_r10*x855)));
evalcond[3]=(cj4+(((-1.0)*new_r01*x858))+((new_r11*x855)));
evalcond[4]=((((-1.0)*x859))+new_r01+x857);
evalcond[5]=((((-1.0)*x859))+new_r10+x857);
evalcond[6]=((((-1.0)*x856))+((new_r10*x854))+((new_r00*x855)));
evalcond[7]=((((-1.0)*sj4*x858))+(((-1.0)*x855*x856))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x860=((1.0)*new_r11);
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal(((((-1.0)*sj4*x860))+((cj4*new_r01)))),IkReal(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x861.value)))+(x862.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x863=IKsin(j2);
IkReal x864=IKcos(j2);
IkReal x865=((1.0)*cj4);
IkReal x866=(sj4*x864);
IkReal x867=((1.0)*x863);
IkReal x868=(x863*x865);
evalcond[0]=(((new_r01*x864))+sj4+((new_r11*x863)));
evalcond[1]=(((sj4*x863))+((cj4*x864))+new_r11);
evalcond[2]=(sj4+(((-1.0)*new_r00*x867))+((new_r10*x864)));
evalcond[3]=(cj4+(((-1.0)*new_r01*x867))+((new_r11*x864)));
evalcond[4]=((((-1.0)*x868))+new_r01+x866);
evalcond[5]=((((-1.0)*x868))+new_r10+x866);
evalcond[6]=((((-1.0)*x865))+((new_r00*x864))+((new_r10*x863)));
evalcond[7]=((((-1.0)*sj4*x867))+(((-1.0)*x864*x865))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x869=((1.0)*sj4);
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal((((new_r01*sj4))+(((-1.0)*new_r10*x869)))),IkReal(((((-1.0)*new_r00*x869))+(((-1.0)*new_r11*x869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x871.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x870.value)+(((1.5707963267949)*(x871.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x872=IKsin(j2);
IkReal x873=IKcos(j2);
IkReal x874=((1.0)*cj4);
IkReal x875=(sj4*x873);
IkReal x876=((1.0)*x872);
IkReal x877=(x872*x874);
evalcond[0]=(((new_r01*x873))+sj4+((new_r11*x872)));
evalcond[1]=(((cj4*x873))+((sj4*x872))+new_r11);
evalcond[2]=(sj4+(((-1.0)*new_r00*x876))+((new_r10*x873)));
evalcond[3]=(cj4+(((-1.0)*new_r01*x876))+((new_r11*x873)));
evalcond[4]=(new_r01+x875+(((-1.0)*x877)));
evalcond[5]=(new_r10+x875+(((-1.0)*x877)));
evalcond[6]=(((new_r00*x873))+((new_r10*x872))+(((-1.0)*x874)));
evalcond[7]=((((-1.0)*sj4*x876))+(((-1.0)*x873*x874))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x878=((1.0)*new_r10);
IkReal x879=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x879;
j2eval[1]=IKsign(x879);
j2eval[2]=((IKabs(((((-1.0)*sj4*x878))+(((-1.0)*cj4*new_r00)))))+(IKabs((((new_r00*sj4))+(((-1.0)*cj4*x878))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x880=((1.0)*cj4);
IkReal x881=(((new_r10*new_r11))+((new_r00*new_r01)));
j2eval[0]=x881;
j2eval[1]=((IKabs(((((-1.0)*new_r10*x880))+(((-1.0)*new_r01*x880)))))+(IKabs((((cj4*new_r00))+(((-1.0)*new_r11*x880))))));
j2eval[2]=IKsign(x881);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x882=((1.0)*new_r10);
IkReal x883=(((cj4*new_r00))+(((-1.0)*sj4*x882)));
j2eval[0]=x883;
j2eval[1]=IKsign(x883);
j2eval[2]=((IKabs(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))))+(IKabs((((cj4*sj4))+(((-1.0)*new_r00*x882))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x886 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x886)==0){
continue;
}
IkReal x884=pow(x886,-0.5);
IkReal x885=((-1.0)*x884);
CheckValue<IkReal> x887 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x887.valid){
continue;
}
IkReal gconst56=((-1.0)*(x887.value));
IkReal gconst57=(new_r00*x885);
IkReal gconst58=(new_r10*x885);
CheckValue<IkReal> x888 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x888.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x888.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
IkReal x889=((-1.0)*(x892.value));
IkReal x890=x884;
IkReal x891=((-1.0)*x890);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x889;
IkReal gconst56=x889;
IkReal gconst57=(new_r00*x891);
IkReal gconst58=(new_r10*x891);
IkReal x893=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x893;
j2eval[1]=IKsign(x893);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x897 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x897.valid){
continue;
}
IkReal x894=((-1.0)*(x897.value));
IkReal x895=x884;
IkReal x896=((-1.0)*x895);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x894;
IkReal gconst56=x894;
IkReal gconst57=(new_r00*x896);
IkReal gconst58=(new_r10*x896);
IkReal x898=new_r10*new_r10;
IkReal x899=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x900=x884;
IkReal x901=(new_r10*x900);
j2eval[0]=x899;
j2eval[1]=((IKabs((((new_r01*x901))+((x898*x900)))))+(IKabs((((new_r11*x901))+(((-1.0)*new_r00*x901))))));
j2eval[2]=IKsign(x899);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
CheckValue<IkReal> x905 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x905.valid){
continue;
}
IkReal x902=((-1.0)*(x905.value));
IkReal x903=x884;
IkReal x904=((-1.0)*x903);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst57;
cj4=gconst58;
j4=x902;
IkReal gconst56=x902;
IkReal gconst57=(new_r00*x904);
IkReal gconst58=(new_r10*x904);
IkReal x906=new_r10*new_r10;
IkReal x907=new_r11*new_r11;
IkReal x908=new_r00*new_r00;
j2eval[0]=(x906+x908);
j2eval[1]=((((2.0)*x906*x907*x908))+((x907*(x908*x908)))+((x907*(x906*x906)))+x906);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(IKsign((((gconst57*new_r00))+((gconst58*new_r10)))),-1);
if(!x909.valid){
continue;
}
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal((((new_r00*new_r11))+(((-1.0)*(gconst58*gconst58))))),IkReal(((((-1.0)*gconst57*gconst58))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x909.value)))+(x910.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x911=IKsin(j2);
IkReal x912=IKcos(j2);
IkReal x913=(gconst58*x912);
IkReal x914=((1.0)*x911);
IkReal x915=(gconst57*x912);
IkReal x916=(gconst57*x914);
evalcond[0]=(gconst58+((new_r10*x911))+((new_r00*x912)));
evalcond[1]=(((gconst58*x911))+new_r10+x915);
evalcond[2]=(gconst57+((new_r10*x912))+(((-1.0)*new_r00*x914)));
evalcond[3]=(gconst58+((new_r11*x912))+(((-1.0)*new_r01*x914)));
evalcond[4]=((((-1.0)*x916))+new_r11+x913);
evalcond[5]=((((-1.0)*x916))+new_r00+x913);
evalcond[6]=((((-1.0)*gconst57))+((new_r11*x911))+((new_r01*x912)));
evalcond[7]=((((-1.0)*gconst58*x914))+(((-1.0)*x915))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x917=((1.0)*gconst58);
CheckValue<IkReal> x918 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x917))+((gconst58*new_r00)))),IkReal(((((-1.0)*new_r01*x917))+(((-1.0)*new_r10*x917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x918.valid){
continue;
}
CheckValue<IkReal> x919=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x919.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x918.value)+(((1.5707963267949)*(x919.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x920=IKsin(j2);
IkReal x921=IKcos(j2);
IkReal x922=(gconst58*x921);
IkReal x923=((1.0)*x920);
IkReal x924=(gconst57*x921);
IkReal x925=(gconst57*x923);
evalcond[0]=(gconst58+((new_r00*x921))+((new_r10*x920)));
evalcond[1]=(((gconst58*x920))+new_r10+x924);
evalcond[2]=(gconst57+(((-1.0)*new_r00*x923))+((new_r10*x921)));
evalcond[3]=(gconst58+(((-1.0)*new_r01*x923))+((new_r11*x921)));
evalcond[4]=((((-1.0)*x925))+new_r11+x922);
evalcond[5]=((((-1.0)*x925))+new_r00+x922);
evalcond[6]=((((-1.0)*gconst57))+((new_r01*x921))+((new_r11*x920)));
evalcond[7]=((((-1.0)*x924))+new_r01+(((-1.0)*gconst58*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x926=((1.0)*new_r10);
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal((((gconst57*new_r00))+(((-1.0)*gconst58*x926)))),IkReal(((((-1.0)*gconst57*x926))+(((-1.0)*gconst58*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x927.value)))+(x928.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x929=IKsin(j2);
IkReal x930=IKcos(j2);
IkReal x931=(gconst58*x930);
IkReal x932=((1.0)*x929);
IkReal x933=(gconst57*x930);
IkReal x934=(gconst57*x932);
evalcond[0]=(gconst58+((new_r00*x930))+((new_r10*x929)));
evalcond[1]=(((gconst58*x929))+new_r10+x933);
evalcond[2]=(gconst57+(((-1.0)*new_r00*x932))+((new_r10*x930)));
evalcond[3]=(gconst58+(((-1.0)*new_r01*x932))+((new_r11*x930)));
evalcond[4]=(new_r11+x931+(((-1.0)*x934)));
evalcond[5]=(new_r00+x931+(((-1.0)*x934)));
evalcond[6]=((((-1.0)*gconst57))+((new_r01*x930))+((new_r11*x929)));
evalcond[7]=((((-1.0)*x933))+new_r01+(((-1.0)*gconst58*x932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x937 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x937)==0){
continue;
}
IkReal x935=pow(x937,-0.5);
IkReal x936=((1.0)*x935);
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
IkReal gconst59=((3.14159265358979)+(((-1.0)*(x938.value))));
IkReal gconst60=(new_r00*x936);
IkReal gconst61=(new_r10*x936);
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x939.value)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
CheckValue<IkReal> x943 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x943.valid){
continue;
}
IkReal x940=((1.0)*(x943.value));
IkReal x941=x935;
IkReal x942=((1.0)*x941);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x940)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x940)));
IkReal gconst60=(new_r00*x942);
IkReal gconst61=(new_r10*x942);
IkReal x944=((new_r10*new_r10)+(new_r00*new_r00));
j2eval[0]=x944;
j2eval[1]=IKsign(x944);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
IkReal x945=((1.0)*(x948.value));
IkReal x946=x935;
IkReal x947=((1.0)*x946);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj4=gconst60;
cj4=gconst61;
j4=((3.14159265)+(((-1.0)*x945)));
IkReal gconst59=((3.14159265358979)+(((-1.0)*x945)));
IkReal gconst60=(new_r00*x947);
IkReal gconst61=(new_r10*x947);
IkReal x949=new_r10*new_r10;
IkReal x950=(new_r10*new_r11);
IkReal x951=(((new_r00*new_r01))+x950);
IkReal x952=x935;
IkReal x953=((1.0)*x952);
j2eval[0]=x951;
j2eval[1]=((IKabs(((((-1.0)*new_r01*new_r10*x953))+(((-1.0)*x949*x953)))))+(IKabs((((new_r00*new_r10*x952))+(((-1.0)*x950*x953))))));
j2eval[2]=IKsign(x951);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst61*gconst61)))+((new_r00*new_r11)))),IkReal(((((-1.0)*gconst60*gconst61))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955=IKPowWithIntegerCheck(IKsign((((gconst61*new_r10))+((gconst60*new_r00)))),-1);
if(!x955.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x954.value)+(((1.5707963267949)*(x955.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x956=IKcos(j2);
IkReal x957=IKsin(j2);
IkReal x958=((1.0)*gconst60);
IkReal x959=(gconst61*x956);
IkReal x960=((1.0)*x957);
IkReal x961=(x957*x958);
evalcond[0]=(((new_r10*x957))+((new_r00*x956))+gconst61);
evalcond[1]=(((gconst60*x956))+((gconst61*x957))+new_r10);
evalcond[2]=(((new_r10*x956))+gconst60+(((-1.0)*new_r00*x960)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x960))+((new_r11*x956)));
evalcond[4]=(new_r11+x959+(((-1.0)*x961)));
evalcond[5]=(new_r00+x959+(((-1.0)*x961)));
evalcond[6]=(((new_r01*x956))+(((-1.0)*x958))+((new_r11*x957)));
evalcond[7]=((((-1.0)*x956*x958))+(((-1.0)*gconst61*x960))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x962=((1.0)*gconst61);
CheckValue<IkReal> x963 = IKatan2WithCheck(IkReal((((gconst61*new_r00))+(((-1.0)*new_r11*x962)))),IkReal(((((-1.0)*new_r01*x962))+(((-1.0)*new_r10*x962)))),IKFAST_ATAN2_MAGTHRESH);
if(!x963.valid){
continue;
}
CheckValue<IkReal> x964=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x964.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x963.value)+(((1.5707963267949)*(x964.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x965=IKcos(j2);
IkReal x966=IKsin(j2);
IkReal x967=((1.0)*gconst60);
IkReal x968=(gconst61*x965);
IkReal x969=((1.0)*x966);
IkReal x970=(x966*x967);
evalcond[0]=(((new_r00*x965))+gconst61+((new_r10*x966)));
evalcond[1]=(((gconst60*x965))+((gconst61*x966))+new_r10);
evalcond[2]=(gconst60+(((-1.0)*new_r00*x969))+((new_r10*x965)));
evalcond[3]=(((new_r11*x965))+gconst61+(((-1.0)*new_r01*x969)));
evalcond[4]=(new_r11+x968+(((-1.0)*x970)));
evalcond[5]=(new_r00+x968+(((-1.0)*x970)));
evalcond[6]=(((new_r11*x966))+((new_r01*x965))+(((-1.0)*x967)));
evalcond[7]=((((-1.0)*x965*x967))+(((-1.0)*gconst61*x969))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x971=((1.0)*new_r10);
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal((((gconst60*new_r00))+(((-1.0)*gconst61*x971)))),IkReal(((((-1.0)*gconst61*new_r00))+(((-1.0)*gconst60*x971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
CheckValue<IkReal> x973=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x973.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x972.value)+(((1.5707963267949)*(x973.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x974=IKcos(j2);
IkReal x975=IKsin(j2);
IkReal x976=((1.0)*gconst60);
IkReal x977=(gconst61*x974);
IkReal x978=((1.0)*x975);
IkReal x979=(x975*x976);
evalcond[0]=(gconst61+((new_r10*x975))+((new_r00*x974)));
evalcond[1]=(((gconst61*x975))+((gconst60*x974))+new_r10);
evalcond[2]=(gconst60+(((-1.0)*new_r00*x978))+((new_r10*x974)));
evalcond[3]=(gconst61+(((-1.0)*new_r01*x978))+((new_r11*x974)));
evalcond[4]=(new_r11+x977+(((-1.0)*x979)));
evalcond[5]=(new_r00+x977+(((-1.0)*x979)));
evalcond[6]=(((new_r01*x974))+((new_r11*x975))+(((-1.0)*x976)));
evalcond[7]=((((-1.0)*x974*x976))+new_r01+(((-1.0)*gconst61*x978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x980=IKcos(j2);
IkReal x981=IKsin(j2);
IkReal x982=((1.0)*x981);
evalcond[0]=(new_r10+x980);
evalcond[1]=((((-1.0)*x982))+new_r11);
evalcond[2]=((((-1.0)*x980))+new_r01);
evalcond[3]=((((-1.0)*x982))+new_r00);
evalcond[4]=(((new_r00*x980))+((new_r10*x981)));
evalcond[5]=((((-1.0)*new_r01*x982))+((new_r11*x980)));
evalcond[6]=((-1.0)+((new_r11*x981))+((new_r01*x980)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x982))+((new_r10*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x983=IKsin(j2);
IkReal x984=IKcos(j2);
IkReal x985=((1.0)*x983);
evalcond[0]=(new_r11+x983);
evalcond[1]=(new_r01+x984);
evalcond[2]=(new_r00+x983);
evalcond[3]=((((-1.0)*x984))+new_r10);
evalcond[4]=(((new_r00*x984))+((new_r10*x983)));
evalcond[5]=((((-1.0)*new_r01*x985))+((new_r11*x984)));
evalcond[6]=((1.0)+((new_r11*x983))+((new_r01*x984)));
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x985))+((new_r10*x984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r10=0;
new_r00=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
IkReal x986=x987.value;
j2array[0]=((-1.0)*x986);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x986)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
IkReal x988=x989.value;
j2array[0]=((-1.0)*x988);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x988)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j2))))+((new_r11*(IKcos(j2)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x990=((1.0)*new_r10);
CheckValue<IkReal> x991=IKPowWithIntegerCheck(IKsign((((cj4*new_r00))+(((-1.0)*sj4*x990)))),-1);
if(!x991.valid){
continue;
}
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x990))+((cj4*sj4)))),IkReal(((((-1.0)*(cj4*cj4)))+(new_r10*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x991.value)))+(x992.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x993=IKsin(j2);
IkReal x994=IKcos(j2);
IkReal x995=((1.0)*sj4);
IkReal x996=(cj4*x994);
IkReal x997=((1.0)*x993);
IkReal x998=(x993*x995);
evalcond[0]=(cj4+((new_r10*x993))+((new_r00*x994)));
evalcond[1]=(((sj4*x994))+((cj4*x993))+new_r10);
evalcond[2]=(sj4+(((-1.0)*new_r00*x997))+((new_r10*x994)));
evalcond[3]=(cj4+((new_r11*x994))+(((-1.0)*new_r01*x997)));
evalcond[4]=((((-1.0)*x998))+new_r11+x996);
evalcond[5]=((((-1.0)*x998))+new_r00+x996);
evalcond[6]=(((new_r11*x993))+(((-1.0)*x995))+((new_r01*x994)));
evalcond[7]=((((-1.0)*cj4*x997))+(((-1.0)*x994*x995))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x999=((1.0)*cj4);
CheckValue<IkReal> x1000 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x999))+((cj4*new_r00)))),IkReal(((((-1.0)*new_r10*x999))+(((-1.0)*new_r01*x999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1000.valid){
continue;
}
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1001.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1000.value)+(((1.5707963267949)*(x1001.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1002=IKsin(j2);
IkReal x1003=IKcos(j2);
IkReal x1004=((1.0)*sj4);
IkReal x1005=(cj4*x1003);
IkReal x1006=((1.0)*x1002);
IkReal x1007=(x1002*x1004);
evalcond[0]=(cj4+((new_r10*x1002))+((new_r00*x1003)));
evalcond[1]=(((sj4*x1003))+((cj4*x1002))+new_r10);
evalcond[2]=(sj4+((new_r10*x1003))+(((-1.0)*new_r00*x1006)));
evalcond[3]=(cj4+((new_r11*x1003))+(((-1.0)*new_r01*x1006)));
evalcond[4]=(x1005+(((-1.0)*x1007))+new_r11);
evalcond[5]=(x1005+(((-1.0)*x1007))+new_r00);
evalcond[6]=((((-1.0)*x1004))+((new_r11*x1002))+((new_r01*x1003)));
evalcond[7]=((((-1.0)*cj4*x1006))+new_r01+(((-1.0)*x1003*x1004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1008=((1.0)*new_r10);
CheckValue<IkReal> x1009=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x1008))+((new_r00*sj4)))),IkReal(((((-1.0)*cj4*new_r00))+(((-1.0)*sj4*x1008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1010.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1009.value)))+(x1010.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1011=IKsin(j2);
IkReal x1012=IKcos(j2);
IkReal x1013=((1.0)*sj4);
IkReal x1014=(cj4*x1012);
IkReal x1015=((1.0)*x1011);
IkReal x1016=(x1011*x1013);
evalcond[0]=(cj4+((new_r10*x1011))+((new_r00*x1012)));
evalcond[1]=(((sj4*x1012))+((cj4*x1011))+new_r10);
evalcond[2]=(sj4+((new_r10*x1012))+(((-1.0)*new_r00*x1015)));
evalcond[3]=(cj4+((new_r11*x1012))+(((-1.0)*new_r01*x1015)));
evalcond[4]=(x1014+(((-1.0)*x1016))+new_r11);
evalcond[5]=(x1014+(((-1.0)*x1016))+new_r00);
evalcond[6]=(((new_r11*x1011))+(((-1.0)*x1013))+((new_r01*x1012)));
evalcond[7]=((((-1.0)*x1012*x1013))+(((-1.0)*cj4*x1015))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x1017=((-1.0)*new_r22);
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal((new_r01*x1017)),IkReal((new_r11*x1017)),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
IkReal x1018=x1019.value;
j2array[0]=((-1.0)*x1018);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1018)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1020=IKcos(j2);
IkReal x1021=IKsin(j2);
IkReal x1022=((1.0)*new_r00);
IkReal x1023=(new_r10*x1021);
evalcond[0]=(((new_r11*x1021))+((new_r01*x1020)));
evalcond[1]=(x1023+((new_r00*x1020)));
evalcond[2]=(((new_r10*x1020))+(((-1.0)*x1021*x1022)));
evalcond[3]=(((new_r11*x1020))+(((-1.0)*new_r01*x1021)));
evalcond[4]=((((-1.0)*new_r22*x1023))+(((-1.0)*new_r22*x1020*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
IkReal x1024=x1025.value;
j2array[0]=((-1.0)*x1024);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1024)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1026=IKcos(j2);
IkReal x1027=IKsin(j2);
IkReal x1028=((1.0)*new_r22);
IkReal x1029=(new_r11*x1027);
IkReal x1030=((1.0)*x1027);
IkReal x1031=(new_r01*x1026);
evalcond[0]=(x1031+x1029);
evalcond[1]=(((new_r10*x1026))+(((-1.0)*new_r00*x1030)));
evalcond[2]=(((new_r11*x1026))+(((-1.0)*new_r01*x1030)));
evalcond[3]=((((-1.0)*x1028*x1029))+(((-1.0)*x1028*x1031)));
evalcond[4]=((((-1.0)*new_r00*x1026*x1028))+(((-1.0)*new_r10*x1027*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
IkReal x1032=x1033.value;
j2array[0]=((-1.0)*x1032);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x1032)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x1034=IKcos(j2);
IkReal x1035=IKsin(j2);
IkReal x1036=((1.0)*new_r22);
IkReal x1037=(new_r00*x1034);
IkReal x1038=((1.0)*x1035);
IkReal x1039=(new_r10*x1035);
evalcond[0]=(x1039+x1037);
evalcond[1]=(((new_r10*x1034))+(((-1.0)*new_r00*x1038)));
evalcond[2]=(((new_r11*x1034))+(((-1.0)*new_r01*x1038)));
evalcond[3]=((((-1.0)*new_r01*x1034*x1036))+(((-1.0)*new_r11*x1035*x1036)));
evalcond[4]=((((-1.0)*x1036*x1039))+(((-1.0)*x1036*x1037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1041=IKPowWithIntegerCheck(sj3,-1);
if(!x1041.valid){
continue;
}
IkReal x1040=x1041.value;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(new_r00,-1);
if(!x1042.valid){
continue;
}
if( IKabs((x1040*(x1042.value)*((((sj3*sj4))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1040)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1040*(x1042.value)*((((sj3*sj4))+((new_r02*new_r10))))))+IKsqr((new_r02*x1040))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1040*(x1042.value)*((((sj3*sj4))+((new_r02*new_r10))))), (new_r02*x1040));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1043=IKcos(j2);
IkReal x1044=IKsin(j2);
IkReal x1045=((1.0)*sj3);
IkReal x1046=((1.0)*cj4);
IkReal x1047=(new_r01*x1043);
IkReal x1048=(new_r02*x1043);
IkReal x1049=(cj3*x1044);
IkReal x1050=(cj3*x1046);
IkReal x1051=(sj4*x1043);
IkReal x1052=(new_r11*x1044);
IkReal x1053=((1.0)*x1044);
IkReal x1054=(new_r00*x1043);
IkReal x1055=(new_r10*x1044);
IkReal x1056=(new_r12*x1044);
evalcond[0]=((((-1.0)*x1043*x1045))+new_r02);
evalcond[1]=((((-1.0)*x1044*x1045))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1053))+((new_r12*x1043)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1053))+((new_r10*x1043)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1053))+((new_r11*x1043)));
evalcond[5]=(new_r11+((cj4*x1043))+((sj4*x1049)));
evalcond[6]=(x1056+x1048+(((-1.0)*x1045)));
evalcond[7]=(x1052+x1047+((cj3*sj4)));
evalcond[8]=((((-1.0)*x1044*x1046))+((cj3*x1051))+new_r01);
evalcond[9]=((((-1.0)*x1046*x1049))+x1051+new_r10);
evalcond[10]=((((-1.0)*x1050))+x1054+x1055);
evalcond[11]=((((-1.0)*x1043*x1050))+(((-1.0)*sj4*x1053))+new_r00);
evalcond[12]=(((new_r22*sj3))+((cj3*x1048))+((new_r12*x1049)));
evalcond[13]=(sj4+((new_r11*x1049))+((cj3*x1047))+((new_r21*sj3)));
evalcond[14]=((((-1.0)*x1045*x1054))+(((-1.0)*x1045*x1055))+((cj3*new_r20)));
evalcond[15]=((((-1.0)*x1045*x1052))+(((-1.0)*x1045*x1047))+((cj3*new_r21)));
evalcond[16]=((1.0)+(((-1.0)*x1045*x1056))+(((-1.0)*x1045*x1048))+((cj3*new_r22)));
evalcond[17]=(((new_r20*sj3))+((cj3*x1054))+((new_r10*x1049))+(((-1.0)*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1057=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1057.valid){
continue;
}
CheckValue<IkReal> x1058 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1058.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1057.value)))+(x1058.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[18];
IkReal x1059=IKcos(j2);
IkReal x1060=IKsin(j2);
IkReal x1061=((1.0)*sj3);
IkReal x1062=((1.0)*cj4);
IkReal x1063=(new_r01*x1059);
IkReal x1064=(new_r02*x1059);
IkReal x1065=(cj3*x1060);
IkReal x1066=(cj3*x1062);
IkReal x1067=(sj4*x1059);
IkReal x1068=(new_r11*x1060);
IkReal x1069=((1.0)*x1060);
IkReal x1070=(new_r00*x1059);
IkReal x1071=(new_r10*x1060);
IkReal x1072=(new_r12*x1060);
evalcond[0]=((((-1.0)*x1059*x1061))+new_r02);
evalcond[1]=((((-1.0)*x1060*x1061))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1069))+((new_r12*x1059)));
evalcond[3]=(sj4+(((-1.0)*new_r00*x1069))+((new_r10*x1059)));
evalcond[4]=(cj4+(((-1.0)*new_r01*x1069))+((new_r11*x1059)));
evalcond[5]=(new_r11+((sj4*x1065))+((cj4*x1059)));
evalcond[6]=(x1072+x1064+(((-1.0)*x1061)));
evalcond[7]=(x1068+x1063+((cj3*sj4)));
evalcond[8]=((((-1.0)*x1060*x1062))+((cj3*x1067))+new_r01);
evalcond[9]=(x1067+(((-1.0)*x1062*x1065))+new_r10);
evalcond[10]=(x1070+x1071+(((-1.0)*x1066)));
evalcond[11]=((((-1.0)*x1059*x1066))+(((-1.0)*sj4*x1069))+new_r00);
evalcond[12]=(((cj3*x1064))+((new_r22*sj3))+((new_r12*x1065)));
evalcond[13]=(sj4+((cj3*x1063))+((new_r11*x1065))+((new_r21*sj3)));
evalcond[14]=((((-1.0)*x1061*x1071))+(((-1.0)*x1061*x1070))+((cj3*new_r20)));
evalcond[15]=((((-1.0)*x1061*x1068))+(((-1.0)*x1061*x1063))+((cj3*new_r21)));
evalcond[16]=((1.0)+(((-1.0)*x1061*x1072))+(((-1.0)*x1061*x1064))+((cj3*new_r22)));
evalcond[17]=(((new_r20*sj3))+((cj3*x1070))+((new_r10*x1065))+(((-1.0)*x1062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1073.valid){
continue;
}
CheckValue<IkReal> x1074 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1074.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1073.value)))+(x1074.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1075=IKcos(j2);
IkReal x1076=IKsin(j2);
IkReal x1077=((1.0)*sj3);
IkReal x1078=(new_r02*x1075);
IkReal x1079=(new_r12*x1076);
IkReal x1080=(x1076*x1077);
evalcond[0]=((((-1.0)*x1075*x1077))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x1080)));
evalcond[2]=(((new_r12*x1075))+(((-1.0)*new_r02*x1076)));
evalcond[3]=(x1078+x1079+(((-1.0)*x1077)));
evalcond[4]=(((cj3*x1079))+((cj3*x1078))+((new_r22*sj3)));
evalcond[5]=((((-1.0)*new_r10*x1080))+(((-1.0)*new_r00*x1075*x1077))+((cj3*new_r20)));
evalcond[6]=((((-1.0)*new_r11*x1080))+(((-1.0)*new_r01*x1075*x1077))+((cj3*new_r21)));
evalcond[7]=((1.0)+(((-1.0)*x1077*x1078))+(((-1.0)*x1077*x1079))+((cj3*new_r22)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
j4eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=cj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=sj3;
j4eval[1]=sj2;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1081=((1.0)*cj2);
if( IKabs(((((-1.0)*new_r01*x1081))+(((-1.0)*new_r11*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj2))+(((-1.0)*new_r11*x1081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*x1081))+(((-1.0)*new_r11*sj2))))+IKsqr((((new_r01*sj2))+(((-1.0)*new_r11*x1081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r01*x1081))+(((-1.0)*new_r11*sj2))), (((new_r01*sj2))+(((-1.0)*new_r11*x1081))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1082=IKsin(j4);
IkReal x1083=IKcos(j4);
IkReal x1084=((1.0)*sj2);
IkReal x1085=(cj2*x1082);
IkReal x1086=(cj2*x1083);
IkReal x1087=(x1083*x1084);
evalcond[0]=(x1082+((new_r11*sj2))+((cj2*new_r01)));
evalcond[1]=(x1082+(((-1.0)*new_r00*x1084))+((cj2*new_r10)));
evalcond[2]=(x1083+(((-1.0)*new_r01*x1084))+((cj2*new_r11)));
evalcond[3]=(x1086+((sj2*x1082))+new_r11);
evalcond[4]=(((new_r10*sj2))+(((-1.0)*x1083))+((cj2*new_r00)));
evalcond[5]=(x1085+new_r01+(((-1.0)*x1087)));
evalcond[6]=(x1085+new_r10+(((-1.0)*x1087)));
evalcond[7]=((((-1.0)*x1086))+(((-1.0)*x1082*x1084))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1088=((1.0)*new_r10);
if( IKabs((((new_r11*sj2))+(((-1.0)*cj2*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x1088))+(((-1.0)*cj2*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*sj2))+(((-1.0)*cj2*x1088))))+IKsqr(((((-1.0)*sj2*x1088))+(((-1.0)*cj2*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((new_r11*sj2))+(((-1.0)*cj2*x1088))), ((((-1.0)*sj2*x1088))+(((-1.0)*cj2*new_r11))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1089=IKcos(j4);
IkReal x1090=IKsin(j4);
IkReal x1091=((1.0)*sj2);
IkReal x1092=(cj2*x1089);
IkReal x1093=((1.0)*x1090);
IkReal x1094=(x1090*x1091);
evalcond[0]=(x1089+((new_r10*sj2))+((cj2*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x1091))+x1090+((cj2*new_r10)));
evalcond[2]=(x1089+(((-1.0)*new_r01*x1091))+((cj2*new_r11)));
evalcond[3]=(((new_r11*sj2))+(((-1.0)*x1093))+((cj2*new_r01)));
evalcond[4]=(((sj2*x1089))+new_r10+((cj2*x1090)));
evalcond[5]=(x1092+(((-1.0)*x1094))+new_r11);
evalcond[6]=(x1092+(((-1.0)*x1094))+new_r00);
evalcond[7]=((((-1.0)*cj2*x1093))+(((-1.0)*x1089*x1091))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1095=IKsin(j4);
IkReal x1096=IKcos(j4);
IkReal x1097=((1.0)*x1096);
evalcond[0]=(x1095+new_r10);
evalcond[1]=(x1096+new_r11);
evalcond[2]=(new_r21+((sj3*x1095)));
evalcond[3]=(new_r01+((cj3*x1095)));
evalcond[4]=((((-1.0)*sj3*x1097))+new_r20);
evalcond[5]=((((-1.0)*cj3*x1097))+new_r00);
evalcond[6]=(x1095+((cj3*new_r01))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x1097))+((cj3*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r10, new_r11);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1098=IKsin(j4);
IkReal x1099=IKcos(j4);
IkReal x1100=((1.0)*new_r00);
IkReal x1101=((1.0)*new_r01);
IkReal x1102=((1.0)*x1099);
evalcond[0]=(new_r21+((sj3*x1098)));
evalcond[1]=(x1098+(((-1.0)*new_r10)));
evalcond[2]=(x1099+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*sj3*x1102))+new_r20);
evalcond[4]=((((-1.0)*x1101))+((cj3*x1098)));
evalcond[5]=((((-1.0)*x1100))+(((-1.0)*cj3*x1102)));
evalcond[6]=(x1098+((new_r21*sj3))+(((-1.0)*cj3*x1101)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*x1102))+(((-1.0)*cj3*x1100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, new_r01);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1103=IKsin(j4);
IkReal x1104=IKcos(j4);
IkReal x1105=((1.0)*x1104);
evalcond[0]=(((sj3*x1103))+new_r21);
evalcond[1]=(x1103+(((-1.0)*new_r00)));
evalcond[2]=(x1104+(((-1.0)*new_r01)));
evalcond[3]=(new_r11+((cj3*x1103)));
evalcond[4]=((((-1.0)*sj3*x1105))+new_r20);
evalcond[5]=(new_r10+(((-1.0)*cj3*x1105)));
evalcond[6]=(x1103+((cj3*new_r11))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+((cj3*new_r10))+(((-1.0)*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x1106=IKsin(j4);
IkReal x1107=IKcos(j4);
IkReal x1108=((1.0)*cj3);
IkReal x1109=((1.0)*x1107);
evalcond[0]=(x1106+new_r00);
evalcond[1]=(x1107+new_r01);
evalcond[2]=(((sj3*x1106))+new_r21);
evalcond[3]=((((-1.0)*sj3*x1109))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((cj3*x1106)));
evalcond[5]=((((-1.0)*x1107*x1108))+(((-1.0)*new_r10)));
evalcond[6]=(x1106+(((-1.0)*new_r11*x1108))+((new_r21*sj3)));
evalcond[7]=(((new_r20*sj3))+(((-1.0)*new_r10*x1108))+(((-1.0)*x1109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j4eval[0]=IKabs(new_r22);
if( IKabs(j4eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j4]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1111=IKPowWithIntegerCheck(sj3,-1);
if(!x1111.valid){
continue;
}
IkReal x1110=x1111.value;
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(sj2,-1);
if(!x1112.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1110)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1110*(x1112.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1110))+IKsqr((x1110*(x1112.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1110), (x1110*(x1112.value)*((((new_r01*sj3))+(((-1.0)*cj2*cj3*new_r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1113=IKsin(j4);
IkReal x1114=IKcos(j4);
IkReal x1115=(cj2*new_r01);
IkReal x1116=(new_r10*sj2);
IkReal x1117=((1.0)*sj2);
IkReal x1118=(cj3*sj2);
IkReal x1119=(cj2*new_r00);
IkReal x1120=((1.0)*x1114);
IkReal x1121=(cj2*x1113);
evalcond[0]=(((sj3*x1113))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1120))+new_r20);
evalcond[2]=(x1113+((cj2*new_r10))+(((-1.0)*new_r00*x1117)));
evalcond[3]=(x1114+(((-1.0)*new_r01*x1117))+((cj2*new_r11)));
evalcond[4]=(x1115+((new_r11*sj2))+((cj3*x1113)));
evalcond[5]=(((x1113*x1118))+((cj2*x1114))+new_r11);
evalcond[6]=(x1116+x1119+(((-1.0)*cj3*x1120)));
evalcond[7]=((((-1.0)*x1114*x1117))+new_r01+((cj3*x1121)));
evalcond[8]=(x1121+(((-1.0)*cj3*x1114*x1117))+new_r10);
evalcond[9]=((((-1.0)*x1113*x1117))+(((-1.0)*cj2*cj3*x1120))+new_r00);
evalcond[10]=(x1113+((new_r11*x1118))+((new_r21*sj3))+((cj3*x1115)));
evalcond[11]=(((new_r20*sj3))+(((-1.0)*x1120))+((cj3*x1116))+((cj3*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(sj3,-1);
if(!x1123.valid){
continue;
}
IkReal x1122=x1123.value;
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(cj2,-1);
if(!x1124.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x1122)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1122*(x1124.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x1122))+IKsqr((x1122*(x1124.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r21*x1122), (x1122*(x1124.value)*((((cj3*new_r21*sj2))+(((-1.0)*new_r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1125=IKsin(j4);
IkReal x1126=IKcos(j4);
IkReal x1127=(cj2*new_r01);
IkReal x1128=(new_r10*sj2);
IkReal x1129=((1.0)*sj2);
IkReal x1130=(cj3*sj2);
IkReal x1131=(cj2*new_r00);
IkReal x1132=((1.0)*x1126);
IkReal x1133=(cj2*x1125);
evalcond[0]=(((sj3*x1125))+new_r21);
evalcond[1]=((((-1.0)*sj3*x1132))+new_r20);
evalcond[2]=(x1125+(((-1.0)*new_r00*x1129))+((cj2*new_r10)));
evalcond[3]=(x1126+(((-1.0)*new_r01*x1129))+((cj2*new_r11)));
evalcond[4]=(x1127+((new_r11*sj2))+((cj3*x1125)));
evalcond[5]=(((cj2*x1126))+((x1125*x1130))+new_r11);
evalcond[6]=(x1128+x1131+(((-1.0)*cj3*x1132)));
evalcond[7]=(((cj3*x1133))+(((-1.0)*x1126*x1129))+new_r01);
evalcond[8]=(x1133+(((-1.0)*cj3*x1126*x1129))+new_r10);
evalcond[9]=((((-1.0)*cj2*cj3*x1132))+new_r00+(((-1.0)*x1125*x1129)));
evalcond[10]=(x1125+((new_r11*x1130))+((new_r21*sj3))+((cj3*x1127)));
evalcond[11]=(((cj3*x1131))+((new_r20*sj3))+(((-1.0)*x1132))+((cj3*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1134.valid){
continue;
}
CheckValue<IkReal> x1135 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x1135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1134.value)))+(x1135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x1136=IKsin(j4);
IkReal x1137=IKcos(j4);
IkReal x1138=(cj2*new_r01);
IkReal x1139=(new_r10*sj2);
IkReal x1140=((1.0)*sj2);
IkReal x1141=(cj3*sj2);
IkReal x1142=(cj2*new_r00);
IkReal x1143=((1.0)*x1137);
IkReal x1144=(cj2*x1136);
evalcond[0]=(new_r21+((sj3*x1136)));
evalcond[1]=(new_r20+(((-1.0)*sj3*x1143)));
evalcond[2]=(x1136+(((-1.0)*new_r00*x1140))+((cj2*new_r10)));
evalcond[3]=(x1137+(((-1.0)*new_r01*x1140))+((cj2*new_r11)));
evalcond[4]=(x1138+((cj3*x1136))+((new_r11*sj2)));
evalcond[5]=(((cj2*x1137))+new_r11+((x1136*x1141)));
evalcond[6]=((((-1.0)*cj3*x1143))+x1142+x1139);
evalcond[7]=((((-1.0)*x1137*x1140))+((cj3*x1144))+new_r01);
evalcond[8]=(x1144+new_r10+(((-1.0)*cj3*x1137*x1140)));
evalcond[9]=((((-1.0)*x1136*x1140))+(((-1.0)*cj2*cj3*x1143))+new_r00);
evalcond[10]=(x1136+((cj3*x1138))+((new_r21*sj3))+((new_r11*x1141)));
evalcond[11]=(((cj3*x1139))+((new_r20*sj3))+((cj3*x1142))+(((-1.0)*x1143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - motoman_sia20d (49e1e286c5b328be74d5c54a1e8ff9bb)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
