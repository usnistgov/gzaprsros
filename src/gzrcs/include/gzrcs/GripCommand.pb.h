// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GripCommand.proto

#ifndef PROTOBUF_GripCommand_2eproto__INCLUDED
#define PROTOBUF_GripCommand_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GripCommand_2eproto();
void protobuf_AssignDesc_GripCommand_2eproto();
void protobuf_ShutdownFile_GripCommand_2eproto();

class GripCommand;

// ===================================================================

class GripCommand : public ::google::protobuf::Message {
 public:
  GripCommand();
  virtual ~GripCommand();

  GripCommand(const GripCommand& from);

  inline GripCommand& operator=(const GripCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GripCommand& default_instance();

  void Swap(GripCommand* other);

  // implements Message ----------------------------------------------

  GripCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GripCommand& from);
  void MergeFrom(const GripCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline ::google::protobuf::int32 enable() const;
  inline void set_enable(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated double force = 3;
  inline int force_size() const;
  inline void clear_force();
  static const int kForceFieldNumber = 3;
  inline double force(int index) const;
  inline void set_force(int index, double value);
  inline void add_force(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      force() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_force();

  // @@protoc_insertion_point(class_scope:message.GripCommand)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 enable_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedField< double > force_;
  friend void  protobuf_AddDesc_GripCommand_2eproto();
  friend void protobuf_AssignDesc_GripCommand_2eproto();
  friend void protobuf_ShutdownFile_GripCommand_2eproto();

  void InitAsDefaultInstance();
  static GripCommand* default_instance_;
};
// ===================================================================


// ===================================================================

// GripCommand

// required int32 enable = 1;
inline bool GripCommand::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GripCommand::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GripCommand::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GripCommand::clear_enable() {
  enable_ = 0;
  clear_has_enable();
}
inline ::google::protobuf::int32 GripCommand::enable() const {
  // @@protoc_insertion_point(field_get:message.GripCommand.enable)
  return enable_;
}
inline void GripCommand::set_enable(::google::protobuf::int32 value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:message.GripCommand.enable)
}

// optional int32 state = 2;
inline bool GripCommand::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GripCommand::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GripCommand::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GripCommand::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GripCommand::state() const {
  // @@protoc_insertion_point(field_get:message.GripCommand.state)
  return state_;
}
inline void GripCommand::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:message.GripCommand.state)
}

// repeated double force = 3;
inline int GripCommand::force_size() const {
  return force_.size();
}
inline void GripCommand::clear_force() {
  force_.Clear();
}
inline double GripCommand::force(int index) const {
  // @@protoc_insertion_point(field_get:message.GripCommand.force)
  return force_.Get(index);
}
inline void GripCommand::set_force(int index, double value) {
  force_.Set(index, value);
  // @@protoc_insertion_point(field_set:message.GripCommand.force)
}
inline void GripCommand::add_force(double value) {
  force_.Add(value);
  // @@protoc_insertion_point(field_add:message.GripCommand.force)
}
inline const ::google::protobuf::RepeatedField< double >&
GripCommand::force() const {
  // @@protoc_insertion_point(field_list:message.GripCommand.force)
  return force_;
}
inline ::google::protobuf::RepeatedField< double >*
GripCommand::mutable_force() {
  // @@protoc_insertion_point(field_mutable_list:message.GripCommand.force)
  return &force_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GripCommand_2eproto__INCLUDED
